<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.hqyt</groupId>
	<artifactId>boot-demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>boot-demo</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.3.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
	
		<!-- 打war包时需配置此选项 -->
		<!-- <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency> -->
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<!-- Spring-Mybatis -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.0</version>
	        </dependency>
 
		<!-- MySQL -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		
		<!-- swagger相关 -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.8.0</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.8.0</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

		<!--jdk8升到jdk11添加-->
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.0</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>2.3.0</version>
		</dependency>
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-core</artifactId>
			<version>2.3.0</version>
		</dependency>
		<dependency>
			<groupId>javax.activation</groupId>
			<artifactId>activation</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.2.4</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.16.22</version>
		</dependency>
		<dependency>
			<groupId>cn.hutool</groupId>
			<artifactId>hutool-all</artifactId>
			<version>4.1.20</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.4.13</version>
				
				<!-- 推送镜像到docker主机配置 -->
				<configuration>
					<forceTags>true</forceTags>    <!--覆盖相同标签镜像-->
					<imageName>inmysqlwebi:1.0</imageName>  <!--指定镜像名称 仓库/镜像名:标签-->
					<dockerHost>http://192.168.31.211:2375</dockerHost>  <!-- 直接推送到指定主机，非仓库 -->
					<!-- <dockerHost>http://192.168.31.211:5000</dockerHost> -->  <!-- 指定仓库地址(无法测试通过) -->
					<dockerDirectory>src/main/docker</dockerDirectory>   <!--dockerfile文件路径-->
					<resources>
						<resource>                                             <!-- 指定资源文件 -->
							<targetPath>/</targetPath>                         <!-- 指定要复制的目录路径，这里是当前目录 -->
							<directory>${project.build.directory}</directory>  <!-- 指定要复制的根目录，这里是target目录 -->
							<include>${project.build.finalName}.jar</include>  <!-- 指定需要拷贝的文件，这里指最后生成的jar包 -->
						</resource>
					</resources>
				</configuration>
				
				<!-- 推送镜像到私有仓库配置，必须建立在【推送镜像到docker主机配置】之上-->
				<executions>
					<execution>
						<id>build-image</id>     <!--定义一个执行命令的id-->
						<!-- <phase>package</phase> -->   <!--绑定mvn的哪个命令,注释后就不会被触发执行-->
						<goals>
							<goal>build</goal>   <!--要执行的命令 -->
						</goals>
					</execution>
					<execution>
					   <id>image-tag</id>
					   <!-- <phase>package</phase> -->
					   <goals>
						   <goal>tag</goal>      <!--tag命令，相当于docker的tag命令-->
					   </goals>
					   <configuration>
						   <image>outmysqlwebi:1.0</image>   <!--镜像名-->
						   <newName>192.168.31.211:5000/outmysqlwebi:1.0</newName>   <!--打的标签名-->
					   </configuration>
				    </execution>
				    <execution>
					   <id>package-push</id>
					   <!-- <phase>package</phase> -->
					   <goals>
						   <goal>push</goal>    <!--相当于docker的push命令-->
					   </goals>
					   <configuration>
						   <imageName>192.168.31.211:5000/outmysqlwebi:1.0</imageName>  <!--要push的镜像名-->
					   </configuration>
				    </execution>
				</executions>
				
			</plugin>
			
		</plugins>
	</build>


</project>
