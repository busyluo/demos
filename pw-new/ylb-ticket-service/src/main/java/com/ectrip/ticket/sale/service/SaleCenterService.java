package com.ectrip.ticket.sale.service;

import java.beans.BeanInfo;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.InvocationTargetException;
import java.math.BigDecimal;
import java.net.URLEncoder;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import java.util.Vector;
import java.util.regex.Pattern;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.cxf.endpoint.Client;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSON;
import com.ectrip.base.enums.CKFS;
import com.ectrip.base.enums.CPFS;
import com.ectrip.base.util.Debug;
import com.ectrip.base.util.Encrypt;
import com.ectrip.base.util.EncryptUtil;
import com.ectrip.base.util.ListToResultBean;
import com.ectrip.base.util.MapToResultBean;
import com.ectrip.base.util.MathUtil;
import com.ectrip.base.util.ResultBean;
import com.ectrip.base.util.SpringUtil;
import com.ectrip.base.util.StringUtil;
import com.ectrip.base.util.Tools;
import com.ectrip.base.util.WebContant;
import com.ectrip.ec.model.balance.Useryfk;
import com.ectrip.ec.model.order.Checkcount;
import com.ectrip.ec.model.order.MOrder;
import com.ectrip.ec.model.order.PaymentBill;
import com.ectrip.ec.model.order.Raftcheck;
import com.ectrip.ec.model.order.Reservecontrol;
import com.ectrip.ec.model.order.Seatordertab;
import com.ectrip.ec.model.order.SeatordertabId;
import com.ectrip.ec.model.order.Seatyordertab;
import com.ectrip.ec.model.order.SeatyordertabId;
import com.ectrip.ec.model.order.TOrder;
import com.ectrip.ec.model.order.TOrderId;
import com.ectrip.ec.model.order.TOrderlist;
import com.ectrip.ec.model.order.TOrderlistId;
import com.ectrip.ec.model.order.TRealname;
import com.ectrip.ec.model.order.TZorderlist;
import com.ectrip.ec.model.order.TZorderlistId;
import com.ectrip.ec.model.order.YOrder;
import com.ectrip.ec.model.order.YOrderId;
import com.ectrip.ec.model.order.YOrderlist;
import com.ectrip.ec.model.order.YOrderlistId;
import com.ectrip.ec.model.order.YZorderlist;
import com.ectrip.ec.model.order.YZorderlistId;
import com.ectrip.ec.model.report.Guidenotice;
import com.ectrip.ec.model.user.Custom;
import com.ectrip.ec.model.usernumjf.Usernumjf;
import com.ectrip.ec.model.usernumjf.Usernumjflist;
import com.ectrip.ec.model.usernumjf.UsernumjflistId;
import com.ectrip.hqyt.client.HqytClient;
import com.ectrip.hqyt.model.request.RefundbillsRequest;
import com.ectrip.hqyt.model.response.JSONRefundBill;
import com.ectrip.sys.model.balance.Vipbalance;
import com.ectrip.sys.model.employee.Companyscenic;
import com.ectrip.sys.model.employee.Esfemployeetab;
import com.ectrip.sys.model.employee.Galcompanyinfotab;
import com.ectrip.sys.model.syspar.Orderlog;
import com.ectrip.sys.model.syspar.Receiptmanager;
import com.ectrip.sys.model.syspar.Soderollprintmanage;
import com.ectrip.sys.model.syspar.Sysparv5;
import com.ectrip.sys.model.syspar.Sysparv5Id;
import com.ectrip.sys.model.syspar.Webinfotab;
import com.ectrip.ticket.common.checkUtils.CommonUtil;
import com.ectrip.ticket.common.service.iservice.IStockService;
import com.ectrip.ticket.feign.service.EcService;
import com.ectrip.ticket.feign.service.SysService;
//import com.ectrip.ticket.cyt.client.v1.CYTClient;
import com.ectrip.ticket.iccard.service.iservice.IICcardService;
import com.ectrip.ticket.model.afcset.Esbaccessstatustab;
import com.ectrip.ticket.model.centersale.T_order;
import com.ectrip.ticket.model.centersale.T_orderlist;
import com.ectrip.ticket.model.centersale.T_zorderlist;
import com.ectrip.ticket.model.centersale.Trealname;
import com.ectrip.ticket.model.guide.Guideprices;
import com.ectrip.ticket.model.guide.Stssguidecount;
import com.ectrip.ticket.model.order.Seatsaletab;
import com.ectrip.ticket.model.order.Stscomticketsalesdetailstab;
import com.ectrip.ticket.model.order.StscomticketsalesdetailstabId;
import com.ectrip.ticket.model.order.Stssalessettlementtab;
import com.ectrip.ticket.model.order.StssalessettlementtabId;
import com.ectrip.ticket.model.order.Stssalesvoucherdetailstab;
import com.ectrip.ticket.model.order.StssalesvoucherdetailstabId;
import com.ectrip.ticket.model.order.Stssalesvouchertab;
import com.ectrip.ticket.model.order.StssalesvouchertabId;
import com.ectrip.ticket.model.order.Stsschecktab;
import com.ectrip.ticket.model.order.StsschecktabId;
import com.ectrip.ticket.model.order.Stssoldticketattesttab;
import com.ectrip.ticket.model.order.StssoldticketattesttabId;
import com.ectrip.ticket.model.order.Stssoldticketsubtab;
import com.ectrip.ticket.model.order.StssoldticketsubtabId;
import com.ectrip.ticket.model.order.Stssoldtickettab;
import com.ectrip.ticket.model.order.StssoldtickettabId;
import com.ectrip.ticket.model.order.Ticketprintlist;
import com.ectrip.ticket.model.permitenter.Esbrefundrules;
import com.ectrip.ticket.model.permitenter.Opwwicketsettab;
import com.ectrip.ticket.model.provider.Changebackrate;
import com.ectrip.ticket.model.provider.Edmcrowdkindpricetab;
import com.ectrip.ticket.model.provider.Edmticketcomposepricetab;
import com.ectrip.ticket.model.provider.Edmticketnoruletab;
import com.ectrip.ticket.model.provider.Edmticketproduct;
import com.ectrip.ticket.model.provider.Edmtickettypetab;
import com.ectrip.ticket.model.provider.Edpcrowdkindtab;
import com.ectrip.ticket.model.provider.Edpofferschemetab;
import com.ectrip.ticket.model.provider.Esbprovicerq;
import com.ectrip.ticket.model.provider.Esbscenicareatab;
import com.ectrip.ticket.model.provider.Esbticketstationtab;
import com.ectrip.ticket.model.provider.Esbticketwintab;
import com.ectrip.ticket.model.provider.Hotelprovider;
import com.ectrip.ticket.model.provider.Jgfz;
import com.ectrip.ticket.model.provider.TicketPrintNo;
import com.ectrip.ticket.model.provider.Ticketxgz;
import com.ectrip.ticket.model.provider.TimeSharingTicketTab;
import com.ectrip.ticket.model.salesmanager.Ospforcedrefundsettab;
import com.ectrip.ticket.model.salesmanager.SaleLog;
import com.ectrip.ticket.model.stock.StockJson;
import com.ectrip.ticket.model.stock.StockOrderInfo;
import com.ectrip.ticket.model.venuemarketing.Prdtripvenuemanage;
import com.ectrip.ticket.model.venuemarketing.Productcontrol;
import com.ectrip.ticket.model.venuemarketing.Seatstatustab;
import com.ectrip.ticket.model.venuemarketing.SeatstatustabId;
import com.ectrip.ticket.model.venuemarketing.Trip;
import com.ectrip.ticket.model.warehouse.Iompersonalticketdetails;
import com.ectrip.ticket.model.warehouse.Kcpersonalticketdetailstab;
import com.ectrip.ticket.provider.dao.ITimeSharingDAO;
import com.ectrip.ticket.provider.service.ITimeSharingService;
import com.ectrip.ticket.provider.service.impl.TimeSharingService;
import com.ectrip.ticket.sale.Returnmodel;
import com.ectrip.ticket.sale.countList;
import com.ectrip.ticket.sale.service.card.model.RefundRequest;
import com.ectrip.ticket.sale.service.card.model.RefundResponse;
import com.ectrip.ticket.sale.service.card.service.iservice.IOneCardService;
import com.ectrip.ticket.sale.service.iservice.ISaleCenterService;
import com.ectrip.ticket.stocks.dao.idao.IStocksWareDAO;
import com.ectrip.ticket.util.ConverToCNMoneyUtils;
import com.ectrip.ticket.util.JaxWsDynamicClientFactoryUtil;
import com.ectrip.ticket.util.ServerNameConst;

/**
*
* @author 袁成军 李进 于2012-08-29日修改， saveStssalesvoucherdetailstab 方法中 增加了
*         szticketprintno 参数 李经瑞 2012-09-03日修改 addPersonaldetails方法 添加 IC卡售票保存
*         李经锐修改 2012-09-05 saveorder41和saveStssoldtickettabug0make01 增加判断
*         预制票和IC 除了要判断是否 现场激活 还要判断介质类型 李进修改了 getticket 方法，支持跨服务商套票。 李进
*         2012-09095 修改了 getCustom 方法，原方式可以读出总社， 现修改成不能读总社，因为总社不允许购票。
*         2012-09-06 修改savetorder41方法 增加判断 预制票和IC 介质类型 李经锐 2012-09-10 修改
*         soldticketlist/getcancelprint/ticketreprintbylb 方法 增加返回子票ID字段
*         2012-09-14 修改getorderbyorid/getOrderTicketmesssage/getTicketmesssage
*         方法 增加返回产品ID itickettypeid 2012-10-24 修改预制票方法
*         10-25修改getcheckTicketmesssage()增加字段显示
*/
@Service
public class SaleCenterService implements ISaleCenterService {
	
	private static final Logger LOGGER = LogManager.getLogger(SaleCenterService.class);
    
	@Autowired
	private IStocksWareDAO stockswareDao;
	@Autowired
	private ITimeSharingDAO timeSharingDao;
	@Autowired
	private ITimeSharingService timeSharingService;
	@Autowired
	private SysService sysService;
	@Autowired
	private EcService ecService;
	@Autowired
	private IStockService stockService;
	public ResultBean empztlogin(Long iscenicid, String userid, String password)
            throws Exception {
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        Esfemployeetab employee = null;
        List emplist = timeSharingDao.find("from Esfemployeetab where empid='"
                + userid + "' and byisuse=1");
        if (emplist == null || emplist.size() == 0) {
            rs.addRow(new String[] { "false", "无效用户" });
            return rs;

        } else {
            employee = (Esfemployeetab) emplist.get(0);
            Long companyid = employee.getIcompanyinfoid();
            List glist = timeSharingDao
                    .find("from Galcompanyinfotab where  icompanyinfoid="
                            + companyid);
            Galcompanyinfotab galcompanyinfotab = (Galcompanyinfotab) glist
                    .get(0);
            employee.setSzcompanyinfoname(galcompanyinfotab.getSzcompanyname());
            employee.setCompanytype(galcompanyinfotab.getCompanytype());
            if (galcompanyinfotab.getCompanytype().equals("02")) {
                List comlist = timeSharingDao
                        .find("from Companyscenic where id.icompanyinfoid="
                                + companyid);
                if (comlist == null || comlist.size() == 0) {
                    rs.addRow(new String[] { "false", "您所属公司未绑定服务商" });
                    return rs;
                } else {
                    boolean b = false;
                    for (int i = 0; i < comlist.size(); i++) {
                        Companyscenic c = (Companyscenic) comlist.get(i);

                        if (iscenicid.longValue() == c.getId().getIscenicid()
                                .longValue()) {

                            b = true;
                            break;
                        }
                    }
                    // System.out.println(b);
                    if (!b) {
                        rs.addRow(new String[] { "false", "你所在公司不能在该售票窗口售票" });
                        return rs;
                    }
                }
            }

			/*
			 * else { rc_id = -6; throw new Exception("平台公司员工没有售票权限"); }
			 */
            String loginintime = employee.getLogintime();
            if (loginintime != null && loginintime.length() > 10) {
                if (loginintime.substring(0, 10).equals(Tools.getTodayString())) {
                    if (employee.getZtimes() >= 5) {
                        rs.addRow(new String[] { "false", "今日您已经登陆错误次数超过5次" });
                        return rs;

                    }
                }
            }

            Encrypt encrypt = new Encrypt();
            password = encrypt.passwordEncrypt(password);
            if (!password.equals(employee.getSzpassword())) {
                if (loginintime != null && loginintime.length() > 10) {
                    if (loginintime.substring(0, 10).equals(
                            Tools.getTodayString())) {
                        if (employee.getZtimes() == null
                                || employee.getZtimes().equals("")) {
                            employee.setZtimes(new Long(1));
                        } else {
                            employee.setZtimes(employee.getZtimes() + 1);
                        }
                    } else {
                        employee.setLogintime(Tools.getDayTimes());
                        employee.setZtimes(new Long(1));
                    }
                } else {
                    employee.setLogintime(Tools.getDayTimes());
                    employee.setZtimes(new Long(1));
                }
                timeSharingDao.update(employee);

                rs.addRow(new String[] { "false",
                        "密码错误 " + employee.getZtimes() + "次，超过5次当日将不能登录！" });
                return rs;

            } else {
                List epdlist = timeSharingDao
                        .find("select e.empid,epp.idutyid from Esfemployeetab e,Esfemployeepoststab ep,Esppostsdutytab epp,Espdutytab esp where e.empid='"
                                + userid
                                + "' and epp.idutyid=esp.idutyid and  upper(esp.szdutycode)='FORCE' and ep.iemployeeid=e.iemployeeid and ep.ipostsid=epp.ipostsid");

                if (epdlist == null || epdlist.size() == 0) {

                    rs.addRow(new String[] { "false", "您不具有强制退票权限，不能授权" });
                    return rs;

                } else {
                    // 判断该用户是否有权在该售票窗口登陆
                    if (employee.getDnum() == null) {
                        employee.setDnum(new Long(1));
                    } else {
                        employee.setDnum(employee.getDnum() + 1);
                    }
                    String lasttime = employee.getLogintime();
                    String lastipaddress = employee.getIpaddress();
                    employee.setLasttime(lasttime);
                    employee.setLastipaddress(lastipaddress);
                    employee.setLasttime(Tools.getDayTimes());
                    employee.setZtimes(new Long(0));
                    timeSharingDao.update(employee);
                    Orderlog log = new Orderlog();
                    log.setOrid(employee.getIemployeeid().toString());
                    log.setIemployeeid(employee.getIemployeeid());
                    log.setStlg("0186");
                    log.setLogtype(new Long(2));
                    log.setLogdatetime(Tools.getDayTimes());
                    log.setNote(employee.getEmpid() + "强制退票授权登录");
                    log.setBrief(employee.getEmpid() + "强制退票授权登录");
                    Long id = timeSharingDao.getMaxPk("logid", "Orderlog");
                    log.setLogid(id + 1);
                    timeSharingDao.save(log);
                    rs.addRow(new String[] { "true",
                            employee.getIemployeeid().toString() });
                    return rs;
                }
            }
        }

    }

    public ResultBean emplogin(Long iscenicid, String userid, String password)
            throws Exception {
    	return sysService.saleClienLogin(iscenicid, userid, password);
    }
    
    public ResultBean getEsbticketstationtabByID(Long id, Long byisuse) {
        return ListToResultBean
                .ToResultBean(timeSharingDao
                        .findparams(
                                "from Esbticketstationtab where iticketstationid=? and byisuse=?",
                                id, byisuse));
    }

    public List getEsbticketstationtabByiscenicid(Long iscenicid, Long byisuse) {
        return timeSharingDao.findparams(
                "from Esbticketstationtab where iscenicid=? and byisuse=?",
                iscenicid, byisuse);
    }
    
    public ResultBean getEsbticketwintabByIP(Long iscenicid, String ip,
                                             Long byisuse) {
        ip = ip.toUpperCase();
        return ListToResultBean
                .ToResultBean(timeSharingDao
                        .findparams(
                                "from Esbticketwintab where iscenicid=? and szipaddress=? and byisuse=?",
                                iscenicid, ip, byisuse));

    }

    /**
     * 取出景区类型的服务商
     */
    @SuppressWarnings("unchecked")
	public ResultBean getscenic() {
        String sql = "select e.iscenicid,e.szscenicname,e.scenictype,e.szphone,e.szcontact,e.szqjaddr,e.sznetaddr,e.printreceipt,e.printinvoice as printinvoice from Esbscenicareatab e,Sysparv5 v where e.scenictype=v.pmcd and v.pmky='PDTP'  and isjd=0 order by iscenicid";
        List<Map> list = new ArrayList<Map>();
        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        for (Map map : list) {
            Long iscenicid = Long.parseLong(map.get("ISCENICID").toString());
            if (iscenicid != null && !iscenicid.equals("")) {
                Hotelprovider hotelpder = (Hotelprovider) this.timeSharingDao.get(
                        Hotelprovider.class, iscenicid);
                if (hotelpder != null) {
                    // 2012-10-19 修改 判断IC卡是否初始化销售
                    map.put("NOTED3", hotelpder.getNoted3());
                    map.put("INOTEGER5", hotelpder.getInoteger5());
                    map.put("INOTEGER1", hotelpder.getInoteger1());
                    map.put("NOTED5", hotelpder.getNoted5());
                    map.put("MEET", hotelpder.getMeet());
                    if (hotelpder.getInoteger6() == null) {
                        hotelpder.setInoteger6(0l);
                    }
                    map.put("INOTEGER6", hotelpder.getInoteger6());
                } else {
                    map.put("NOTED3", "011");
                    map.put("INOTEGER5", 1L);
                    map.put("INOTEGER1", 0L);
                    map.put("INOTEGER6", 0L);
                    map.put("NOTED5", "0");
                    map.put("MEET", "1");
                }

                // 2012-10-19 获取预制票的票号规则组成的票号长度
                String hsql = " from Edmticketnoruletab rule where rule.byisuse=1 and rule.iscenicid="
                        + iscenicid;
                List lst = this.timeSharingDao.find(hsql);
                if (lst != null && lst.size() > 0) {
                    Edmticketnoruletab ticketrule = (Edmticketnoruletab) lst
                            .get(0);
                    map.put("ITICKETNOLEN", ticketrule.getIticketnolen());
                } else {
                    map.put("ITICKETNOLEN", null);
                }
            }

        }

        return MapToResultBean.toResultBean(list);
    }

    public ResultBean saleReport(Long iemployeeid, String rzti, String ldti) {
        List list = new ArrayList();
        String sql = "select sdetail.itickettypeid,et.sztickettypename,sdetail.mactualsaleprice,sum(sdetail.iticketnum) as iticketnum,sum(sdetail.itotalnumber) as iticketplayer,sum(sdetail.ideratenums) as ideratenums,sum(sdetail.meventmoney) as meventmoney,sum(sdetail.mderatemoney) as mderatemoney, "
                + " sum(sdetail.mhandcharge) as mhandcharge from Stssalesvouchertab s,Stssalesvoucherdetailstab sdetail,Edmtickettypetab et "
                + " where s.ipayeer = ? and substr(s.dtmakedate,1,10) >= ? and substr(s.dtmakedate,1,10) <= ? and sdetail.isalesvoucherid = s.isalesvoucherid "
                + " and sdetail.iticketstationid = s.iticketstationid and sdetail.itickettypeid = et.itickettypeid and s.bysalesvouchertype='01' group by sdetail.itickettypeid,et.sztickettypename,sdetail.mactualsaleprice order by itickettypeid ";
        System.out.println(sql);
        try {
            list = this.timeSharingDao.findBySqlToMapnocolsesession(sql,
                    iemployeeid, rzti, ldti);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(list);
    }

    /**
     * 取出所有业务
     */
    public ResultBean getbusiness() {
        return ListToResultBean
                .ToResultBean(timeSharingDao
                        .find("from Edmbusinesstab where  byisuse=1 order by ibusinessid "));
    }

    /**
     * 根据 窗口、售票员、业务ID,游览日期stdt读取价格列表
     */

    public ResultBean getTicketPrice(Long iticketwinid, Long iemployeeid,
                                     Long ibusinessid, String stdt) {
        if (stdt == null) {
            stdt = Tools.getDay();
        }
        Esbticketwintab esbticketwintab = (Esbticketwintab) timeSharingDao.get(
                Esbticketwintab.class, iticketwinid);
        String sql = "select\r\n" + 
        		"		distinct b.iscenicid as iscenicid,\r\n" + 
        		"		a.icrowdkindpricecode as icrowdkindpricecode,\r\n" + 
        		"		a.icrowdkindpriceid as icrowdkindpriceid,\r\n" + 
        		"		a.itickettypeid as itickettypeid,\r\n" + 
        		"		a.ipeoplenumrange as ipeoplenumrange,\r\n" + 
        		"		a.mactualsaleprice as mactualsaleprice,\r\n" + 
        		"		b.sztickettypecode as sztickettypecode,\r\n" + 
        		"		b.sztickettypename as sztickettypename,\r\n" + 
        		"		b.issale as issale,\r\n" + 
        		"		b.iscansale as iscansale,\r\n" + 
        		"		b.iscontrol as iscontrol,\r\n" + 
        		"		b.iscontrolsale as iscontrolsale,\r\n" + 
        		"		b.validityday as validityday,\r\n" + 
        		"		b.byuselimit as byuselimit,\r\n" + 
        		"		b.bymaketicketway as bymaketicketway,\r\n" + 
        		"		b.bycategorytype as bycategorytype,\r\n" + 
        		"		b.int3 as int3,\r\n" + 
        		"		b.note3 as note3,\r\n" + 
        		"		b.note4 as note4,\r\n" + 
//        		"		v55.pmva as strcategory,\r\n" + 
        		"		a.icrowdkindid as icrowdkindid,\r\n" + 
        		"		c.szcrowdkindcode as szcrowdkindcode,\r\n" + 
        		"		c.szcrowdkindname as szcrowdkindname,\r\n" + 
        		"		a.ibusinessid as ibusinessid,\r\n" + 
        		"		d.szbusinesscode as szbusinesscode,\r\n" + 
        		"		d.szbusinessname as szbusinessname,\r\n" + 
//        		"		v5.pmva as strmaketype,\r\n" + 
        		"		b.bymediatype as bymediatype,\r\n" + 
//        		"		v555.pmva as strmediatype,\r\n" + 
        		"		a.note1 as note1 ,\r\n" + 
        		"		a.inote1 as inote1,\r\n" + 
        		"		a.szmemo as szmemo,\r\n" + 
        		"		b.isequence as isequence,\r\n" + 
        		"		c.ticketcolor as ticketcolor\r\n" + 
//        		"		v55.pmvd as pmvd \r\n" + 
        		"    from\r\n" + 
        		"        edmcrowdkindpricetab a  \r\n" + 
        		"    inner join\r\n" + 
        		"        Edpcrowdkindtab c \r\n" + 
        		"            on c.icrowdkindid = a.icrowdkindid \r\n" + 
        		"    inner join\r\n" + 
        		"        Edmbusinesstab d \r\n" + 
        		"            on d.ibusinessid = a.ibusinessid,\r\n" + 
        		"        Ospticketwinlimitstab ow,\r\n" + 
        		"        Ospsaleslimitstab oe,\r\n" + 
/*        		"        Sysparv5 v5,\r\n" + 
        		"        Sysparv5 v55,\r\n" + 
        		"        Sysparv5 v555,\r\n" + */
        		"        edmtickettypetab b,\r\n" + 
        		"        Esbscenicareatab pd \r\n" + 
        		"    where\r\n" + 
        		"        a.ibusinessid=? \r\n" + 
        		"        and a.byisuse=1 \r\n" + 
        		"        and  a.isscene=1 \r\n" + 
        		"        and to_date(?,'YYYY-MM-DD') between to_date(a.startdata,'YYYY-MM-DD') and to_date(a.enddata,'YYYY-MM-DD') \r\n" + 
        		"        and ow.iticketwinid=? \r\n" + 
        		"        and ow.icrowdkindpriceid=a.icrowdkindpriceid \r\n" + 
        		"        and oe.iemployeeid=? \r\n" + 
//        		"        and a.note1=? \r\n" + 
        		"        and oe.icrowdkindpriceid=a.icrowdkindpriceid \r\n" + 
/*        		"        and v5.pmky='CPFS' \r\n" + 
        		"        and v5.pmcd=b.bymaketicketway  \r\n" + 
        		"        and v555.pmky='CKFS' \r\n" + 
        		"        and v555.pmcd=b.bymediatype \r\n" + 
        		"        and v55.pmky='PRTP' \r\n" + 
        		"        and v55.pmcd=b.bycategorytype \r\n" + */
        		"        and a.itickettypeid = b.itickettypeid \r\n" + 
        		"        and b.byisuse=1 \r\n" + 
        		"        and pd.iscenicid=b.iscenicid \r\n" + 
        		"        and pd.byisuse=1 \r\n" + 
        		"        and b.bycategorytype not in (\r\n" + 
        		"            '0004','0100','0101'\r\n" + 
        		"        ) \r\n" + 
        		"    order by\r\n" + 
//        		"        v55.pmvd,\r\n" + 
        		"        b.isequence,\r\n" + 
        		"        a.icrowdkindpricecode";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql, ibusinessid,
                    stdt, iticketwinid, iemployeeid);
        } catch (Exception e) {
            e.printStackTrace();
        }
        List list2 = new ArrayList();
        String isrestrict = "0";
        String restrictname = "";
        // Long iscenicid=new Long(0);
        // Esbscenicareatab esbscenicareatab=new Esbscenicareatab();
        for (Map map : list) {
            String note1 = (String) map.get("NOTE1");
            if (note1.equals("") || note1.equals("null")
                    || note1.equals("NULL")) {
                map.put("NOTE1", map.get("0000"));
            }
            String bycategorytype = (String) map.get("BYCATEGORYTYPE");
            if (esbticketwintab.getBywintype().equals("0003")) {
                // 年票窗口
                if (bycategorytype.equals("0014")) {
                    map.put("PRODUCTS", map.get("ITICKETTYPEID"));
                    if (map.get("ISCONTROL").equals("1")) {
                        isrestrict = "1";
                        restrictname = map.get("ITICKETTYPEID").toString();
                    }
                    // 陈新浩新增 判断IC卡类型
                    Edmticketproduct tp = (Edmticketproduct) timeSharingDao.get(
                            Edmticketproduct.class,
                            new Long(map.get("ITICKETTYPEID").toString()));
                    if (tp != null) {
                        map.put("ICCARDTYPE", tp.getNoted4());
                    } else {
                        map.put("ICCARDTYPE", "0");
                    }
                    // 结束
                    list2.add(map);
                }
            } else {
                if (!bycategorytype.equals("0014")) {
                    if (bycategorytype.equals("0010")) {
                        String sql2 = "select itickettypeid from Edmticketcomposepricetab where icrowdkindpriceid="
                                + map.get("ICROWDKINDPRICEID");
                        List<Map> list1 = new ArrayList();
                        try {
                            list1 = timeSharingDao
                                    .findBySqlToMapnocolsesession(sql2);
                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        String products = "";
                        for (Map map1 : list1) {
                            products = products + map1.get("ITICKETTYPEID")
                                    + ":";
                            Edmtickettypetab et = (Edmtickettypetab) timeSharingDao
                                    .get(Edmtickettypetab.class, new Long(map1
                                            .get("ITICKETTYPEID").toString()));
                            if (et.getIscontrol() == 1) {
                                isrestrict = "1";
                                restrictname = map1.get("ITICKETTYPEID")
                                        .toString();
                            }
                        }
                        products = products.substring(0, products.length() - 1);
                        map.put("PRODUCTS", products);
                    } else {
                        map.put("PRODUCTS", map.get("ITICKETTYPEID"));
                        if (map.get("ISCONTROL").equals("1")) {
                            isrestrict = "1";
                            restrictname = map.get("ITICKETTYPEID").toString();
                        }
                    }
                    // 陈新浩新增 判断IC卡类型
                    Edmticketproduct tp = (Edmticketproduct) timeSharingDao.get(
                            Edmticketproduct.class,
                            new Long(map.get("ITICKETTYPEID").toString()));
                    if (tp != null) {
                        map.put("ICCARDTYPE", tp.getNoted4());
                    } else {
                        map.put("ICCARDTYPE", "0");
                    }

                    // 结束
                    map.put("ISRESTRICT", isrestrict);
                    map.put("RESTRICTNAME", restrictname);
                  //判断是否是分时预约的票
					Object _INT3 = map.get("INT3");
					long int3 = 0;
					if (_INT3 != null) {
						int3 = Long.parseLong(_INT3.toString());
					} else {
						_INT3 = "0";
					}
					map.put("INT3", _INT3);
					if (int3 == 1) {
						// 根据产品编码获取，分时时段列表
						String productCode = map.get("SZTICKETTYPECODE").toString();
						String timeHql = "from TimeSharingTicketTab time where time.productId = '" + productCode + "' and time.dayTime ='"+stdt+"'";
						List find = timeSharingDao.find(timeHql);
						if (find != null && find.size() > 0) {
							map.put("timeList", JSON.toJSONString(find));
						}
					} else {
						map.put("timeList", "");
					}
                    list2.add(map);
                }

            }
        }
        return MapToResultBean.toResultBean(list2);
    }
    /**
     * *根据服务商读取对应的产品 Describe:
     *
     * @see ISaleCenterService#getTicket(Long)
     * @param iscenicid
     * @return
     * @author yuanchengjun Date:2011-10-27
     */
    public ResultBean getTicket(Long iscenicid) {
        String sql = "select e.itickettypeid,e.iscenicid,'' as szscenicname ,e.iticketnoruleid,e.sztickettypecode,e.sztickettypename,e.bycategorytype,e.byusage,e.byuselimit,e.bymaketicketway,e.bymediatype,e.szticketprintcode,e.validityday,e.issale,e.iscansale,e.iscontrol,e.iscontrolsale,e.mcostprice,e.mnominalfee from edmtickettypetab e where e.iscenicid in (select iscenicid from Esbscenicareatab where  isjd = 0) ";
        List<Map> list = new ArrayList();
        // Debug.print("getTicket sql="+sql);
        try {
            list = timeSharingDao.findBySqlToMap(sql);
            // Debug.print("list sql="+list.size());
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        // Debug.print("list rnd sql=");
        return MapToResultBean.toResultBean(list);
    }

    /**
     * *根据服务商读取对应的产品 Describe:
     *
     * @see ISaleCenterService#getTicket(Long)
     * @param iscenicid
     * @return
     * @author yuanchengjun Date:2011-10-27
     */
    public ResultBean getTicket41(Long iscenicid) {
        String sql = "select e.itickettypeid,e.iscenicid,es.szscenicname,e.iticketnoruleid,e.sztickettypecode,e.sztickettypename,e.bycategorytype,e.byusage,e.byuselimit,e.bymaketicketway,e.bymediatype,e.szticketprintcode,e.validityday,e.issale,e.iscansale,e.iscontrol,e.iscontrolsale,e.mcostprice,e.mnominalfee from edmtickettypetab e,esbscenicareatab es where  e.iscenicid=es.iscenicid and  (es.iscenicid=? or es.irootid=?) and es.iscenicid in (select iscenicid from Esbscenicareatab where (( isjd = 0 and  iparentid = "
                + iscenicid + " ) or iscenicid = " + iscenicid + "))";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMap(sql, iscenicid, iscenicid);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return MapToResultBean.toResultBean(list);
    }

    /**
     * 读取出票员信息 Describe:
     *
     * @auth:yuanchengjun
     * @param userid
     * @return return:ResultBean Date:2011-10-27
     */
	public ResultBean getEmployee(String userid) {
		List<Map> list = null;
		ResultBean rs = null;
		try {
			String sql = "select iemployeeid,empid, szemployeename,random from ( "
					+ "select iemployeeid,empid, szemployeename,random,row_number() over(partition by iemployeeid order by iemployeeid,curr_level desc) ename_path_rank "
					+ "from ( select  iemployeeid, empid, szemployeename, szdutycode,rank ,level as curr_level,"
					+ "ltrim(sys_connect_by_path(szdutycode,','),',')  random from("
					+ "select esf.iemployeeid, esf.empid, esf.szemployeename, dt.szdutycode,row_number() over(partition by esf.iemployeeid order by esf.iemployeeid, esf.empid, esf.szemployeename, dt.szdutycode) rank "
					+ " from Esfemployeetab      esf,Esfemployeepoststab esp,Espdutytab dt, Esppostsdutytab  pd where esp.iemployeeid = esf.iemployeeid "
					+ "  and esp.ipostsid = pd.ipostsid and pd.idutyid = dt.idutyid and esf.empid = '"
					+ userid
					+ "' ) connect by iemployeeid = prior iemployeeid and rank-1 = prior rank ) ) where ename_path_rank=1 ";

			list = timeSharingDao.findBySqlToMap(sql);
			rs = MapToResultBean.toResultBean(list);
		} catch (Exception e) {
			LOGGER.info("登录获取用户信息异常"+StringUtil.toString_02(e));
		}
		return rs;
	}

    public List getcancelprint(Stssalesvouchertab ts, Stssalesvouchertab ys) {
        // 读取原售票门票表中的对应的退票的szticketprintno信息
        List list2 = new ArrayList();
        String sql = "select e.szsoldticketid,e.isalesvoucherdetailsid,e.isalesvoucherid,e.iticketstationid,e.itickettypeid,szticketprintno,e.iserialnum,e.icrowdkindid,e.dtstartdate,e.dtenddate,e.iplayerperticket,ed.szcrowdkindname,edt.sztickettypename as sztickettypename,ebs.szbusinessname,e.mactualsaleprice,edt.bymaketicketway,v5.pmva as strmaketype,edt.bymediatype,v51.pmva as strmediatype,e.myzj,e.name1,e.manyouno,e.zjno1,sd.icrowdkindpriceid as icrowdkindpriceid,ep.ipeoplenumrange as ipeoplenumrange,c.corpname as corpname,dy.lname as ornm,su.szinnername as szregionalname from Stssoldtickettab e, Edpcrowdkindtab ed,Edmtickettypetab edt,Edmbusinesstab ebs,stssalesvoucherdetailstab sd,Edmcrowdkindpricetab ep,Custom c,Sysparv5 v51,Sysparv5 v5,Stssalesvouchertab s left outer join custom dy on dy.usid=s.dyusid left outer join Galsourceregiontab su on su.iregionalid=s.iregionalid where e.isalesvoucherid="
                + ys.getId().getIsalesvoucherid()
                + " and e.iticketstationid="
                + ys.getId().getIticketstationid()
                + " and ed.icrowdkindid=e.icrowdkindid and edt.itickettypeid=e.itickettypeid and ebs.ibusinessid=e.ibusinessid and   szticketprintno in (select szstartserial from Stssalesvoucherdetailstab sz where sz.isalesvoucherid="
                + ts.getId().getIsalesvoucherid()
                + " and sz.iticketstationid="
                + ts.getId().getIticketstationid()
                + ") and sd.isalesvoucherdetailsid=e.isalesvoucherdetailsid and sd.isalesvoucherid=e.isalesvoucherid and sd.icrowdkindpriceid=ep.icrowdkindpriceid and e.usid=c.usid and edt.bymaketicketway=v5.pmcd and v5.pmky='CPFS' and edt.bymediatype=v51.pmcd and v51.pmky='CKFS' and e.isalesvoucherid=s.isalesvoucherid and e.iticketstationid=s.iticketstationid order by e.iserialnum";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMap(sql);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        Sysparv5 sv5 = (Sysparv5) timeSharingDao.get(Sysparv5.class,
                new Sysparv5Id("PRCS", "02"));
        String printcs = "0";
        if (sv5 != null) {
            printcs = sv5.getPmva();
        }
        for (Map map : list) {
            Long isalesvoucherdetailsid = new Long(map.get(
                    "ISALESVOUCHERDETAILSID").toString());
            String sql1 = " select sts.iztickettypeid,sts.iztickettypeid,sts.tripid,sts.dtbegindate as dtstartdate,sts.dtenddate as dtenddate,edt.sztickettypename,t.tripname,edt.bycategorytype  from Stssoldticketsubtab sts left outer join trip t on t.tripid=sts.tripid,Edmtickettypetab edt where isalesvoucherid="
                    + map.get("ISALESVOUCHERID").toString()
                    + " and isalesvoucherdetailsid="
                    + map.get("ISALESVOUCHERDETAILSID").toString()
                    + " and iticketstationid="
                    + map.get("ITICKETSTATIONID").toString()
                    + " and szsoldticketid="
                    + map.get("SZSOLDTICKETID").toString()
                    + " and sts.iztickettypeid=edt.itickettypeid and sts.isvalid=1 order by edt.bycategorytype";
            List<Map> list1 = new ArrayList();
            try {
                list1 = timeSharingDao.findBySqlToMap(sql1);
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            String zdail = "";
            String iztickettypeid = "";
            String products = "";
            if (list1 != null && list1.size() > 0) {
                int mm = 0;
                for (Map map1 : list1) {
                    if (!iztickettypeid.equals(map1.get("IZTICKETTYPEID")
                            .toString())) {
                        if (new Long(map1.get("TRIPID").toString()) > 0) {
                            String sql3 = "select  vn.venueidname,vp.szprogramname,vs.szvenueseatsname from seatsaletab s ,venue vn,Venueprogram vp,Venueseats vs where s.isalesvoucherid="
                                    + map.get("ISALESVOUCHERID").toString()
                                    + " and s.iticketstationid="
                                    + map.get("ITICKETSTATIONID").toString()
                                    + "  and s.szsoldticketid="
                                    + map.get("SZSOLDTICKETID").toString()
                                    + " and isalesvoucherdetailsid="
                                    + map.get("ISALESVOUCHERDETAILSID")
                                    .toString()
                                    + " and vn.ivenueid=s.ivenueid and s.iprogramid=vp.iprogramid  and vs.ivenueid=s.ivenueid and vs.ivenueseatsid=s.iseatid and s.isvalid=1 ";
                            List<Map> list3 = new ArrayList();
                            Map map3 = null;
                            try {

                                list3 = timeSharingDao.findBySqlToMap(sql3);
                                if (list3 != null && list3.size() > 0) {
                                    map3 = (Map) list3.get(0);
                                    zdail = zdail
                                            + map1.get("SZTICKETTYPENAME")
                                            .toString()
                                            + "&"
                                            + map1.get("TRIPID").toString()
                                            + "&"
                                            + map1.get("TRIPNAME").toString()
                                            + "&"
                                            + map1.get("DTSTARTDATE")
                                            .toString()
                                            + "&"
                                            + map1.get("DTENDDATE").toString()
                                            + "&"
                                            + map3.get("SZPROGRAMNAME")
                                            .toString()
                                            + "&"
                                            + map3.get("VENUEIDNAME")
                                            .toString()
                                            + "&"
                                            + map3.get("SZVENUESEATSNAME")
                                            .toString() + "@";
                                } else {
                                    zdail = zdail
                                            + map1.get("SZTICKETTYPENAME")
                                            .toString()
                                            + "&"
                                            + map1.get("TRIPID").toString()
                                            + "&"
                                            + map1.get("TRIPNAME").toString()
                                            + "&"
                                            + map1.get("DTSTARTDATE")
                                            .toString() + "&"
                                            + map1.get("DTENDDATE").toString()
                                            + "@";
                                }

                            } catch (Exception e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                            }

                        } else {
                            zdail = zdail
                                    + map1.get("SZTICKETTYPENAME").toString()
                                    + "&" + "0" + "&" + "" + "&"
                                    + map1.get("DTSTARTDATE").toString() + "&"
                                    + map1.get("DTENDDATE").toString() + "@";
                        }
                        iztickettypeid = map1.get("IZTICKETTYPEID").toString();
                        products = products
                                + map1.get("IZTICKETTYPEID").toString() + ":";
                    }
                }
                if (!zdail.equals("")) {
                    zdail = zdail.substring(0, zdail.length() - 1);
                }
                if (!products.equals("")) {
                    products = products.substring(0, products.length() - 1);
                }
                map.put("PRODUCTS", products);
                map.put("ZDAIL", zdail);

                if (printcs.equals("1")) {
                    Ticketprintlist t = new Ticketprintlist();

                    t.setIemployeeid(ys.getIhandler());

                    t.setPrinttype("02");

                    t.setSzsalesvoucherno(ys.getSzsalesvoucherno());

                    t.setSzticketprintno(map.get("SZTICKETPRINTNO").toString());

                    t.setPrinttime(Tools.getNowString());

                    t.setIsok(new Long(0));
                    try {

                        Long printid = timeSharingDao.getSequenceId("PRINT_ID");

                        t.setPrintid(printid);

                        timeSharingDao.save(t);

                    } catch (Exception e1) {
                        // TODO Auto-generated catch block
                        e1.printStackTrace();
                    }
                }
                map.put("PRINTTYPE", "02");// 表示退票打印
                list2.add(map);
            }

        }

        return list2;
    }

    /**
     * *根据业务读取对应的用户 Describe:
     *
     * @see ISaleCenterService#getcustom(Long)
     * @param ibusinessid
     * @return
     * @author yuanchengjun Date:2011-10-27
     */
    public Custom getcustom(String usid) {
        Custom c = (Custom)this.timeSharingDao.get(Custom.class, usid);
        return c;
    }
    public ResultBean getcustom(Long ibusinessid) {
        List<Map> list = new ArrayList();
        if (ibusinessid.intValue() != 1) {
            String type = "";
//            Sysparv5 v5 = (Sysparv5) this.timeSharingDao.get(Sysparv5.class, new Sysparv5Id("QYFS", "0001"));//旅行社是否启用分社 0：不启用；1：启用
//            Sysparv5 sys = (Sysparv5) this.timeSharingDao.get(Sysparv5.class, new Sysparv5Id("QYFS", "0002"));//接待是否其他分社 0：不启用；1：启用
            Sysparv5 v5 = sysService.findOne("QYFS", "0001");
            Sysparv5 sys = sysService.findOne("QYFS", "0001");
            sysService.getSysparamsByPmkyAndPmcds("QYFS", "0002");
            if(v5 != null && v5.getPmva() != null && "0".equals(v5.getPmva()) && ibusinessid == 2){
                type = "0001";
            }
            if(sys != null && sys.getPmva() != null && "0".equals(sys.getPmva()) && ibusinessid == 3){
                type = "0001";
            }
            if("0001".equals(type)){
                try {
                    list = timeSharingDao
                            .findBySqlToMap("select usid,corpname||'('||lname||')' as corpname,bname,note2 from custom where ttlb='01' and  ibusinessid="
                                    + ibusinessid
                                    + " and status='01' and ustp='01' order by bname");
                    for (Map map : list) {

                        String pnotes = "";
                        String usid = map.get("USID").toString();
                        Custom c = (Custom) timeSharingDao.get(Custom.class, usid);
                        List list1 = timeSharingDao.find("from Jgfz where usid='"
                                + c.getUsid() + "'");
                        for (int i = 0; i < list1.size(); i++) {
                            Jgfz jg = (Jgfz) list1.get(i);
                            pnotes = pnotes + jg.getIscenicid() + "_"
                                    + jg.getPmcd() + "&";

                        }
                        if (!pnotes.equals("")) {
                            pnotes = pnotes.substring(0, pnotes.length() - 1);
                        }
                        map.put("PNOTES", pnotes);
                    }
                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }else{
                try {
                    list = timeSharingDao
                            .findBySqlToMap("select usid,corpname||'('||lname||')' as corpname,bname,note2 from custom where ttlb='01' and  ibusinessid="
                                    + ibusinessid
                                    + " and status='01' and ustp!='01' order by bname");
                    for (Map map : list) {

                        String pnotes = "";
                        String usid = map.get("USID").toString();
                        Custom c = (Custom) timeSharingDao.get(Custom.class, usid);
                        Custom c1 = (Custom) timeSharingDao.get(Custom.class,
                                c.getSusid());
                        if (c1.getUstp().equals("01")) {
                            List list1 = timeSharingDao.find("from Jgfz where usid='"
                                    + c1.getUsid() + "'");
                            for (int i = 0; i < list1.size(); i++) {
                                Jgfz jg = (Jgfz) list1.get(i);
                                pnotes = pnotes + jg.getIscenicid() + "_"
                                        + jg.getPmcd() + "&";

                            }
                        } else {
                            List list1 = timeSharingDao.find("from Jgfz where usid='"
                                    + c1.getSusid() + "'");
                            for (int i = 0; i < list1.size(); i++) {
                                Jgfz jg = (Jgfz) list1.get(i);
                                pnotes = pnotes + jg.getIscenicid() + "_"
                                        + jg.getPmcd() + "&";

                            }

                        }
                        if (!pnotes.equals("")) {
                            pnotes = pnotes.substring(0, pnotes.length() - 1);
                        }
                        map.put("PNOTES", pnotes);
                    }
                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }

            return MapToResultBean.toResultBean(list);
        } else {
            try {
                list = timeSharingDao
                        .findBySqlToMap("select usid,corpname,note2 from custom where  ibusinessid="
                                + ibusinessid + " and status='01'");
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            return MapToResultBean.toResultBean(list);
        }
    }

    /**
     * 读取员工卡证信息* Describe:
     *
     * @see ISaleCenterService#getemployeecard()
     * @return
     * @author yuanchengjun Date:2012-3-31
     */
    public ResultBean getemployeecard(Long iscenicid) {
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao
                    .findBySqlToMap("select e.szemployeename,op.icardno,op.iversion,case iagentno when '1' then '放行卡'　else ''　end as strfx,case op.byconsumetype when '1' then '入园卡'　else '' end as strly, case iserialnum when '1' then '落杠卡'　else '' end as strlg,case op.iversion when 1 then '身份证'  when 2 then 'IC卡'  when 3 then '条码'　else ''　end as carted from Opcemployeecardtab op,Esfemployeetab e where e.iemployeeid=op.iemployeeid and op.byisdaoyou=0 and e.icompanyinfoid  in (select g.icompanyinfoid from Galcompanyinfotab g where g.companytype='01' or (g.companytype='02' and g.icompanyinfoid in (select icompanyinfoid from Companyscenic c where c.iscenicid="
                            + iscenicid + " )))");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(list);
    }

    /**
     * *根据产品读取该产品和游览日期的趟次 Describe:
     *
     * @see ISaleCenterService#getTrip(Long)
     * @param itickettypeid
     * @return
     * @author yuanchengjun Date:2011-10-27
     */
    public ResultBean getTrip(Long itickettypeid, String stdt) {

        String sql = "select p.startdata,p.enddata,p.iscenicid,es.szscenicname,p.itickettypeid,e.sztickettypename,p.tripid,t.tripcode,t.tripname,p.saletype,p.managetype,v.pmva as strsaletype,v5.pmva as strmangetype, p.starttime,p.endtime,p.iadvanceminute,p.ilagminute,p.ivenueareaid,vi.ivenueareaname from prdtripvenuemanage p,trip t,edmtickettypetab e,esbscenicareatab es,Sysparv5 v,sysparv5 v5,Venuearea vi where  p.itickettypeid=? and p.enddata>=?  and t.tripid=p.tripid and e.itickettypeid=p.itickettypeid and es.iscenicid=p.iscenicid and v.pmky='XSLB' and v.pmcd=p.saletype and v5.pmky='VNTP' and v5.pmcd=p.managetype and vi.ivenueareaid=p.ivenueareaid order by p.startdata,p.itickettypeid,t.tripcode";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql, itickettypeid,
                    stdt, stdt);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(list);
    }

    /**
     * *根据服务商读取游览日期的所有趟次 Describe:
     *
     * @see ISaleCenterService#getTrip(Long)
     * @param itickettypeid
     * @return
     * @author yuanchengjun Date:2011-10-27
     */
    public ResultBean getAllTrip(Long iscenicid, String stdt) {

        String sql = "select p.startdata,p.enddata,p.iscenicid,es.szscenicname,p.itickettypeid,e.sztickettypename,p.tripid,t.tripcode,t.tripname,p.saletype,p.managetype,v.pmva as strsaletype,v5.pmva as strmangetype, p.starttime,p.endtime,p.ivenueareaid,vi.ivenueareaname,v.ilagminute,v.iadvanceminute from prdtripvenuemanage p,trip t,edmtickettypetab e,esbscenicareatab es,Sysparv5 v,sysparv5 v5,Venuearea vi where    p.enddata>=? and p.startdata<=? and ( es.iscenicid=? or es.irootid=?) and t.tripid=p.tripid and e.itickettypeid=p.itickettypeid and es.iscenicid=p.iscenicid and v.pmky='XSLB' and v.pmcd=p.saletype and v5.pmky='VNTP' and v5.pmcd=p.managetype and vi.ivenueareaid=p.ivenueareaid order by p.startdata,p.itickettypeid,t.tripcode";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql, stdt, stdt,
                    iscenicid, iscenicid);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(list);
    }

    /**
     * *根据服务商和日期读取该服务商产品的趟次数量产品控制 Describe: p.byisuse=1 数量控制已经启用
     *
     * @see ISaleCenterService#getTripcontrol(Long,
     *      String)
     * @param iscenicid
     * @param stdt
     * @return
     * @author yuanchengjun Date:2011-10-27
     */
    public ResultBean getTripcontrol(Long iscenicid, String stdt) {

        if (stdt == null) {
            stdt = Tools.getDay();
        }

        String sql = "select p.iscenicid,es.szscenicname,p.itickettypeid,e.sztickettypename,p.tripid,t.tripcode,t.tripname,p.controltype,p.stdata,p.salablenumber,p.soldnumber,v.pmva as strcontroltype,pt.starttime,pt.endtime,p.ivenueareaid,vi.ivenueareaname,pt.ilagminute,pt.iadvanceminute,p.bystate,p.byisuse,p.byisduty from productcontrol p,trip t,edmtickettypetab e,esbscenicareatab es,Sysparv5 v,prdtripvenuemanage pt,Venuearea vi where   p.controltype='03'  and p.stdata=?  and ( es.iscenicid=? or es.irootid=? ) and ( p.byisduty=1 or p.byisduty=0 ) and p.byisuse=1 and t.tripid=p.tripid and e.itickettypeid=p.itickettypeid and es.iscenicid=p.iscenicid and v.pmky='SLKZ' and v.pmcd=p.controltype and pt.enddata>=p.stdata and pt.startdata<=p.stdata and pt.tripid=p.tripid and p.itickettypeid=pt.itickettypeid and vi.ivenueareaid=p.ivenueareaid order by p.itickettypeid,p.stdata,t.tripcode";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql, stdt,
                    iscenicid, iscenicid);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(list);
    }

    /**
     * 产品拆分后,变为基础产品后 受限产品的产品,趟次和日期读取该产品趟次数量控制和日控制数量:
     *
     * @see ISaleCenterService#getProductcontrol(Long,Long,
     *      String)
     * @param iscenicid
     * @param stdt
     * @return byisduty=1 现场销售数量控制 0 现场和网上销售同时数量控制
     * @author yuanchengjun Date:2011-10-27 返回为空时,判断受限产品数量iscontrolsal=0时将不能销售
     *         bystate=1 趟次正常使用 0 准备停排 -1 确认停排
     */
    public ResultBean getProductcontrol(Long itickettypeid, Long tripid,
                                        String stdt) {

        String sql = "select p.iscenicid,es.szscenicname,p.itickettypeid,e.sztickettypename,p.tripid,t.tripcode,t.tripname,p.controltype,p.stdata,p.salablenumber,p.soldnumber,v.pmva as strcontroltype,p.bystate,p.byisuse,p.byisduty,p.isxianjin from productcontrol p left outer join trip t on t.tripid=p.tripid ,edmtickettypetab e,esbscenicareatab es,Sysparv5 v where  p.itickettypeid=?  and p.stdata=? and  p.tripid=? and p.controltype='03' and e.itickettypeid=p.itickettypeid and es.iscenicid=p.iscenicid and v.pmky='SLKZ' and v.pmcd=p.controltype and (p.byisduty=1 or p.byisduty=0 )  order by p.itickettypeid,p.stdata,t.tripcode";
        List<Map> list = new ArrayList();

        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql, itickettypeid,
                    stdt, tripid);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(list);
    }

    /**
     * 根据售出产品的产品和日期读取该产品日数量控制 Describe:
     *
     * @see ISaleCenterService#getProductdatacontrol(Long,String)
     * @param iscenicid
     * @param stdt
     * @return byisduty=1 现场销售数量控制 0 现场和网上销售同时数量控制
     * @author yuanchengjun Date:2011-10-27 在产品拆分前,返回为空的时候不需要iscontrolsal
     *         在产品拆分后,返回为空的时候不需要iscontrolsal=0时将不能销售
     */
    public ResultBean getProductdatacontrol(Long itickettypeid, String stdt) {

        String sql = "select p.iscenicid,es.szscenicname,p.itickettypeid,e.sztickettypename,p.controltype,p.stdata,p.salablenumber,p.soldnumber,v.pmva as strcontroltype,p.bystate,p.byisuse,p.byisduty,t.tripcode,t.tripname from productcontrol p left outer join trip t on t.tripid=p.tripid,edmtickettypetab e,esbscenicareatab es,Sysparv5 v where  p.itickettypeid=?  and p.stdata=?  and p.controltype='03' and e.itickettypeid=p.itickettypeid and es.iscenicid=p.iscenicid and v.pmky='SLKZ' and v.pmcd=p.controltype and (p.byisduty=1 or p.byisduty=0 )  order by p.itickettypeid,p.stdata";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql, itickettypeid,
                    stdt);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return MapToResultBean.toResultBean(list);
    }

    /**
     * *读取所有custom用户 Describe:
     *
     * @see ISaleCenterService#getcustom(Long)
     * @param ibusinessid
     * @return
     * @author yuanchengjun Date:2011-10-27
     */
    public ResultBean getAllcustom() {
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao
                    .findBySqlToMapnocolsesession("select usid,corpname,ibusinessid,note2 from custom where status='01'");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return MapToResultBean.toResultBean(list);
    }

    public ResultBean updatecontrol(List productcontrollist) throws Exception {

        ResultBean rs = new ResultBean();
        try {
            rs.setColumnCount(2);
            rs.setColumnNames(new String[] { "returnstats", "message" });
            String returnstats = "";
            String message = "";
            for (int i = 0; i < productcontrollist.size(); i++) {
                Productcontrol p = (Productcontrol) productcontrollist.get(i);
                String hsql = "";
                hsql = " from Productcontrol where itickettypeid="
                        + p.getItickettypeid() + " and tripid=" + p.getTripid()
                        + " and stdata='" + p.getStdata()
                        + "' and controltype='03'";
                List plist = timeSharingDao.find(hsql);
                if (plist == null || plist.size() == 0) {
                    // 数量按趟次控制时
                    Edmtickettypetab e = (Edmtickettypetab) timeSharingDao.get(
                            Edmtickettypetab.class, p.getItickettypeid());
                    returnstats = "false";
                    Trip t = (Trip) timeSharingDao.get(Trip.class, p.getTripid());
                    throw new RuntimeException(e.getSztickettypename()
                            + t.getTripname() + "无销售数据");
                } else {
                    Productcontrol p1 = (Productcontrol) plist.get(0);

                    if (p1.getBystate() != 1) {
                        returnstats = "false";
                        Edmtickettypetab e = (Edmtickettypetab) timeSharingDao.get(
                                Edmtickettypetab.class, p.getItickettypeid());
                        Trip t = (Trip) timeSharingDao.get(Trip.class,
                                p.getTripid());
                        if (p1.getBystate() == 0) {
                            message = e.getSztickettypename() + t.getTripname()
                                    + "准备停排";
                            throw new RuntimeException(e.getSztickettypename()
                                    + t.getTripname() + "准备停排");

                        } else {
                            throw new RuntimeException(e.getSztickettypename()
                                    + t.getTripname() + "准备停排");

                        }
                    } else {
                        if (p1.getSalablenumber() - p1.getSoldnumber() >= p
                                .getSoldnumber()) {
                            p1.setSoldnumber(p1.getSoldnumber()
                                    + p.getSoldnumber());
                            timeSharingDao.update(p1);
                        } else {
                            returnstats = "false";
                            Edmtickettypetab e = (Edmtickettypetab) timeSharingDao
                                    .get(Edmtickettypetab.class,
                                            p.getItickettypeid());
                            Trip t = (Trip) timeSharingDao.get(Trip.class,
                                    p.getTripid());
                            throw new RuntimeException("可售量不能满足要求");
                        }
                    }
                }
            }
            rs.addRow(new String[] { "true", "" });
            return rs;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            throw new RuntimeException("可售量不能满足要求");
        }
    }

    public ResultBean savetorder(T_order t_order, List listorder,
                                 List listzorder, Long iemployeeid, Long iticketwinid, Long maxid,String url)
            throws Exception {
    	if(url==null || url.length()<1){
    		url=WebContant.GetKeyValue("CenterUrl");
    	}
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        Stssalesvouchertab s = new Stssalesvouchertab();
        Esbscenicareatab scenic = (Esbscenicareatab) timeSharingDao.get(
                Esbscenicareatab.class, new Long(t_order.getIscenicid()));
        s.setIscenicid(new Long(t_order.getIscenicid()));
        s.setIticketwinid(iticketwinid);
        s.setIbusinessid(new Long(t_order.getIbusinessid()));
        s.setIhandler(iemployeeid);
        s.setIpayeer(iemployeeid);
        s.setImaker(iemployeeid);
        s.setIauditor(iemployeeid);
        s.setIaccountreceivable(new Double(t_order.getZfmont()));// 实收
        s.setIacceptmoney(new Double(t_order.getZfmont()));// 应收
        s.setIgivechange(new Double(0));// 找零
        s.setSzsalesvoucherno(t_order.getOrid());
        String today = Tools.getDays();
        String daytime = Tools.getDayTimes();
        s.setIyear(new Long(today.substring(0, 4)));
        s.setImonth(new Long(today.substring(5, 7)));
        s.setIday(new Long(today.substring(8, 10)));
        s.setDtmakedate(daytime);
        s.setDtauditdate(t_order.getDtstartdate());
        s.setUsid(t_order.getUsid());
        s.setBisintegral(new Long(0));
        s.setByprintinvoice(new Long(0));
        s.setBysplitway(new Long(2));
        s.setBisreturn(new Long(1));
        s.setBysalesvouchertype("01");
        s.setBypostrecord(new Long(0));
        s.setBysalesvoucherstate(new Long(1));
        s.setBispay(new Long(0));
        s.setBispayee(new Long(0));
        s.setSztravelbillno(t_order.getSztravelbillno());
        s.setIregionalid(new Long(t_order.getIregionalid()));
        if (t_order.getDyusid() == null || t_order.getDyusid().equals("")) {
            s.setDyusid("daoyou");
        } else {
            s.setDyusid(t_order.getDyusid());
        }
        s.setTdlx(t_order.getTdlx());
        Esbticketwintab e = (Esbticketwintab) timeSharingDao.get(
                Esbticketwintab.class, s.getIticketwinid());
        StssalesvouchertabId id = new StssalesvouchertabId();
        id.setIticketstationid(e.getIticketstationid());
        s.setId(id);

        s.getId().setIsalesvoucherid(maxid);
        // timeSharingDao.save(s);
        Stssalessettlementtab st = new Stssalessettlementtab();
        StssalessettlementtabId sid = new StssalessettlementtabId();
        sid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
        sid.setIticketstationid(s.getId().getIticketstationid());
        sid.setIsalessettlementid(new Long(1));
        st.setId(sid);
        st.setSettlementdata(today);
        st.setSettlementtime(daytime.substring(11));
        st.setDtmakedate(daytime);
        if (t_order.getDdzt().equals("02")) {
            st.setIsettlementid("01");
        } else {
            st.setIsettlementid("00");
        }
        st.setMsettlementmoney(new Double(t_order.getZfmont()));
        st.setIversion(new Long(1));
        Esbticketstationtab esbticketstation = (Esbticketstationtab) timeSharingDao
                .get(Esbticketstationtab.class, e.getIticketstationid());

        // timeSharingDao.save(st);
        List detaillist = new ArrayList();
        List cdetaillist = new ArrayList();
        Long szsoldticketid = new Long(1);
        for (int i = 0; i < listorder.size(); i++) {
            T_orderlist tlist = (T_orderlist) listorder.get(i);
            Stssalesvoucherdetailstab sd = new Stssalesvoucherdetailstab();
            StssalesvoucherdetailstabId sdid = new StssalesvoucherdetailstabId();
            sdid.setIsalesvoucherdetailsid(new Long(tlist.getOrderlistid()));
            sdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
            sdid.setIticketstationid(s.getId().getIticketstationid());
            sd.setId(sdid);
            sd.setIticketwinid(s.getIticketwinid());
            sd.setIcrowdkindpriceid(new Long(tlist.getIcrowdkindpriceid()));
            sd.setItickettypeid(new Long(tlist.getItickettypeid()));
            sd.setIplayerperticket(new Long(1));// 人/张
            sd.setIticketnum(new Long(tlist.getNumb()));// 张数
            sd.setIticketplayer(new Long(tlist.getNumb()));// 人次
            sd.setDtstartdate(tlist.getDtstartdate());
            sd.setDtenddate(tlist.getDtenddate());
            sd.setIstartid(new Long(0));
            sd.setIendid(new Long(0));
            sd.setSzstartserial("0");
            sd.setSzendserial("0");
            sd.setIoffersschemeid(new Long(0));
            sd.setIamount(new Long(tlist.getNumb()));
            sd.setIpresentnums(new Long(0));
            sd.setIderatenums(new Long(0));
            sd.setIfactnum(new Long(0));
            sd.setIuseablenessnum(new Long(tlist.getNumb()));// 使用数量
            sd.setMactualsaleprice(new Double(tlist.getPric()));// 实际售价
            sd.setMeventmoney(new Double(tlist.getAmnt()));// 实际发生金额
            sd.setMderatemoney(new Double(0));// 减免金额
            sd.setMpresentmoney(new Double(0));// 赠送金额
            sd.setMnominalfee(new Double(0));// 工本费
            sd.setMdeposit(new Double(0));
            sd.setMhandcharge(new Double(0));
            sd.setByconsumetype("00");
            sd.setIconsumenum(new Double(0));
            sd.setMtotalamount(new Double(tlist.getAmnt()));
            sd.setItotalnumber(new Long(tlist.getNumb()));
            sd.setItotalminutes(new Long(0));
            sd.setByisout(new Long(0));
            sd.setDtmakedate(Tools.getDayTimes());
            sd.setIversion(new Long(0));
            detaillist.add(sd);
            // timeSharingDao.save(sd);
            Edmtickettypetab eticket = (Edmtickettypetab) timeSharingDao.get(
                    Edmtickettypetab.class, new Long(tlist.getItickettypeid()));
            // 添加售出门票表

            for (int j = 1; j <= sd.getIticketnum().intValue(); j++) {
                Stssoldtickettab stsv = new Stssoldtickettab();
                StssoldtickettabId stsvid = new StssoldtickettabId();
                stsvid.setIsalesvoucherid(sd.getId().getIsalesvoucherid());
                stsvid.setIticketstationid(sd.getId().getIticketstationid());
                stsvid.setIsalesvoucherdetailsid(sd.getId()
                        .getIsalesvoucherdetailsid());
                stsvid.setSzsoldticketid(szsoldticketid);
                szsoldticketid = szsoldticketid + 1;
                stsv.setId(stsvid);
                stsv.setIscenicid(s.getIscenicid());
                stsv.setIcrowdkindid(new Long(tlist.getIcrowdkindid()));
                stsv.setItickettypeid(sd.getItickettypeid());
                stsv.setUsid(s.getUsid());
                stsv.setIbusinessid(s.getIbusinessid());
                stsv.setDyusid(s.getDyusid());
                stsv.setIplayerperticket(sd.getIplayerperticket());// 人次数
                stsv.setDtstartdate(sd.getDtstartdate());
                stsv.setDtenddate(sd.getDtenddate());
                stsv.setMhandcharge(new Double(0));
                stsv.setDtmakedate(daytime);
                stsv.setByvalidity("00");

                List<Map> iserialnumlist = new ArrayList();

                iserialnumlist = timeSharingDao
                        .findBySqlToMapnocolsesession("select ticketid_sequence.nextval  from dual");

                Long iserialnum = new Long(
                        (((Map) iserialnumlist.get(0)).get("NEXTVAL"))
                                .toString());
                stsv.setIserialnum(iserialnum);
                String newmaxorno = Tools.ConvertTo36Text(iserialnum, 0);
                StringBuffer printno = new StringBuffer();
                printno.append(esbticketstation.getSzstationcode());
                printno.append(scenic.getSzsceniccode());
                printno.append(eticket.getSztickettypecode());
                if (newmaxorno.length() < 6) {
                    for (int b = 0; b < 6 - newmaxorno.length(); b++) {
                        printno.append("0");
                    }
                }
                printno.append(newmaxorno);
                String szprintno = Tools.ticketMakeMd5(printno.toString());
                stsv.setSzticketprintno(szprintno);

                stsv.setMremainmoney(new Double(0));
                stsv.setMpresentmoney(new Double(0));
                stsv.setMactualsaleprice(sd.getMactualsaleprice());
                stsv.setIpresentnum(new Long(0));
                stsv.setIremainnum(new Long(1));// 剩余数量
                stsv.setMnominalfee(new Double(0));
                stsv.setMdeposit(new Double(0));
                stsv.setByticketpurpose("00");
                stsv.setBisrefundbalance(new Long(1));
                stsv.setByactivation("02");
                cdetaillist.add(stsv);

            }
        }

        szsoldticketid = new Long(0);
        List zdetaillist = new ArrayList();
        List cdzetaillist = new ArrayList();
        int n = 1;
        long orderlistid = 0;
        long onumb = 0;
        for (int i = 0; i < listzorder.size(); i++) {

            T_zorderlist zlist = (T_zorderlist) listzorder.get(i);
            Edmtickettypetab edticket = (Edmtickettypetab) timeSharingDao.get(
                    Edmtickettypetab.class, new Long(zlist.getItickettypeid()));

            Stscomticketsalesdetailstab zstd = new Stscomticketsalesdetailstab();
            StscomticketsalesdetailstabId zstdid = new StscomticketsalesdetailstabId();
            zstdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
            zstdid.setIticketstationid(s.getId().getIticketstationid());
            zstdid.setIsalesvoucherdetailsid(new Long(zlist.getOrderlistid()));
            zstdid.setIcomticketsalesdetailsid(new Long(zlist.getZorderlistid()));
            zstd.setIcrowdkindpriceid(new Long(zlist.getIcrowdkindpriceid()));
            zstd.setItickettypeid(new Long(zlist.getItickettypeid()));
            zstd.setIztickettypeid(new Long(zlist.getIztickettypeid()));
            zstd.setTripid(new Long(zlist.getTripid()));
            zstd.setMhandcharge(new Double(0));
            zstd.setDtmakedate(daytime);

            zstd.setIvenueareaid(new Long(0));
            zstd.setIvenueid(new Long(0));
            zstd.setIvenueseatsid(new Long(0));
            if (zlist.getDtstartdate().length() > 10) {

                zstd.setDtstartdate(zlist.getDtstartdate());
                zstd.setDtenddate(zlist.getDtenddate());
            } else {
                zstd.setDtstartdate(zlist.getDtstartdate() + "00:00:00");
                zstd.setDtenddate(zlist.getDtenddate() + "23:59:59");
            }
            if (WebContant.GetKeyValue("gqcp").equals("0")) {
                if (Tools.getDayTimes().compareTo(zstd.getDtenddate()) > 0) {
                    if (zstd.getTripid() > 0) {
                        Trip trip = (Trip) timeSharingDao.get(Trip.class,
                                zstd.getTripid());
                        rs.addRow(new String[] {
                                "false",
                                "产品" + edticket.getSztickettypename() + "的竹筏的"
                                        + trip.getTripname() + "已结束" });

                    } else {
                        rs.addRow(new String[] { "false",
                                "产品号" + edticket.getSztickettypename() + "已过期" });
                    }
                    return rs;
                }
            }
            zstd.setIversion(new Long(0));
            zstd.setIsplitamount(new Long(zlist.getZnumb()));
            zstd.setMsplitprice(new Double(zlist.getZpric()));
            zstd.setMsplitmoney(new Double(zlist.getZamnt()));
            zstd.setId(zstdid);
            zdetaillist.add(zstd);

            if (orderlistid == 0) {
                orderlistid = new Long(zlist.getOrderlistid());
                onumb = Long.parseLong(zlist.getZnumb());
            } else {
                if (orderlistid != new Long(zlist.getOrderlistid()).longValue()) {
                    szsoldticketid = szsoldticketid + onumb;
                    onumb = Long.parseLong(zlist.getZnumb());
                    orderlistid = new Long(zlist.getOrderlistid());
                }
            }

            List opwwlist = timeSharingDao
                    .find(" from Opwwicketsettab where itickettypeid="
                            + zlist.getItickettypeid() + " and izticktypeid="
                            + zlist.getIztickettypeid());
            // System.out.println("产品" + edticket.getSztickettypename() +
            // "没有检票园门，不能出票");
            if (opwwlist.size() == 0) {
                rs.addRow(new String[] { "false",
                        "产品" + edticket.getSztickettypename() + "没有检票园门，不能出票" });
                return rs;
            }
            for (int k = 0; k < opwwlist.size(); k++) {

                Opwwicketsettab opww = (Opwwicketsettab) opwwlist.get(k);
                for (int m = 1; m <= new Long(zlist.getZnumb()); m++) {
                    Stssoldticketsubtab stss = new Stssoldticketsubtab();
                    StssoldticketsubtabId stssid = new StssoldticketsubtabId();
                    stssid.setIticketstationid(s.getId().getIticketstationid());
                    stssid.setSzsoldticketid(szsoldticketid + m);
                    stssid.setSzsoldticketsubid(new Long(n));
                    n = n + 1;
                    stssid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
                    stssid.setIsalesvoucherdetailsid(new Long(zlist
                            .getOrderlistid()));
                    stss.setId(stssid);
                    stss.setIgardengateid(opww.getIgardengateid());
                    stss.setIscenicid(s.getIscenicid());
                    stss.setItickettypeid(new Long(zlist.getItickettypeid()));
                    stss.setIztickettypeid(new Long(zlist.getIztickettypeid()));
                    stss.setBychecktype(new Long(0));
                    stss.setByconsumemode(opww.getByconsumemode());
                    stss.setIpasstimes(opww.getIlimittotaltimes());
                    stss.setIpassedtimes(new Long(0));
                    stss.setMsingletimes(opww.getMsingletimes());
                    stss.setMlimitconsume(new Double(0));
                    stss.setMsingleconsume(new Double(0));
                    stss.setMconsumed(new Double(0));
                    stss.setByisout(new Long(1));
                    stss.setIsvalid(new Long(1));
                    stss.setDtmakedate(daytime);
                    stss.setBylastcheckdir(new Long(0));
                    stss.setIcrowdkindid(new Long(zlist.getIcrowdkindid()));
                    if (Long.parseLong(zlist.getTripid()) > 0) {
                        if (opww.getIlimittotaltimes() == 1) {
                            stss.setTripid(new Long(zlist.getTripid()));
                            if (zlist.getDtstartdate().length() > 10) {
                                stss.setDtbegindate(zlist.getDtstartdate());
                                stss.setDtenddate(zlist.getDtenddate());
                            }
                        } else {
                            stss.setTripid(new Long(0));
                            stss.setDtbegindate(zlist.getDtstartdate());
                            stss.setDtenddate(zlist.getDtenddate());
                        }
                    } else {
                        stss.setTripid(new Long(0));
                        if (zlist.getDtstartdate().length() > 10) {
                            // stss.setDtbegindate(zlist.getDtstartdate());
                            // stss.setDtenddate(zlist.getDtenddate());
                            stss.setDtbegindate(zlist.getDtstartdate());
                            stss.setDtenddate(zlist.getDtenddate());

                        } else {
                            stss.setDtbegindate(zlist.getDtstartdate()
                                    + "00:00:00");
                            stss.setDtenddate(zlist.getDtenddate() + "23:59:59");
                        }
                    }
                    cdzetaillist.add(stss);
                    // timeSharingDao.save(stss);
                }
            }
        }
        try {/*
            javax.xml.rpc.Service service = null;
            java.net.URL endpointURL = new java.net.URL("http://"
                    + url
                    + "/services/centersaleService?wsdl");
            CentersaleServiceSoapBindingStub ssl = new CentersaleServiceSoapBindingStub(
                    endpointURL, service);
            ssl.setMaintainSession(true);

            com.ectrip.ticket.centersale.client.ResultBean cano = ssl.updateT_order(
                    t_order.getOrid(), new Long(t_order.getIscenicid()),
                    iemployeeid, new Double(t_order.getZfmont()));
            if (cano.getResult(0, 0).equals("false")) {
                rs.addRow(new String[] { "false", cano.getResult(0, 0) });
                return rs;
            }
        */
        } catch (Exception e2) {
            throw new RuntimeException("中心服务器连接不成功，跟新订单状态失败");
        }
        try {
            timeSharingDao.save(s);
            timeSharingDao.save(st);
            for (int i = 0; i < detaillist.size(); i++) {
                Stssalesvoucherdetailstab sd = (Stssalesvoucherdetailstab) detaillist
                        .get(i);
                timeSharingDao.save(sd);
            }
            Sysparv5 sv5 = (Sysparv5) timeSharingDao.get(Sysparv5.class,
                    new Sysparv5Id("PRCS", "01"));
            String printcs = "0";
            if (sv5 != null) {
                printcs = sv5.getPmva();
            }

            for (int i = 0; i < cdetaillist.size(); i++) {
                Stssoldtickettab stsv = (Stssoldtickettab) cdetaillist.get(i);
                timeSharingDao.save(stsv);
                if (printcs.equals("1")) {
                    Ticketprintlist t = new Ticketprintlist();
                    // timeSharingDao.save(stsv);
                    t.setIemployeeid(iemployeeid);
                    t.setSzsalesvoucherno(s.getSzsalesvoucherno());
                    t.setPrinttype("01");
                    t.setSzticketprintno(stsv.getSzticketprintno());
                    t.setPrinttime(daytime);
                    t.setIsok(new Long(0));

                    Long printid = timeSharingDao.getSequenceId("PRINT_ID");
                    t.setPrintid(printid);
                    timeSharingDao.save(t);

                }
            }
            for (int i = 0; i < zdetaillist.size(); i++) {
                Stscomticketsalesdetailstab zstd = (Stscomticketsalesdetailstab) zdetaillist
                        .get(i);
                timeSharingDao.save(zstd);
            }
            for (int i = 0; i < cdzetaillist.size(); i++) {
                Stssoldticketsubtab stss = (Stssoldticketsubtab) cdzetaillist
                        .get(i);
                timeSharingDao.save(stss);
            }

            rs.addRow(new String[] { "true",
                    s.getId().getIsalesvoucherid().toString() });
            return rs;
        } catch (Exception e2) {
            System.out.print("保存失败");
            throw e2;
        }
    }

    public Long updatevouchersequence() {
        List<Map> iserialnumlist = new ArrayList();
        try {
            iserialnumlist = timeSharingDao
                    .findBySqlToMap("select voucher_sequence.nextval  from dual");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        Long iserialnum = new Long(
                (((Map) iserialnumlist.get(0)).get("NEXTVAL")).toString());
        return iserialnum;
    }

    public ResultBean saveorder(String salesvouchers,
                                String salesvoucherdetails, String comticketsalesdetails,
                                Long maxid, String szsalesvoucherno,String url) throws SQLException {
    	if(url==null || url.length()<1){
    		url=WebContant.GetKeyValue("CenterUrl");
    	}
    	// 开始保存订单
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });

        String[] salesvoucher = salesvouchers.split("&");
        Long iscenicid = new Long(salesvoucher[0]);
        Long iticketwinid = new Long(salesvoucher[1]);
        Long ibusinessid = new Long(salesvoucher[2]);
        Long iemployeeid = new Long(salesvoucher[3]);// 出票员
        Double iaccountreceivable = new Double(salesvoucher[5]);
        Double iacceptmoney = new Double(salesvoucher[4]);
        if (iacceptmoney < iaccountreceivable) {
            rs.addRow(new String[] { "false", "实收款应该大于等于应收金额" });
            return rs;
        }
        Double igivechange = new Double(salesvoucher[6]);
        String usid = salesvoucher[7];
        Long forceemid = new Long(salesvoucher[8]);
        String pzlb = salesvoucher[9];// 默认 ０１ 销售 ０４ 补入
        String zffs = "00";
        if (salesvoucher.length >= 11) {
            zffs = salesvoucher[10];// 支付方式
        }
        Stssalesvouchertab s = new Stssalesvouchertab();
        Esbscenicareatab scenic = (Esbscenicareatab) timeSharingDao.get(
                Esbscenicareatab.class, iscenicid);
        s.setIscenicid(iscenicid);
        s.setIticketwinid(iticketwinid);
        s.setIbusinessid(ibusinessid);
        s.setIhandler(iemployeeid);
        s.setIpayeer(iemployeeid);
        s.setImaker(forceemid);
        s.setIauditor(iemployeeid);
        s.setIaccountreceivable(iaccountreceivable);
        s.setIacceptmoney(iacceptmoney);
        s.setIgivechange(igivechange);
        String today = Tools.getDays();
        String daytime = Tools.getDayTimes();
        s.setIyear(new Long(today.substring(0, 4)));
        s.setImonth(new Long(today.substring(5, 7)));
        s.setIday(new Long(today.substring(8, 10)));
        s.setDtmakedate(daytime);
        s.setDtauditdate(today);
        s.setUsid(usid);
        s.setDyusid("daoyou");
        s.setBisintegral(new Long(0));
        s.setByprintinvoice(new Long(0));
        s.setBysplitway(new Long(2));
        s.setBisreturn(new Long(1));
        s.setBysalesvouchertype(pzlb);
        s.setBypostrecord(new Long(0));
        s.setBysalesvoucherstate(new Long(1));
        s.setBispay(new Long(0));
        s.setBispayee(new Long(0));
        Esbticketwintab e = (Esbticketwintab) timeSharingDao.get(
                Esbticketwintab.class, s.getIticketwinid());
        StssalesvouchertabId id = new StssalesvouchertabId();
        id.setIticketstationid(e.getIticketstationid());
        id.setIsalesvoucherid(maxid);
        s.setId(id);
        Esbticketstationtab esbticketstation = (Esbticketstationtab) timeSharingDao
                .get(Esbticketstationtab.class, e.getIticketstationid());

        s.setSzsalesvoucherno(szsalesvoucherno);
        // 目前结算只有一种方式 （现金）直接生成结算数据
        Stssalessettlementtab st = new Stssalessettlementtab();
        StssalessettlementtabId sid = new StssalessettlementtabId();
        sid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
        sid.setIticketstationid(s.getId().getIticketstationid());
        sid.setIsalessettlementid(new Long(1));
        st.setId(sid);
        st.setSettlementdata(today);
        st.setSettlementtime(daytime.substring(11));
        st.setIsettlementid(zffs);
        st.setMsettlementmoney(iacceptmoney);
        st.setIversion(new Long(1));
        st.setDtmakedate(daytime);

        List detaillist = new ArrayList();
        List cdetaillist = new ArrayList();
        String[] salesvoucherdetail = salesvoucherdetails.split(":");
        double smont = 0;
        Long szsoldticketid = new Long(1);
        for (int i = 0; i < salesvoucherdetail.length; i++) {
            String isalesvoucherdetail = salesvoucherdetail[i];
            String[] detail = isalesvoucherdetail.split("&");
            long isalesvoucherdetailsid = new Long(detail[0]);
            Long icrowdkindpriceid = new Long(detail[1]);
            Long itickettypeid = new Long(detail[2]);
            Long iticketnum = new Long(detail[3]);
            String dtstartdate = detail[4];
            String dtenddate = detail[5];

            Edmcrowdkindpricetab edmcrowdkindpricetab = (Edmcrowdkindpricetab) timeSharingDao
                    .get(Edmcrowdkindpricetab.class, icrowdkindpriceid);
            Double mactualsaleprice = edmcrowdkindpricetab
                    .getMactualsaleprice();
            Double meventmoney = new Double(mactualsaleprice.doubleValue()
                    * iticketnum.doubleValue());
            smont = smont + meventmoney;
            Stssalesvoucherdetailstab sd = new Stssalesvoucherdetailstab();
            StssalesvoucherdetailstabId sdid = new StssalesvoucherdetailstabId();
            sdid.setIsalesvoucherdetailsid(isalesvoucherdetailsid);
            sdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
            sdid.setIticketstationid(s.getId().getIticketstationid());
            sd.setId(sdid);
            sd.setIticketwinid(s.getIticketwinid());
            sd.setIcrowdkindpriceid(icrowdkindpriceid);
            sd.setItickettypeid(itickettypeid);
            sd.setIplayerperticket(new Long(1));// 人/张
            sd.setIticketnum(iticketnum);// 张数
            sd.setIticketplayer(iticketnum);// 人次
            sd.setDtstartdate(dtstartdate);
            sd.setDtenddate(dtenddate);
            sd.setIstartid(new Long(0));
            sd.setIendid(new Long(0));
            sd.setSzstartserial("0");
            sd.setSzendserial("0");
            sd.setIoffersschemeid(new Long(0));
            sd.setIamount(iticketnum);
            sd.setIpresentnums(new Long(0));
            sd.setIderatenums(new Long(0));
            sd.setIfactnum(new Long(0));
            sd.setIuseablenessnum(iticketnum);// 使用数量
            sd.setMactualsaleprice(mactualsaleprice);// 实际售价
            sd.setMeventmoney(meventmoney);// 实际发生金额
            sd.setMderatemoney(new Double(0));// 减免金额
            sd.setMpresentmoney(new Double(0));// 赠送金额
            sd.setMnominalfee(new Double(0));// 工本费
            sd.setMdeposit(new Double(0));
            sd.setMhandcharge(new Double(0));
            sd.setByconsumetype("00");
            sd.setIconsumenum(new Double(0));
            sd.setMtotalamount(meventmoney);
            sd.setItotalnumber(iticketnum);
            sd.setItotalminutes(new Long(0));
            sd.setByisout(new Long(1));
            sd.setDtmakedate(Tools.getDayTimes());
            sd.setIversion(new Long(0));
            detaillist.add(sd);

            Edmtickettypetab eticket = (Edmtickettypetab) timeSharingDao.get(
                    Edmtickettypetab.class, itickettypeid);
            // 添加售出门票表

            for (int j = 1; j <= sd.getIticketnum().intValue(); j++) {
                Stssoldtickettab stsv = new Stssoldtickettab();
                StssoldtickettabId stsvid = new StssoldtickettabId();
                stsvid.setIsalesvoucherid(sd.getId().getIsalesvoucherid());
                stsvid.setIticketstationid(sd.getId().getIticketstationid());
                stsvid.setIsalesvoucherdetailsid(sd.getId()
                        .getIsalesvoucherdetailsid());
                stsvid.setSzsoldticketid(szsoldticketid);
                szsoldticketid = szsoldticketid + 1;
                stsv.setId(stsvid);
                stsv.setIscenicid(s.getIscenicid());
                stsv.setIcrowdkindid(edmcrowdkindpricetab.getIcrowdkindid());
                stsv.setItickettypeid(sd.getItickettypeid());
                stsv.setUsid(s.getUsid());
                stsv.setIbusinessid(s.getIbusinessid());
                stsv.setDyusid(s.getDyusid());
                stsv.setIplayerperticket(sd.getIplayerperticket());// 人次数
                stsv.setDtstartdate(sd.getDtstartdate());
                stsv.setDtenddate(sd.getDtenddate());
                stsv.setMhandcharge(new Double(0));
                stsv.setByvalidity("00");
                stsv.setDtmakedate(daytime);

                List<Map> iserialnumlist = new ArrayList();
                try {
                    iserialnumlist = timeSharingDao
                            .findBySqlToMapnocolsesession("select ticketid_sequence.nextval  from dual");
                } catch (Exception e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
                Long iserialnum = new Long(
                        (((Map) iserialnumlist.get(0)).get("NEXTVAL"))
                                .toString());
                stsv.setIserialnum(iserialnum);
                String newmaxorno = Tools.ConvertTo36Text(iserialnum, 0);
                StringBuffer printno = new StringBuffer();
                printno.append(esbticketstation.getSzstationcode());
                printno.append(scenic.getSzsceniccode());
                printno.append(eticket.getSztickettypecode());
                if (newmaxorno.length() < 6) {
                    for (int b = 0; b < 6 - newmaxorno.length(); b++) {
                        printno.append("0");
                    }
                }

                printno.append(newmaxorno);
                String szprintno = Tools.ticketMakeMd5(printno.toString());
                stsv.setSzticketprintno(szprintno);
                stsv.setMremainmoney(new Double(0));
                stsv.setMpresentmoney(new Double(0));
                stsv.setMactualsaleprice(sd.getMactualsaleprice());
                stsv.setIpresentnum(new Long(0));
                stsv.setIremainnum(new Long(1));// 剩余数量
                stsv.setMnominalfee(new Double(0));
                stsv.setMdeposit(new Double(0));
                stsv.setByticketpurpose("00");
                stsv.setBisrefundbalance(new Long(1));
                stsv.setByactivation("02");
                stsv.setIvaliditynum(new Long(0));
                stsv.setByvalidityunits(new Long(0));
                stsv.setByconsumetype("00");
                cdetaillist.add(stsv);
            }
        }

        if (iaccountreceivable != smont) {
            rs.addRow(new String[] { "false",
                    "明细金额之和" + smont + "与总金额" + iaccountreceivable + "不等" });
            return rs;
        }
        // System.out.println("解出子订单结算明细list：Stssalesvoucherdetailstab");
        String[] comticketsalesdetail = comticketsalesdetails.split(":");
        List zdetaillist = new ArrayList();
        List cdzetaillist = new ArrayList();
        long n = 0;
        Long ss = new Long(0);
        Long oisplitamount = new Long(0);
        long yisalsvoucherdetailid = 0;

        for (int i = 0; i < comticketsalesdetail.length; i++) {

            String[] zdetail = comticketsalesdetail[i].split("&");
            Stscomticketsalesdetailstab zstd = new Stscomticketsalesdetailstab();
            StscomticketsalesdetailstabId zstdid = new StscomticketsalesdetailstabId();
            Long isalesvoucherdetailsid = new Long(zdetail[0]);
            Long icrowdkindpriceid = new Long(zdetail[1]);
            Edmcrowdkindpricetab edprice = (Edmcrowdkindpricetab) timeSharingDao
                    .get(Edmcrowdkindpricetab.class, icrowdkindpriceid);
            Long itickettypeid = new Long(zdetail[2]);
            Long iztickettypeid = new Long(zdetail[3]);
            Long isplitamount = new Long(zdetail[4]);
            Long tripid = new Long(zdetail[5]);
            Long ivenueareaid = new Long(zdetail[6]);
            Long ivenueseatsid = new Long(zdetail[7]);
            String dtstartdate = zdetail[8];
            String dtenddate = zdetail[9];
            zstdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
            zstdid.setIticketstationid(s.getId().getIticketstationid());
            zstdid.setIsalesvoucherdetailsid(isalesvoucherdetailsid);
            zstd.setIcrowdkindpriceid(icrowdkindpriceid);
            zstd.setItickettypeid(itickettypeid);
            zstd.setIztickettypeid(iztickettypeid);
            zstd.setMhandcharge(new Double(0));
            zstd.setDtmakedate(daytime);
            Prdtripvenuemanage p = null;
            if (tripid.longValue() > 0) {
                try {/*
                    javax.xml.rpc.Service service = null;
                    java.net.URL endpointURL = new java.net.URL("http://"
                            + url
                            + "/services/centersaleService?wsdl");

                    CentersaleServiceSoapBindingStub ssl = new CentersaleServiceSoapBindingStub(
                            endpointURL, service);
                    ssl.setMaintainSession(true);
                    com.ectrip.ticket.centersale.client.ResultBean cano = ssl
                            .getPrdtripvenuemanage(iztickettypeid, tripid,
                                    dtstartdate);

                    if (cano.getRowsCount() > 0) {
                        p = new Prdtripvenuemanage();
                        p.setItickettypeid(iztickettypeid);
                        p.setTripid(tripid);
                        p.setStarttime(cano.getResult(0, "STARTTIME"));
                        p.setEndtime(cano.getResult(0, "ENDTIME"));
                        p.setIadvanceminute(new Long(cano.getResult(0,
                                "IADVANCEMINUTE").toString()));
                        p.setIlagminute(new Long(cano
                                .getResult(0, "ILAGMINUTE").toString()));
                        p.setIvenueareaid(new Long(cano.getResult(0,
                                "IVENUEAREAID").toString()));
                        p.setIvenueid(new Long(cano.getResult(0, "IVENUEID")
                                .toString()));

                    } else {
                        rs.addRow(new String[] { "false", "没有竹筏排班数据" });
                        return rs;

                    }
                */} catch (Exception e1) {
                    rs.addRow(new String[] { "false", "没有竹筏排班数据" });
                    return rs;
                }

                zstd.setTripid(tripid);

                zstd.setDtstartdate(dtstartdate + " " + p.getStarttime()
                        + ":00");
                zstd.setDtenddate(dtstartdate + " " + p.getEndtime() + ":00");
                // 判断竹筏时间是否过期
                Calendar now = Calendar.getInstance(TimeZone
                        .getTimeZone("GMT+08:00"));
                SimpleDateFormat df = new SimpleDateFormat(
                        "yyyy-MM-dd HH:mm:ss");

                try {
                    Date d2 = df.parse(zstd.getDtenddate());
                    Calendar endcalendar = Calendar.getInstance();
                    endcalendar.setTime(d2);
                    // 补入不用判断竹筏是否过期
                    if (pzlb.equals("01")) {
                        if (now.after(endcalendar)) {
                            rs.addRow(new String[] { "false", "竹筏趟次过期，不能销售" });
                            return rs;
                        }
                    }
                } catch (ParseException e1) {
                    rs.addRow(new String[] { "false", "竹筏趟次过期，不能销售" });
                    return rs;
                }

                if (ivenueareaid == 0) {
                    zstd.setIvenueareaid(p.getIvenueareaid());
                    zstd.setIvenueid(p.getIvenueid());
                } else {
                    zstd.setIvenueareaid(ivenueareaid);
                    zstd.setIvenueid(p.getIvenueid());
                }
                zstd.setIvenueseatsid(ivenueseatsid);
            } else {
                zstd.setTripid(tripid);
                zstd.setIvenueareaid(new Long(0));
                zstd.setIvenueid(new Long(0));
                zstd.setIvenueseatsid(new Long(0));
                zstd.setDtstartdate(dtstartdate + " 00:00:00");
                zstd.setDtenddate(dtenddate + " 23:59:59");
            }

            zstd.setIversion(new Long(0));
            List list = timeSharingDao
                    .find(" from Edmticketcomposepricetab where id.icrowdkindpriceid="
                            + icrowdkindpriceid
                            + " and itickettypeid='"
                            + iztickettypeid + "'");
            if (list == null || list.size() == 0) {
                rs.addRow(new String[] { "false",
                        "票价编号为" + icrowdkindpriceid + "无子票价格" });
                return rs;
            } else {
                Edmticketcomposepricetab edt = (Edmticketcomposepricetab) list
                        .get(0);
                zstdid.setIcomticketsalesdetailsid(edt.getId()
                        .getIticketcomposepriceid());
                zstd.setId(zstdid);
                zstd.setIsplitamount(isplitamount * edt.getNumb());
                zstd.setMsplitprice(edt.getMactualsaleprice());
                zstd.setMsplitmoney(edt.getMactualsaleprice() * edt.getNumb()
                        * isplitamount);
                zdetaillist.add(zstd);
                List opwwlist = timeSharingDao
                        .find(" from Opwwicketsettab where itickettypeid="
                                + itickettypeid + " and izticktypeid="
                                + iztickettypeid);
                if (yisalsvoucherdetailid == 0) {
                    yisalsvoucherdetailid = isalesvoucherdetailsid.longValue();
                    oisplitamount = isplitamount;
                } else {
                    if (yisalsvoucherdetailid != isalesvoucherdetailsid
                            .longValue()) {
                        ss = ss + oisplitamount;
                        oisplitamount = isplitamount;
                        yisalsvoucherdetailid = isalesvoucherdetailsid
                                .longValue();
                    }
                }
                if (opwwlist.size() == 0) {
                    Edmtickettypetab edticket = (Edmtickettypetab) timeSharingDao
                            .get(Edmtickettypetab.class, itickettypeid);
                    rs.addRow(new String[] { "false",
                            edticket.getSztickettypecode() + "的检票园门数据不全" });
                    return rs;
                }
                for (int k = 0; k < opwwlist.size(); k++) {
                    Opwwicketsettab opww = (Opwwicketsettab) opwwlist.get(k);
                    for (int m = 1; m <= isplitamount; m++) {
                        Stssoldticketsubtab stss = new Stssoldticketsubtab();
                        StssoldticketsubtabId stssid = new StssoldticketsubtabId();
                        stssid.setIticketstationid(s.getId()
                                .getIticketstationid());
                        stssid.setSzsoldticketid(new Long(ss + m));
                        stssid.setSzsoldticketsubid(new Long(n + 1));
                        n = n + 1;
                        stssid.setIsalesvoucherid(s.getId()
                                .getIsalesvoucherid());
                        stssid.setIsalesvoucherdetailsid(isalesvoucherdetailsid);
                        stss.setId(stssid);
                        stss.setIgardengateid(opww.getIgardengateid());
                        stss.setIscenicid(s.getIscenicid());
                        stss.setItickettypeid(itickettypeid);
                        stss.setIztickettypeid(iztickettypeid);
                        stss.setBychecktype(new Long(0));
                        stss.setByconsumemode(opww.getByconsumemode());
                        stss.setIpasstimes(opww.getIlimittotaltimes());
                        stss.setIpassedtimes(new Long(0));
                        stss.setMsingletimes(opww.getMsingletimes());
                        stss.setMlimitconsume(new Double(0));
                        stss.setMsingleconsume(new Double(0));
                        stss.setMconsumed(new Double(0));
                        stss.setByisout(new Long(1));
                        stss.setIsvalid(new Long(1));
                        stss.setDtmakedate(daytime);
                        stss.setBylastcheckdir(new Long(0));
                        stss.setIcrowdkindid(edprice.getIcrowdkindid());
                        if (tripid.longValue() > 0
                                && opww.getIlimittotaltimes() == 1) {
                            stss.setTripid(tripid);
                            stss.setDtbegindate(dtstartdate + " "
                                    + p.getStarttime() + ":00");
                            stss.setDtenddate(dtenddate + " " + p.getEndtime()
                                    + ":00");
                        } else {
                            stss.setTripid(new Long(0));
                            stss.setDtbegindate(dtstartdate + " " + "00:00:00");
                            stss.setDtenddate(dtenddate + " " + "23:59:59");
                        }
                        cdzetaillist.add(stss);
                    }
                }

            }
        }

        timeSharingDao.save(s);
        timeSharingDao.save(st);
        for (int i = 0; i < detaillist.size(); i++) {
            Stssalesvoucherdetailstab sd = (Stssalesvoucherdetailstab) detaillist
                    .get(i);
            timeSharingDao.save(sd);
        }
        Sysparv5 sv5 = (Sysparv5) timeSharingDao.get(Sysparv5.class,
                new Sysparv5Id("PRCS", "01"));
        String printcs = "0";
        if (sv5 != null) {
            printcs = sv5.getPmva();
        }
        for (int i = 0; i < cdetaillist.size(); i++) {
            Stssoldtickettab stsv = (Stssoldtickettab) cdetaillist.get(i);
            timeSharingDao.save(stsv);
            if (pzlb.equals("01")) {
                if (printcs.equals("1")) {
                    Ticketprintlist t = new Ticketprintlist();
                    t.setSzsalesvoucherno(s.getSzsalesvoucherno());
                    t.setIemployeeid(iemployeeid);
                    t.setPrinttype("01");
                    t.setSzticketprintno(stsv.getSzticketprintno());
                    t.setPrinttime(daytime);
                    t.setIsok(new Long(0));
                    try {
                        Long printid = timeSharingDao.getSequenceId("PRINT_ID");
                        t.setPrintid(printid);
                        timeSharingDao.save(t);
                    } catch (Exception e1) {
                        e1.printStackTrace();
                        System.out.println(e1.getMessage());
                    }
                }
            }
        }
        for (int i = 0; i < zdetaillist.size(); i++) {
            Stscomticketsalesdetailstab zstd = (Stscomticketsalesdetailstab) zdetaillist
                    .get(i);
            timeSharingDao.save(zstd);
        }
        for (int i = 0; i < cdzetaillist.size(); i++) {
            Stssoldticketsubtab stss = (Stssoldticketsubtab) cdzetaillist
                    .get(i);
            timeSharingDao.save(stss);
        }

        rs.addRow(new String[] { "true",
                s.getId().getIsalesvoucherid().toString() });
        return rs;
    }

    public ResultBean soldticketlist(Long isalesvoucherid, Long iticketstationid) {

        String sql = " select s.usid,e.szsoldticketid,e.isalesvoucherdetailsid,e.isalesvoucherid,e.iticketstationid,e.itickettypeid,szticketprintno,e.iserialnum,e.icrowdkindid,e.dtstartdate,e.dtenddate,e.iplayerperticket,ed.szcrowdkindname,edt.sztickettypename||'('||ed.szcrowdkindname||')' as sztickettypename,ebs.szbusinessname,e.mactualsaleprice,s.szsalesvoucherno,edt.bymaketicketway,v5.pmva as strmaketype,edt.bymediatype,v51.pmva as strmediatype,e.manyouno as manyouno,e.myzj as myzj,e.name1 as name1,sd.icrowdkindpriceid as icrowdkindpriceid,ep.ipeoplenumrange as ipeoplenumrange,c.corpname as corpname,dy.lname as ornm,su.szinnername as szregionalname,ep.inote1 as inote1,ep.listingprice as listingprice,ef.szemployeename as szemployeename ,es.szstationname as szstationname  from Stssoldtickettab e,Edpcrowdkindtab ed,Edmtickettypetab edt,Edmbusinesstab ebs,Stssalesvouchertab s left outer join custom dy on dy.usid=s.dyusid left outer join Custom c on c.usid=s.usid left outer join Galsourceregiontab su on su.iregionalid=s.iregionalid,Sysparv5 v5,stssalesvoucherdetailstab sd,Edmcrowdkindpricetab ep,Sysparv5 v51,Esfemployeetab ef,Esbticketstationtab es where e.isalesvoucherid="
                + isalesvoucherid
                + " and e.iticketstationid="
                + iticketstationid
                + " and e.isalesvoucherid=s.isalesvoucherid and e.iticketstationid=s.iticketstationid  and ed.icrowdkindid=e.icrowdkindid and edt.itickettypeid=e.itickettypeid and ebs.ibusinessid=e.ibusinessid and edt.bymaketicketway=v5.pmcd and v5.pmky='CPFS' and edt.bymediatype=v51.pmcd and v51.pmky='CKFS' and sd.isalesvoucherdetailsid=e.isalesvoucherdetailsid and sd.isalesvoucherid=e.isalesvoucherid and sd.iticketstationid=e.iticketstationid and sd.icrowdkindpriceid=ep.icrowdkindpriceid and ef.iemployeeid=s.ihandler and es.iticketstationid=s.iticketstationid order by edt.bymaketicketway desc,e.iserialnum";

        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql);
        } catch (Exception e) {
            e.printStackTrace();
        }
        Sysparv5 v5 = sysService.findOne("ZDCD", "01");
        String msql = "select nvl(count(*),0) as numb,s.iticketstationid as iticketstationid,esb.szstationcode as szstationcode from Stssalesvouchertab s,Esbticketstationtab esb where s.iticketstationid=esb.iticketstationid and s.bysalesvouchertype = '01' and substr(s.dtmakedate, 1, 10) = '"
                + Tools.getDays()
                + "' and s.iticketstationid="
                + iticketstationid
                + " group by s.iticketstationid ,esb.szstationcode ";
        StringBuffer tationcode = new StringBuffer();
        List<Map> tationList = new ArrayList();
        try {
            tationList = timeSharingDao.findBySqlToMapnocolsesession(msql);
        } catch (Exception e1) {
            e1.printStackTrace();
        }
        if (tationList != null && tationList.size() > 0) {
            Map map1 = tationList.get(0);
            tationcode.append(map1.get("SZSTATIONCODE").toString() + "-"
                    + map1.get("NUMB").toString());
        } else {
            Esbticketstationtab station = (Esbticketstationtab) this.timeSharingDao
                    .get(Esbticketstationtab.class, iticketstationid);
            tationcode.append(station.getSzstationcode() + "-" + "1");
        }

        for (Map map : list) {
            Long isalesvoucherdetailsid = new Long(map.get(
                    "ISALESVOUCHERDETAILSID").toString());
            String sql1 = " select sts.icomticketsalesdetailsid,sts.iztickettypeid,sts.tripid,sts.dtstartdate,sts.dtenddate,edt.sztickettypename,t.tripname,vp.szprogramname,vn.venueidname,va.ivenueareaname,msplitprice from Stscomticketsalesdetailstab sts left outer join trip t on t.tripid=sts.tripid left outer join Venueprogram vp on sts.ivenueseatsid=vp.iprogramid left outer join venue vn on vn.ivenueid=sts.ivenueid left outer join Venuearea va on va.ivenueareaid=sts.ivenueareaid and va.ivenueid=sts.ivenueid,Edmtickettypetab edt where isalesvoucherid=? and isalesvoucherdetailsid=? and iticketstationid=? and sts.iztickettypeid=edt.itickettypeid ";
            List<Map> list1 = new ArrayList();

            try {
                list1 = timeSharingDao.findBySqlToMapnocolsesession(sql1,
                        isalesvoucherid, isalesvoucherdetailsid,
                        iticketstationid);
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            String zdail = "";
            String products = "";
            for (Map map1 : list1) {
                String szname = map1.get("SZTICKETTYPENAME").toString()
                        + map1.get("MSPLITPRICE").toString() + "元";
                try {
                    if (v5 == null) {

                        szname = map1.get("SZTICKETTYPENAME").toString()
                                + map1.get("MSPLITPRICE").toString() + "元";
                    } else {

                        int cdnumb = Integer.parseInt(v5.getPmva());
                        if (cdnumb < 1) {
                            szname = map1.get("SZTICKETTYPENAME").toString()
                                    + map1.get("MSPLITPRICE").toString() + "元";
                        } else {
                            if (map1.get("SZTICKETTYPENAME").toString()
                                    .length() > cdnumb) {

                                szname = map1.get("SZTICKETTYPENAME")
                                        .toString().substring(0, cdnumb)
                                        + map1.get("MSPLITPRICE").toString()
                                        + "元";
                            } else {
                                szname = map1.get("SZTICKETTYPENAME")
                                        .toString()
                                        + map1.get("MSPLITPRICE").toString()
                                        + "元";
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (new Long(map1.get("TRIPID").toString()) > 0) {
                    // 读取座位号
                    String seatids = "";
                    List<Map> list2;
                    try {
                        list2 = timeSharingDao
                                .findBySqlToMapnocolsesession("select vs.szvenueseatsname from seatsaletab s,Venueseats vs where s.isalesvoucherid="
                                        + isalesvoucherid
                                        + " and s.iticketstationid ="
                                        + iticketstationid
                                        + " and s.isalesvoucherdetailsid="
                                        + isalesvoucherdetailsid
                                        + " and s.icomticketsalesdetailsid="
                                        + map1.get("ICOMTICKETSALESDETAILSID")
                                        .toString()
                                        + " and s.szsoldticketid="
                                        + map.get("SZSOLDTICKETID").toString()
                                        + "  and vs.ivenueid=s.ivenueid and vs.ivenueseatsid=s.iseatid and s.isvalid=1 ");
                        if (list2 != null && list2.size() > 0) {
                            for (Map map2 : list2) {
                                if (list2.size() == 1) {
                                    seatids = map1.get("IVENUEAREANAME")
                                            + map2.get("SZVENUESEATSNAME")
                                            .toString();
                                } else {
                                    seatids = seatids
                                            + map1.get("IVENUEAREANAME")
                                            + map2.get("SZVENUESEATSNAME")
                                            + "!";
                                }
                            }
                        }
                    } catch (Exception e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }

                    zdail = zdail + szname + "&"
                            + map1.get("TRIPID").toString() + "&"
                            + map1.get("TRIPNAME").toString() + "&"
                            + map1.get("DTSTARTDATE").toString() + "&"
                            + map1.get("DTENDDATE").toString() + "&"
                            + map1.get("SZPROGRAMNAME") + "&"
                            + map1.get("VENUEIDNAME") + "&" + seatids + "@";
                } else {
                    zdail = zdail + szname + "&" + "0" + "&" + "" + "&"
                            + map1.get("DTSTARTDATE").toString() + "&"
                            + map1.get("DTENDDATE").toString() + "@";
                }

                products = products + map1.get("IZTICKETTYPEID").toString()
                        + ":";

            }
            if (!zdail.equals("")) {
                zdail = zdail.substring(0, zdail.length() - 1);
            }
            if (products != null && !products.equals("")) {
                products = products.substring(0, products.length() - 1);
            }

            map.put("PRODUCTS", products);

            map.put("ZDAIL", zdail);
            map.put("PRINTTYPE", "01");
            // 读取剧院场馆信息

            map.put("TATIONCODE", tationcode);// 序号
            //修改票号信息，加上自定义数据
            Long ticketId = Long.parseLong(map.get("ITICKETTYPEID").toString());
            String szticketprintno = map.get("SZTICKETPRINTNO").toString();
            Edmtickettypetab ticket = (Edmtickettypetab) timeSharingDao.get(Edmtickettypetab.class,ticketId);
            String orid = map.get("SZSALESVOUCHERNO").toString();
            Hotelprovider hp = (Hotelprovider) timeSharingDao.get(Hotelprovider.class,ticket.getIscenicid());
            szticketprintno = changeSzprintNo(szticketprintno,orid,map.get("USID").toString(),ticket);
            map.put("SZTICKETPRINTNO",szticketprintno);
        }
        return MapToResultBean.toResultBean(list);
    }

    public ResultBean salezdetaillist(Long isalesvoucherid,
                                      Long iticketstationid) {

        String sql = " select e.isalesvoucherdetailsid,e.isalesvoucherid,e.iticketstationid,e.itickettypeid,e.iztickettypeid,e.dtstartdate,e.dtenddate,edt.sztickettypename as szztickettypename,ed.sztickettypename from Stscomticketsalesdetailstab e,Edmtickettypetab ed,Edmtickettypetab edt where e.isalesvoucherid=? and e.iticketstationid=? and  edt.itickettypeid=e.iztickettypeid and  ed.itickettypeid=e.itickettypeid order by e.isalesvoucherdetailsid";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql,
                    isalesvoucherid, iticketstationid);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return MapToResultBean.toResultBean(list);
    }

    public ResultBean updatecancelcontrol(List productcontrollist) {
        ResultBean rs = new ResultBean();
        try {
            rs.setColumnCount(2);
            rs.setColumnNames(new String[] { "returnstats", "message" });
            String returnstats = "";
            String message = "";
            for (int i = 0; i < productcontrollist.size(); i++) {
                Productcontrol p = (Productcontrol) productcontrollist.get(i);
                String hsql = "";

                hsql = " from Productcontrol where itickettypeid="
                        + p.getItickettypeid() + " and tripid=" + p.getTripid()
                        + " and stdata='" + p.getStdata()
                        + "' and controltype='03'";
                // System.out.println("hsql=" + hsql);
                List plist = timeSharingDao.find(hsql);
                Productcontrol p1 = (Productcontrol) plist.get(0);
                p1.setSoldnumber(p1.getSoldnumber() - p.getSoldnumber());
                timeSharingDao.update(p1);

            }
            rs.addRow(new String[] { "true", "" });
            return rs;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            rs.addRow(new String[] { "false", e.getMessage() });
            return rs;
        }
    }

    public ResultBean updateflcancelcontrol(List productcontrollist) {

        ResultBean rs = new ResultBean();
        try {
            rs.setColumnCount(2);
            rs.setColumnNames(new String[] { "returnstats", "message" });
            String returnstats = "";
            String message = "";
            for (int i = 0; i < productcontrollist.size(); i++) {
                Productcontrol p = (Productcontrol) productcontrollist.get(i);
                String hsql = "";
                hsql = " from Productcontrol where itickettypeid="
                        + p.getItickettypeid() + " and tripid=" + p.getTripid()
                        + " and stdata='" + p.getStdata()
                        + "' and controltype='03'";

                List plist = timeSharingDao.find(hsql);
                Productcontrol p1 = (Productcontrol) plist.get(0);

                p1.setSoldnumber(p1.getSoldnumber() + p.getSoldnumber());
                timeSharingDao.update(p1);

            }
            rs.addRow(new String[] { "true", "" });
            return rs;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            rs.addRow(new String[] { "false", e.getMessage() });
            return rs;
        }
    }

    public ResultBean updatecancelordercontrol(List productcontrollist,
                                               String orid, String szsalesvoucherno) {

        MOrder m = (MOrder) timeSharingDao.get(MOrder.class, orid);

        Custom c = (Custom) timeSharingDao.get(Custom.class, m.getUsid());
        String susid = "";
        if (c.getLgtp().equals("02")) {
            if (c.getUsqx().substring(0, 1).equals("1")) {
                // 分社主用户
                susid = c.getUsid();
            } else {
                // 分社子用户
                susid = c.getSusid();
            }
        }

        ResultBean rs = new ResultBean();
        try {
            rs.setColumnCount(2);
            rs.setColumnNames(new String[] { "returnstats", "message" });
            String returnstats = "";
            String message = "";
            Long creditnumb = new Long(0);
            for (int i = 0; i < productcontrollist.size(); i++) {
                Productcontrol p = (Productcontrol) productcontrollist.get(i);
                String hsql = "";
                hsql = " from Productcontrol where itickettypeid="
                        + p.getItickettypeid() + " and tripid=" + p.getTripid()
                        + " and stdata='" + p.getStdata()
                        + "' and controltype='03'";

                List plist = timeSharingDao.find(hsql);
                Productcontrol p1 = (Productcontrol) plist.get(0);

                p1.setSoldnumber(p1.getSoldnumber() - p.getSoldnumber());

                timeSharingDao.update(p1);
                /**
                 * 退订返回信誉度 if (c.getLgtp().equals("02") &&
                 * c.getTtlb().equals("01")) {
                 *
                 * List pvlist = timeSharingDao
                 * .find(" from Prdtripvenuemanage where itickettypeid=" +
                 * p.getItickettypeid() + " and tripid=" + p.getTripid() +
                 * " and startdata<='" + p.getStdata() + "' and enddata>='" +
                 * p.getStdata() + "'");
                 *
                 * Prdtripvenuemanage pv = (Prdtripvenuemanage) pvlist.get(0);
                 *
                 * if (p1.getBystate() == 1) { // 正常退订
                 *
                 * if (pv.getIshot() == 1) { Sysparv5 v5 = (Sysparv5)
                 * timeSharingDao.get(Sysparv5.class, new Sysparv5Id("YDJF", "04"));
                 * Long hotnumb = new Long(v5.getPmvb()); Creditdetail cdd = new
                 * Creditdetail(); Long maxid = timeSharingDao.getMaxPk("cseq",
                 * "Creditdetail"); cdd.setCseq(maxid + 1); cdd.setUsid(susid);
                 * cdd.setZusid(m.getUsid()); cdd.setCtype("03");
                 * cdd.setOrid(szsalesvoucherno); cdd.setCreditnumb(hotnumb *
                 * p.getSoldnumber()); creditnumb = creditnumb + hotnumb *
                 * p.getSoldnumber(); timeSharingDao.save(cdd); } else { Sysparv5 v5
                 * = (Sysparv5) timeSharingDao.get(Sysparv5.class, new
                 * Sysparv5Id("YDJF", "06")); Long hotnumb = new
                 * Long(v5.getPmvb()); Creditdetail cdd = new Creditdetail();
                 * Long maxid = timeSharingDao.getMaxPk("cseq", "Creditdetail");
                 * cdd.setCseq(maxid + 1); cdd.setUsid(susid);
                 * cdd.setZusid(m.getUsid()); cdd.setCtype("04");
                 * cdd.setOrid(szsalesvoucherno); cdd.setCreditnumb(hotnumb *
                 * p.getSoldnumber()); timeSharingDao.save(cdd); creditnumb =
                 * creditnumb + hotnumb * p.getSoldnumber(); } } else {
                 *
                 * if (pv.getIshot() == 1) { Sysparv5 v5 = (Sysparv5)
                 * timeSharingDao.get(Sysparv5.class, new Sysparv5Id("YDJF", "03"));
                 * Long hotnumb = new Long(v5.getPmvb()); Creditdetail cdd = new
                 * Creditdetail(); Long maxid = timeSharingDao.getMaxPk("cseq",
                 * "Creditdetail"); cdd.setCseq(maxid + 1); cdd.setUsid(susid);
                 * cdd.setZusid(m.getUsid()); cdd.setCtype("05");
                 * cdd.setOrid(szsalesvoucherno); cdd.setCreditnumb(-1 * hotnumb
                 * * p.getSoldnumber()); creditnumb = creditnumb + (-1 * hotnumb
                 * * p.getSoldnumber()); timeSharingDao.save(cdd); } else { Sysparv5
                 * v5 = (Sysparv5) timeSharingDao.get(Sysparv5.class, new
                 * Sysparv5Id("YDJF", "05")); Long hotnumb = new
                 * Long(v5.getPmvb()); Creditdetail cdd = new Creditdetail();
                 * Long maxid = timeSharingDao.getMaxPk("cseq", "Creditdetail");
                 * cdd.setCseq(maxid + 1); cdd.setUsid(susid);
                 * cdd.setZusid(m.getUsid()); cdd.setCtype("05");
                 * cdd.setOrid(szsalesvoucherno); cdd.setCreditnumb(-1 * hotnumb
                 * * p.getSoldnumber()); timeSharingDao.save(cdd); creditnumb =
                 * creditnumb + (-1 * hotnumb * p.getSoldnumber()); } } }
                 */
            }

			/*
			 * if (creditnumb != 0) { Credit cd = (Credit)
			 * timeSharingDao.get(Credit.class, susid);
			 * cd.setCreditnumb(cd.getCreditnumb() + creditnumb);
			 * timeSharingDao.update(cd); }
			 */

            rs.addRow(new String[] { "true", "" });
            return rs;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            rs.addRow(new String[] { "false", e.getMessage() });
            return rs;
        }
    }

    public ResultBean updatecancelReserve(List productcontrollist, String usid) {
        ResultBean rs = new ResultBean();
        try {
            rs.setColumnCount(2);
            rs.setColumnNames(new String[] { "returnstats", "message" });
            String returnstats = "";
            String message = "";
            for (int i = 0; i < productcontrollist.size(); i++) {

                Productcontrol p = (Productcontrol) productcontrollist.get(i);

                String hsql = "";
                hsql = " from Productcontrol where itickettypeid="
                        + p.getItickettypeid() + " and tripid=" + p.getTripid()
                        + " and stdata='" + p.getStdata()
                        + "' and controltype='03'";

                List plist = timeSharingDao.find(hsql);
                Productcontrol p1 = (Productcontrol) plist.get(0);
                p1.setReservedsalenumber(p1.getReservedsalenumber()
                        - p.getSoldnumber());
                timeSharingDao.update(p1);
                String hql2 = " from Reservecontrol where usid='" + usid
                        + "' and productcontrolid=" + p1.getProductcontrolid();
                List rlist = timeSharingDao.find(hql2);
                Reservecontrol r = (Reservecontrol) rlist.get(0);
                r.setReservedsalenumber(r.getReservedsalenumber()
                        - p.getSoldnumber());
                timeSharingDao.update(r);

            }
            rs.addRow(new String[] { "true", "" });
            return rs;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            rs.addRow(new String[] { "false", e.getMessage() });
            return rs;
        }
    }

    public ResultBean updatefhordercancelProductcontrol(
            List productcontrollist, String orid, String szsalesvoucherno) {

        MOrder m = (MOrder) timeSharingDao.get(MOrder.class, orid);

        Custom c = (Custom) timeSharingDao.get(Custom.class, m.getUsid());
        String susid = "";

        if (c.getLgtp().equals("02")) {
            if (c.getUsqx().substring(0, 1).equals("1")) {
                // 分社主用户
                susid = c.getUsid();
            } else {
                // 分社子用户
                susid = c.getSusid();
            }
        }
        ResultBean rs = new ResultBean();
        try {
            rs.setColumnCount(2);
            rs.setColumnNames(new String[] { "returnstats", "message" });
            String returnstats = "";
            String message = "";

            for (int i = 0; i < productcontrollist.size(); i++) {
                Productcontrol p = (Productcontrol) productcontrollist.get(i);
                String hsql = "";
                hsql = " from Productcontrol where itickettypeid="
                        + p.getItickettypeid() + " and tripid=" + p.getTripid()
                        + " and stdata='" + p.getStdata()
                        + "' and controltype='03'";

                List plist = timeSharingDao.find(hsql);
                Productcontrol p1 = (Productcontrol) plist.get(0);

                p1.setSoldnumber(p1.getSoldnumber() + p.getSoldnumber());

                timeSharingDao.update(p1);

            }

            rs.addRow(new String[] { "true", "" });
            return rs;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            rs.addRow(new String[] { "false", e.getMessage() });
            return rs;
        }
    }

    /**
     * Describe:易旅宝专用
     *
     * @author liujianwen
     * @param orid
     * @return return:ResultBean Date:2014-7-24
     */
    public ResultBean getT_order(String orid) {
        List<Map> list = new ArrayList();
        String sql = " select CASt(t.orid as varchar(17)) as orid,t.iscenicid,t.usid,t.ibusinessid,t.sztravelbillno,t.iregionalid,t.tdlx,cast(t.ddzt as varchar(2)) as ddzt,t.dtenddate,t.dtstartdate,t.dyusid,t.ornm,t.orhm,t.mont,t.yhamnt,t.zfmont,t.ischupiao,t.notea,t.ornote1,t.ornote2,t.ornote3,t.ornote4,t.ornote5,t.ornote6,t.ornote7,t.ornote8,t.ornote9,t.ornote10 from T_order t where t.orid='"
                + orid+"'";
        try {
            list = timeSharingDao.findBySqlToMap(sql);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(list);
    }

    public ResultBean getT_order(String carno, Long iscenicid) {
        // 从后台参数获取 是否允许提前出票 是否允许过期出票 参数值
        String start = Tools.getDays();
        String msql = "";
        ResultBean resultBean = new ResultBean();
        try {
        	// 是否允许过期出票
            Sysparv5 sys1 = sysService.findOne("SFGQ", "1");
            // 是否允许提前出票
            Sysparv5 sys2 = sysService.findOne("SFYX", "1");
            if (sys1.getPmva().equals("1") && sys2.getPmva().equals("1")) {
                msql = " and t.dtstartdate='" + start + "' ";
            } else if (sys1.getPmva().equals("1") && sys2.getPmva().equals("0")) {
                msql = " and t.dtstartdate>='" + start + "' ";
            } else if (sys1.getPmva().equals("0") && sys2.getPmva().equals("1")) {
                msql = " and t.dtstartdate<='" + start + "' ";
            }
        } catch (Exception e) {
        	LOGGER.error("窗口取票接口异常："+StringUtil.toString_02(e));
            LOGGER.info("如果想控制过期票以及是否提前出票请检查： Sysparv5 中 KEY SFGQ 及  SFYX PMCD = 1 表示允许0不允许");
            msql = "";
        }
        if (iscenicid != 0) {
            msql = msql + " and t.iscenicid=" + iscenicid;
        }
        //lizhaodong 2017-4-18
        //String sql = " select CASt(t.orid as varchar(17)) as orid,t.iscenicid,t.usid,t.ibusinessid,t.sztravelbillno,t.iregionalid,t.tdlx,cast(t.ddzt as varchar(2)) as ddzt,t.dtenddate,t.dtstartdate,t.dyusid,t.ornm,t.orhm,t.mont,t.yhamnt,t.zfmont,t.ischupiao,t.notea,c.corpname,c.lname,dy.password,su.szinnername as szregionalname,m.isjl as isjl,m.zfusid as zfusid,m.zffs as zffs,v5.pmva as strzffs,es.szscenicname,t.ornote1,t.ornote2,t.ornote3,t.ornote4,t.ornote5,t.ornote6,t.ornote7,t.ornote8,t.ornote9,t.ornote10,c.note2 as jsfz from T_order t left outer join Galsourceregiontab su on su.iregionalid=t.iregionalid left outer join custom dy on dy.usid=t.dyusid and dy.status='01',custom c,m_order m,sysparv5 v5,Esbscenicareatab es where  ( upper(trim(orhm))='"
		/*String sql = " select CASt(t.orid as varchar(17)) as orid,t.iscenicid,t.usid,t.ibusinessid,t.sztravelbillno,t.iregionalid,t.tdlx,cast(t.ddzt as varchar(2)) as ddzt,t.dtenddate,t.dtstartdate,t.dyusid,t.ornm,t.orhm,t.orzj,t.orph,t.mont,t.yhamnt,t.zfmont,t.ischupiao,t.notea,c.corpname,c.lname,dy.password,su.szinnername as szregionalname,m.isjl as isjl,m.zfusid as zfusid,m.zffs as zffs,v5.pmva as strzffs,es.szscenicname,t.ornote1,t.ornote2,t.ornote3,t.ornote4,t.ornote5,t.ornote6,t.ornote7,t.ornote8,t.ornote9,t.ornote10,c.lgtp,c.note2 as jsfz,m.note,c.note6 from T_order t  left outer join Galsourceregiontab su on su.iregionalid=t.iregionalid left outer join custom dy on dy.usid=t.dyusid and dy.status='01',custom c,m_order m,sysparv5 v5,Esbscenicareatab es where  ( upper(trim(orhm))='"
				+ carno.toUpperCase() + "' or CASt(t.orid as varchar(17))='" + carno + "' or t.ornote4='" + carno
				// lizhaodong 添加手机号搜索 2017-5-11 开始
				+ "' or t.orph='" + carno
				// lizhaodong 添加手机号搜索 2017-5-11 结束
				+ "' )  and ( t.ddzt='02' or( t.ddzt='00' and (m.zffs='05' or m.zffs='09')))  and m.orid=t.orid " + msql
				+ "  and c.usid=t.usid and m.zffs=v5.pmcd and v5.pmky='ZFFS' and es.iscenicid=t.iscenicid order by orid desc";
        List<Map> list = new ArrayList();
        LOGGER.debug("sql=" + sql);
        try {
            list = timeSharingDao.findBySqlToMap(sql);
        } catch (Exception e) {
            e.printStackTrace();
        }*/
        try {
			List<Map> list = ecService.getOrderListInfo(carno, msql);
			resultBean = MapToResultBean.toResultBean(list);
		} catch (Exception e) {
			LOGGER.error("窗口查询网上订单异常："+StringUtil.toString_02(e));
			resultBean.setColumnCount(1);
			resultBean.setColumnNames(new String[] {"returnstats", "message" });
			resultBean.addRow(new String[] {"false","查询网上订单信息失败"});
		}
        return resultBean;
    }

    public ResultBean getT_orderByWin(String carno, Long iscenicid, Long winid) {
    	ResultBean resultBean;
        // 从后台参数获取 是否允许提前出票 是否允许过期出票 参数值
        String start = Tools.getDays();
        String msql = "";
        try {
            Sysparv5 sys1 = (Sysparv5) this.timeSharingDao.find(
                    " from Sysparv5 where id.pmky='SFGQ' and id.pmcd='1' ")
                    .get(0); // 是否允许过期出票
            Sysparv5 sys2 = (Sysparv5) this.timeSharingDao.find(
                    " from Sysparv5 where id.pmky='SFYX' and id.pmcd='1' ")
                    .get(0); // 是否允许提前出票

            if (sys1.getPmva().equals("1")){//0:允许，1:不允许
                msql =msql+ " and t.dtenddate>='" + start + "' ";
            }
            if (sys2.getPmva().equals("1")){//0:允许，1:不允许
                msql =msql+ " and t.dtstartdate<='" + start + "' ";
            }
        } catch (Exception e) {
            System.out
                    .println("如果想控制过期票以及是否提前出票请检查： Sysparv5 中 KEY SFGQ 及  SFYX PMCD = 0 表示允许1不允许");
            msql = "";
        }
        if (iscenicid != 0) {
            msql = msql + " and t.iscenicid=" + iscenicid;
        }
       //String sql = " select CASt(t.orid as varchar(17)) as orid,t.iscenicid,t.usid,t.ibusinessid,t.sztravelbillno,t.iregionalid,t.tdlx,cast(t.ddzt as varchar(2)) as ddzt,t.dtenddate,t.dtstartdate,t.dyusid,t.ornm,t.orhm,t.mont,t.yhamnt,t.zfmont,t.ischupiao,t.notea,c.corpname,c.lname,dy.password,su.szinnername as szregionalname,m.isjl as isjl,m.zfusid as zfusid,m.zffs as zffs,v5.pmva as strzffs,es.szscenicname,t.ornote1,t.ornote2,t.ornote3,t.ornote4,t.ornote5,t.ornote6,t.ornote7,t.ornote8,t.ornote9,t.ornote10,c.note2 as jsfz from T_order t left outer join Galsourceregiontab su on su.iregionalid=t.iregionalid left outer join custom dy on dy.usid=t.dyusid and dy.status='01',custom c,m_order m,sysparv5 v5,Esbscenicareatab es where  ( upper(trim(orhm))='"
      //lizhaodong 2017-4-12 添加了返回查询列表时的身份证类别和游客类别以及领票人手机号相关字段
      String sql = " select CASt(t.orid as varchar(17)) as orid,t.iscenicid,t.usid,t.ibusinessid,t.sztravelbillno,t.iregionalid,t.tdlx,cast(t.ddzt as varchar(2)) as ddzt,t.dtenddate,t.dtstartdate,t.dyusid,t.ornm,t.orhm,t.orzj,t.orph,t.mont,t.yhamnt,t.zfmont,t.ischupiao,t.notea,c.corpname,c.lname,dy.password,su.szinnername as szregionalname,m.isjl as isjl,m.zfusid as zfusid,m.zffs as zffs,v5.pmva as strzffs,es.szscenicname,t.ornote1,t.ornote2,t.ornote3,t.ornote4,t.ornote5,t.ornote6,t.ornote7,t.ornote8,t.ornote9,t.ornote10,c.lgtp,c.note2 as jsfz,m.note from T_order t  left outer join Galsourceregiontab su on su.iregionalid=t.iregionalid left outer join custom dy on dy.usid=t.dyusid and dy.status='01',custom c,m_order m,sysparv5 v5,Esbscenicareatab es where  ( upper(trim(orhm))='"
        		+ carno.toUpperCase()
                + "' or CASt(t.orid as varchar(17))='"
                + carno
                + "' or t.ornote4='"
                + carno
                //lizhaodong 添加手机号搜索 2017-5-11  开始
                + "'  or t.orph='"
                + carno
                //lizhaodong 添加手机号搜索 2017-5-11  结束
                + "' )  and ( t.ddzt='02' or( t.ddzt='00' and (m.zffs='05' or m.zffs='09')))  and m.orid=t.orid "
                + msql
                //lizhaodong 新加旅游卡过滤
                + " and (m.ordersource is null or m.ordersource!='lykgp') "
                //lizhaodong 新加门票服务商过滤
                + " and es.scenictype='01' "
                + "  and c.usid=t.usid and m.zffs=v5.pmcd and v5.pmky='ZFFS' and es.iscenicid=t.iscenicid order by orid desc";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMap(sql);
        } catch (Exception e) {
            e.printStackTrace();
        }
        Sysparv5 sys = (Sysparv5) this.timeSharingDao.get(Sysparv5.class,
                new Sysparv5Id("DDKZ", "0001"));
        if (sys != null && sys.getIsvalue() == 1) {
            if (list != null && !list.isEmpty()) {
                // 查询窗口销售权限
                String winlimitsql = "select new map(o.icrowdkindpriceid as icrowdkindpriceid) from Ospticketwinlimitstab o where o.iticketwinid = "
                        + winid;
                List priceList = this.timeSharingDao.find(winlimitsql);
                StringBuffer priceid = new StringBuffer();
                if (priceList != null && !priceList.isEmpty()) {
                    for (int i = 0; i < priceList.size(); i++) {
                        Map map = (Map) priceList.get(i);
                        Long price = Long.parseLong(map
                                .get("icrowdkindpriceid").toString());
                        if (i == priceList.size() - 1) {
                            priceid.append(price);
                        } else {
                            priceid.append(price + ",");
                        }
                    }
                }
                if (priceid.toString() != null
                        && !"".equals(priceid.toString())) {
                    for (int i = 0; i < list.size(); i++) {
                        Map map = list.get(i);
                        String tsql = "select new map(tl.id.orid as orid,tl.id.iscenicid as iscenicid) from TOrderlist tl where tl.id.orid = '"
                                + map.get("ORID").toString()
                                + "' and tl.id.iscenicid = "
                                + Long.parseLong(map.get("ISCENICID")
                                .toString())
                                + " and tl.icrowdkindpriceid not in ("
                                + priceid.toString() + ") ";
                        List tlist = this.timeSharingDao.find(tsql);
                        if (tlist != null && !tlist.isEmpty()) {
                            list.remove(i);
                            i--;
                        }
                    }
                } else {
                    list = new ArrayList();
                }

            }
        }
        boolean sd = true;
        Sysparv5 sysparv5 = (Sysparv5) this.timeSharingDao.get(Sysparv5.class,new Sysparv5Id("DDSD","****"));
        if(sysparv5 != null && sysparv5.getIsvalue() == 0){
            sd = false;
        }
        if(sd){
            //当线下获取订单数据时，锁定订单状态，订单网上不允许操作，需后台解锁后才能允许继续修改
            if(list != null && !list.isEmpty()){
                for(int i = 0;i < list.size();i ++){
                    Map map = list.get(i);
                    String orid = map.get("ORID").toString();
                    String scenicid = map.get("ISCENICID").toString();
                    TOrder torder = (TOrder) this.timeSharingDao.get(TOrder.class, new TOrderId(orid, Long.parseLong(scenicid)));
                    if(torder != null){
                        torder.setIschupiao(1L);
                        this.timeSharingDao.update(torder);
                    }
                    //替换价格分组
                    String usid = map.get("USID").toString();
                    String jgfz = searchJgfz(usid,Long.parseLong(scenicid));
                    map.put("JSFZ",jgfz);
                }
            }
        }
        resultBean= MapToResultBean.toResultBean(list);
        return resultBean;
    }

    public ResultBean getT_orderauto(String carno, Long iscenicid) {
        // 从后台参数获取 是否允许提前出票 是否允许过期出票 参数值
        String start = Tools.getDays();
        String msql = "";
        System.out.println("------->>>>>>>>>sql：1");

        System.out.println("------->>>>>>>>>sql：2");
        try {
            Sysparv5 sys1 = (Sysparv5) this.timeSharingDao.find(
                    " from Sysparv5 where id.pmky='SFGQ' and id.pmcd='1' ")
                    .get(0); // 是否允许过期出票
            Sysparv5 sys2 = (Sysparv5) this.timeSharingDao.find(
                    " from Sysparv5 where id.pmky='SFYX' and id.pmcd='1' ")
                    .get(0); // 是否允许提前出票

            if (sys1.getPmva().equals("1")){//0:允许，1:不允许
                msql =msql+ " and t.dtenddate>='" + start + "' ";
            }
            if (sys2.getPmva().equals("1")){//0:允许，1:不允许
                msql =msql+ " and t.dtstartdate<='" + start + "' ";
            }
        } catch (Exception e) {
            System.out
                    .println("如果想控制过期票以及是否提前出票请检查： Sysparv5 中 KEY SFGQ 及  SFYX PMCD = 1 表示允许0不允许");
            msql = "";
        }
        if (iscenicid != 0) {
            msql = msql + " and t.iscenicid=" + iscenicid;
        }
        String sql = " select CASt(t.orid as varchar(17)) as orid,t.iscenicid,t.usid,t.ibusinessid,t.sztravelbillno,t.iregionalid,t.tdlx,cast(t.ddzt as varchar(2)) as ddzt,t.dtenddate,t.dtstartdate,t.dyusid,t.ornm,t.orhm,t.mont,t.yhamnt,t.zfmont,t.ischupiao,t.notea,c.corpname,c.lname,dy.password,su.szinnername as szregionalname,m.isjl as isjl,m.zfusid as zfusid,m.zffs as zffs,v5.pmva as strzffs,es.szscenicname,t.ornote1,t.ornote2,t.ornote3,t.ornote4,t.ornote5,t.ornote6,t.ornote7,t.ornote8,t.ornote9,t.ornote10,c.note2 as jsfz from T_order t left outer join Galsourceregiontab su on su.iregionalid=t.iregionalid left outer join custom dy on dy.usid=t.dyusid and dy.status='01',custom c,m_order m,sysparv5 v5,Esbscenicareatab es where  ( upper(trim(orhm))='"
                + carno.toUpperCase()
                + "' or CASt(t.orid as varchar(17))='"
                + carno
                + "' )  and  t.ddzt='02'   and m.orid=t.orid "
                + msql
                + "  and c.usid=t.usid and m.zffs=v5.pmcd and v5.pmky='ZFFS' and es.iscenicid=t.iscenicid order by orid desc";
        List<Map> list = new ArrayList();
        System.out.println("sql=" + sql);
        try {
            list = timeSharingDao.findBySqlToMap(sql);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return MapToResultBean.toResultBean(list);
    }

    public ResultBean getT_orderbyorid(String orid, Long iscenicid) {
        String sql = "select CASt(y.orid as varchar(17)) as orid,y.iscenicid,y.usid,y.ibusinessid,y.sztravelbillno,y.iregionalid,y.tdlx,cast(y.ddzt as varchar(2)) as ddzt,y.dtenddate,y.dtstartdate,y.dyusid,y.ornm,y.orhm,y.mont,0 as ischupiao,y.yhamnt,y.zfmont,nvl(y.tpmont,0) as tpmont,y.mont-nvl(y.tpmont,0) as sfmont,nvl(y.tpsx,0) as tpsx,y.notea,c.corpname,c.lname,dy.password,su.szinnername as szregionalname,m.zfusid as zfusid,m.isjl as isjl,m.zffs as zffs,v5.pmva as strzffs,es.szscenicname,t.ornote1,t.ornote2,t.ornote3,t.ornote4,t.ornote5,t.ornote6,t.ornote7,t.ornote8,t.ornote9,t.ornote10,c.note2 as jsfz from Y_order y left outer join Galsourceregiontab su on su.iregionalid=y.iregionalid left outer join custom dy on dy.usid=y.dyusid and dy.status='01',custom c,m_order m,sysparv5 v5,Esbscenicareatab es,T_order t where   CASt(y.orid as varchar(17))='"
                + orid
                + "'   and t.iscenicid="
                + iscenicid
                + " and m.orid=y.orid and c.usid=y.usid and m.zffs=v5.pmcd and v5.pmky='ZFFS' and es.iscenicid=y.iscenicid and t.iscenicid=y.iscenicid and t.orid=y.orid order by iscenicid ";

        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMap(sql);

        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(list);
    }

    public ResultBean getM_orderzfusidstdt(String orid) {
        String sql = " select CASt(t.orid as varchar(17)) as orid,m.zfusid as zfusid,m.stdt from m_order m where   CASt(m.orid as varchar(17))=?";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMap(sql, orid);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(list);
    }

    public ResultBean updatecptdorder(String productcontrols, String orid,
                                      Long iscenicid, double tpmont, double tpsx, String zfusid,
                                      String neworid, String mo, String yo, String to, String tl,
                                      String tzl) throws Exception {
        ResultBean rs = new ResultBean();
        try {
            System.out.println("savetuiding1");
            rs.setColumnCount(2);
            rs.setColumnNames(new String[] { "returnstats", "message" });
            String returnstats = "";
            String message = "";
            System.out.println("productcontrols=" + productcontrols);
            if (productcontrols != null && !productcontrols.equals("")) {
                String[] productcontrol = productcontrols.split(":");
                List plist = new ArrayList();
                for (int i = 0; i < productcontrol.length; i++) {
                    String[] control = productcontrol[i].split("&");
                    Long itickettypeid = new Long(control[0]);
                    String controltype = control[1];
                    Long tripid = new Long(control[2]);
                    String stdata = control[3];
                    Long soldnumber = new Long(control[4]);
                    Productcontrol p = new Productcontrol();
                    p.setItickettypeid(itickettypeid);
                    p.setControltype(controltype);
                    p.setTripid(tripid);
                    p.setStdata(stdata);
                    p.setSoldnumber(soldnumber);
                    String hsql = " from Productcontrol where itickettypeid="
                            + p.getItickettypeid() + " and tripid="
                            + p.getTripid() + " and stdata='" + p.getStdata()
                            + "' and controltype='03'";
                    List pplist = timeSharingDao.find(hsql);
                    if (pplist != null && pplist.size() > 0) {
                        Productcontrol p1 = (Productcontrol) pplist.get(0);
                        if (p1.getBystate() == -1) {
                            throw new RuntimeException("确认停排的竹筏票不能在出票口退订");
                        }
                        p1.setSoldnumber(p1.getSoldnumber() - p.getSoldnumber());
                        timeSharingDao.update(p1);
                    }
                }

            }
            System.out.println("savetuiding2");
            MOrder m = (MOrder) timeSharingDao.get(MOrder.class, orid);
            if (m.getTpmont() != null) {
                m.setTpmont(m.getTpmont() + tpmont + tpsx);
            } else {
                m.setTpmont(tpmont + tpsx);
            }
            if (m.getTpsx() != null) {

                m.setTpsx(m.getTpsx() + tpsx);
            } else {
                m.setTpsx(tpsx);
            }
            m.setIsj(new Long(1));
            timeSharingDao.update(m);
            YOrder y = (YOrder) timeSharingDao.get(YOrder.class, new YOrderId(orid,
                    iscenicid));
            if (y.getTpmont() != null) {
                y.setTpmont(y.getTpmont() + tpmont + tpsx);
            } else {
                y.setTpmont(tpmont + tpsx);
            }
            if (y.getTpsx() != null) {
                y.setTpsx(y.getTpsx() + tpsx);
            } else {
                y.setTpsx(tpsx);
            }
            y.setIsj(new Long(1));
            timeSharingDao.update(y);
            if(!orid.substring(8,11).equals("888") && !orid.substring(8,11).equals("999")){
                saveUseryfk(zfusid, neworid, 1, "02", tpmont, tpsx, "出票口出票退订");
            }

            MOrder morder = new MOrder();
            String morders[] = mo.split("&");
            morder.setOrid(morders[0]);
            morder.setOrtp(morders[1]);// 退订单
            morder.setOrda(morders[2]);
            morder.setOrti(morders[3]);
            morder.setUsid(morders[4]);
            morder.setIsjl(new Long(morders[5]));
            morder.setYhamnt(new Double(morders[6]));
            morder.setMont(new Double(morders[7]));
            morder.setZfmont(new Double(morders[8]));
            morder.setDdzt(morders[9]);
            morder.setIsallcp(new Long(morders[10]));
            morder.setZfusid(morders[11]);
            morder.setTpsx(new Double(morders[12]));
            morder.setTpmont(new Double(morders[13]));
            morder.setTpfs(morders[14]);// 出票后退订
            morder.setSrid(morders[15]);
            morder.setIsc(new Long(morders[16]));

            morder.setTpdate(morders[17]);

            morder.setBankdata(morders[18]);

            morder.setBanktime(morders[19]);

            morder.setNotef(morders[20]);

            morder.setIse(new Long(morders[21]));

            morder.setStdt(morders[22]);

            morder.setIsj(new Long(morders[23]));

            timeSharingDao.save(morder);

            System.out.println("savetuiding3");
            String yorders[] = yo.split("&");
            YOrder yorder = new YOrder();
            YOrderId yid = new YOrderId();
            yid.setOrid(yorders[0]);
            yid.setIscenicid(new Long(yorders[1]));
            yorder.setId(yid);
            yorder.setScenictype(yorders[2]);
            yorder.setDdzt(yorders[3]);
            yorder.setUsid(yorders[4]);
            yorder.setIbusinessid(new Long(yorders[5]));
            yorder.setDtstartdate(yorders[6]);
            yorder.setDtenddate(yorders[7]);
            yorder.setOrhm(yorders[8]);
            yorder.setOrnm(yorders[9]);
            yorder.setOrph(yorders[10]);
            yorder.setOrzj(yorders[11]);
            yorder.setMont(new Double(yorders[12]));
            yorder.setZfmont(new Double(yorders[13]));
            yorder.setYhamnt(new Double(yorders[14]));
            yorder.setTpsx(new Double(yorders[15]));
            yorder.setTpmont(new Double(yorders[16]));
            yorder.setTpdate(yorders[17]);
            yorder.setTpfs(yorders[18]);// 出票后退订
            yorder.setIsc(new Long(yorders[19]));
            yorder.setFempid(yorders[20]);
            yorder.setIse(new Long(yorders[21]));
            yorder.setNoteb(yorders[22]);
            yorder.setNotef(yorders[23]);

            yorder.setIsj(new Long(yorders[24]));
            timeSharingDao.save(yorder);

            System.out.println("savetuiding4");
            String torders[] = to.split("&");
            TOrder tdorder = new TOrder();
            TOrderId tid = new TOrderId();
            tid.setOrid(torders[0]);
            tid.setIscenicid(new Long(torders[1]));
            tdorder.setId(tid);
            tdorder.setScenictype(torders[2]);
            tdorder.setOrfl(torders[3]);
            tdorder.setDdzt(torders[4]);
            tdorder.setIregionalid(new Long(torders[5]));
            tdorder.setUsid(torders[6]);
            tdorder.setIbusinessid(new Long(torders[7]));
            tdorder.setDtstartdate(torders[8]);
            tdorder.setDtenddate(torders[9]);
            tdorder.setOrhm(torders[10]);
            tdorder.setOrnm(torders[11]);
            tdorder.setOrph(torders[12]);
            tdorder.setOrzj(torders[13]);

            tdorder.setMont(new Double(torders[14]));
            tdorder.setZfmont(new Double(torders[15]));
            tdorder.setYhamnt(new Double(torders[16]));
            tdorder.setIsc(new Long(torders[17]));
            tdorder.setNotec(torders[18]);
            tdorder.setIsj(new Long(torders[19]));
            tdorder.setNotej(torders[20]);
            tdorder.setFempid(torders[21]);
            tdorder.setNoteb(torders[22]);
            tdorder.setNotef(torders[23]);
            timeSharingDao.save(tdorder);
            System.out.println("savetuiding5");
            float yjifen = 0;
            float njifen = 0;
            String tlist[] = tl.split("[|]");
            for (int i = 0; i < tlist.length; i++) {
                String torderlists[] = tlist[i].split("&");
                YOrderlist yorderlist = new YOrderlist();
                YOrderlistId ylid = new YOrderlistId();
                ylid.setOrid(torderlists[0]);
                ylid.setOrderlistid(new Long(torderlists[1]));
                ylid.setIscenicid(new Long(torderlists[2]));
                yorderlist.setId(ylid);
                yorderlist.setItickettypeid(new Long(torderlists[3]));
                yorderlist.setIcrowdkindpriceid(new Long(torderlists[4]));
                yorderlist.setIcrowdkindid(new Long(torderlists[5]));
                yorderlist.setDtstartdate(torderlists[6]);
                yorderlist.setDtenddate(torderlists[7]);
                yorderlist.setNumb(new Long(torderlists[8]));
                yorderlist.setPric(new Double(torderlists[9]));
                yorderlist.setAmnt(new Double(torderlists[10]));
                yorderlist.setMhandcharge(new Double(torderlists[11]));
                yorderlist.setYhnumb(new Long(torderlists[12]));
                yorderlist.setYhamnt(new Double(torderlists[13]));
                timeSharingDao.save(yorderlist);
                TOrderlist torderlist = new TOrderlist();
                TOrderlistId tlid = new TOrderlistId();

                tlid.setOrid(torderlists[0]);
                tlid.setOrderlistid(new Long(torderlists[1]));
                tlid.setIscenicid(new Long(torderlists[2]));
                torderlist.setId(tlid);
                torderlist.setItickettypeid(new Long(torderlists[3]));
                torderlist.setIcrowdkindpriceid(new Long(torderlists[4]));
                torderlist.setIcrowdkindid(new Long(torderlists[5]));
                torderlist.setDtstartdate(torderlists[6]);
                torderlist.setDtenddate(torderlists[7]);
                torderlist.setNumb(new Long(torderlists[8]));
                torderlist.setPric(new Double(torderlists[9]));
                torderlist.setAmnt(new Double(torderlists[10]));
                torderlist.setMhandcharge(new Double(torderlists[11]));
                torderlist.setYhnumb(new Long(torderlists[12]));
                torderlist.setYhamnt(new Double(torderlists[13]));
                torderlist.setIsj(new Long(torderlists[14]));
                timeSharingDao.save(torderlist);
                if (m.getIsjl() == 1) {
                    // 查询原来orderlist里面的积分规则
                    List ytl = timeSharingDao
                            .find("from TOrderlist where id.orid='"
                                    + m.getOrid() + "' and id.iscenicid="
                                    + torderlist.getId().getIscenicid()
                                    + " and itickettypeid="
                                    + torderlist.getItickettypeid()
                                    + " and icrowdkindpriceid="
                                    + torderlist.getIcrowdkindpriceid()
                                    + " and dtstartdate='"
                                    + torderlist.getDtstartdate()
                                    + "' and dtenddate='"
                                    + torderlist.getDtenddate() + "'");
                    TOrderlist yt = (TOrderlist) ytl.get(0);
                    yjifen = yjifen + (yt.getIsi() / yt.getNumb())
                            * torderlist.getNumb();
                    njifen = njifen + (yt.getIsh() / yt.getNumb())
                            * torderlist.getNumb();
                }

            }
            String tzlists[] = tzl.split("[|]");
            for (int i = 0; i < tzlists.length; i++) {
                System.out.println("tzlists" + tzlists[i]);
                String tzorderlists[] = tzlists[i].split("&");

                YZorderlist yzlist = new YZorderlist();
                YZorderlistId yzid = new YZorderlistId();

                yzid.setOrid(tzorderlists[0]);
                yzid.setOrderlistid(new Long(tzorderlists[1]));

                yzid.setIscenicid(new Long(tzorderlists[2]));
                yzid.setZorderlistid(new Long(tzorderlists[3]));

                yzlist.setId(yzid);
                yzlist.setIcrowdkindpriceid(new Long(tzorderlists[4]));
                yzlist.setIcrowdkindid(new Long(tzorderlists[5]));
                yzlist.setDtstartdate(tzorderlists[6]);
                yzlist.setDtenddate(tzorderlists[7]);
                yzlist.setItickettypeid(new Long(tzorderlists[8]));
                yzlist.setIztickettypeid(new Long(tzorderlists[9]));
                yzlist.setIvenueid(new Long(tzorderlists[10]));
                yzlist.setIvenueareaid(new Long(tzorderlists[11]));
                yzlist.setIvenueseatsid(new Long(tzorderlists[12]));
                yzlist.setTripid(new Long(tzorderlists[13]));

                yzlist.setZpric(new Double(tzorderlists[14]));

                yzlist.setZamnt(new Double(tzorderlists[15]));

                yzlist.setZnumb(new Long(tzorderlists[16]));
                yzlist.setZyhnumb(new Long(tzorderlists[17]));
                yzlist.setZyhamnt(new Double(tzorderlists[18]));
                yzlist.setSqnumber(new Long(tzorderlists[19]));
                yzlist.setMhandcharge(new Double(tzorderlists[21]));
                yzlist.setTdfl(new Double(tzorderlists[22]));

                yzlist.setIse(new Long(tzorderlists[23]));
                System.out
                        .println("tzorderlists.length=" + tzorderlists.length);
                timeSharingDao.save(yzlist);
                // 保存seatyordertab

                if (tzorderlists.length >= 25) {
                    System.out.println("tzorderlists[24]=" + tzorderlists[24]);
                    if (!tzorderlists[24].equals("")) {
                        String seats = tzorderlists[24];
                        String[] seatids = seats.split("#");

                        for (int a = 0; a < seatids.length; a++) {
                            Seatyordertab ys = new Seatyordertab();
                            SeatyordertabId ysid = new SeatyordertabId();
                            ysid.setOrderlistid(yzlist.getId().getOrderlistid());
                            ysid.setOrid(yzlist.getId().getOrid());
                            ysid.setIscenicid(yzlist.getId().getIscenicid());
                            ysid.setZorderlistid(yzlist.getId()
                                    .getZorderlistid());
                            ysid.setSeq(new Long(a + 1));
                            ys.setId(ysid);
                            ys.setIprogramid(yzlist.getIvenueseatsid());
                            ys.setItripid(yzlist.getTripid());
                            ys.setItripprdcontrolid(yzlist.getIse());
                            ys.setIvenueid(yzlist.getIvenueid());
                            ys.setIvenueareaid(yzlist.getIvenueareaid());
                            ys.setStartdate(yzlist.getDtstartdate().substring(
                                    0, 10));
                            ys.setDtmakedate(Tools.getDayTimes());
                            ys.setIseatid(new Long(seatids[a]));

                            ys.setIsvalid(1L);
                            timeSharingDao.save(ys);
                            // 退订删除座位状态数据
                            List seatorderlist = timeSharingDao
                                    .find(" from Seatordertab where id.orid='"
                                            + morder.getSrid()
                                            + "' and id.iscenicid="
                                            + yzlist.getId().getIscenicid()
                                            + " and itripprdcontrolid="
                                            + ys.getItripprdcontrolid()
                                            + " and iprogramid="
                                            + ys.getIprogramid()
                                            + " and iseatid="
                                            + ys.getIseatid()
                                            + " and itripid="
                                            + ys.getItripid()
                                            + " and substr(startdate,1,10)='"
                                            + ys.getStartdate()
                                            .substring(0, 10) + "'");

                            Seatordertab s = (Seatordertab) seatorderlist
                                    .get(0);
                            s.setIsvalid(-1L);
                            timeSharingDao.update(s);
                            System.out.println("开始删除Seatstatustab");
                            SeatstatustabId ststid = new SeatstatustabId();
                            ststid.setIvenueid(ys.getIvenueid());
                            ststid.setIvenueareaid(ys.getIvenueareaid());
                            ststid.setItripid(ys.getItripid());
                            ststid.setIseatid(ys.getIseatid());
                            ststid.setStartdate(ys.getStartdate().substring(0,
                                    10));

                            Seatstatustab stst = (Seatstatustab) timeSharingDao
                                    .get(Seatstatustab.class, ststid);

                            timeSharingDao.delete(stst);
                            System.out.println("开始删除Seatstatustab成功");
                        }
                    }
                }
                System.out.println("savetuiding7");
                TZorderlist tzlist = new TZorderlist();
                TZorderlistId tzid = new TZorderlistId();
                tzid.setOrid(tzorderlists[0]);
                tzid.setOrderlistid(new Long(tzorderlists[1]));
                tzid.setIscenicid(new Long(tzorderlists[2]));
                tzid.setZorderlistid(new Long(tzorderlists[3]));
                tzlist.setId(tzid);
                tzlist.setIcrowdkindpriceid(new Long(tzorderlists[4]));
                tzlist.setIcrowdkindid(new Long(tzorderlists[5]));
                tzlist.setDtstartdate(tzorderlists[6]);
                tzlist.setDtenddate(tzorderlists[7]);
                tzlist.setItickettypeid(new Long(tzorderlists[8]));
                tzlist.setIztickettypeid(new Long(tzorderlists[9]));
                tzlist.setIvenueid(new Long(tzorderlists[10]));
                tzlist.setIvenueareaid(new Long(tzorderlists[11]));
                tzlist.setIvenueseatsid(new Long(tzorderlists[12]));
                tzlist.setTripid(new Long(tzorderlists[13]));
                tzlist.setZpric(new Double(tzorderlists[14]));
                tzlist.setZamnt(new Double(tzorderlists[15]));
                tzlist.setZnumb(new Long(tzorderlists[16]));
                tzlist.setZyhnumb(new Long(tzorderlists[17]));
                tzlist.setZyhamnt(new Double(tzorderlists[18]));
                tzlist.setSqnumber(new Long(tzorderlists[19]));
                tzlist.setIsj(new Long(tzorderlists[20]));
                tzlist.setIse(new Long(tzorderlists[23]));
                timeSharingDao.save(tzlist);

            }
            if(!orid.substring(8,11).equals("888") && !orid.substring(8,11).equals("999")){
                if (yjifen > 0) {
                    // 读取用户的分社
                    String fusid = "";
                    Custom c = (Custom) timeSharingDao.get(Custom.class, m.getUsid());

                    if (c.getUsqx().substring(0, 4).equals("0111")) {
                        fusid = c.getSusid();
                    } else {
                        fusid = c.getUsid();
                    }
                    List jflist = timeSharingDao.find(" from Usernumjf where usid='"
                            + fusid + "' and stdt<='" + m.getStdt()
                            + "' and etdt>='" + m.getStdt() + "' and iscenicid="
                            + tdorder.getId().getIscenicid() + " and jflb=1");
                    Usernumjf ujf = (Usernumjf) jflist.get(0);
                    ujf.setYpoint(ujf.getYpoint() - yjifen);
                    timeSharingDao.update(ujf);

                    UsernumjflistId yuid = new UsernumjflistId();
                    yuid.setOrid(y.getId().getOrid());
                    yuid.setUsid(fusid);
                    Usernumjflist yujflist = (Usernumjflist) timeSharingDao.get(
                            Usernumjflist.class, yuid);
                    Usernumjflist ujflist = new Usernumjflist();
                    UsernumjflistId uid = new UsernumjflistId();
                    uid.setOrid(tdorder.getId().getOrid());
                    uid.setUsid(fusid);
                    ujflist.setId(uid);
                    ujflist.setNid(yujflist.getNid());
                    ujflist.setIsvalid(new BigDecimal(1));
                    ujflist.setIscenicid(yujflist.getIscenicid());
                    ujflist.setJflb(new BigDecimal(1));
                    ujflist.setItickettypeid(yujflist.getItickettypeid());
                    ujflist.setItickettypeid2(yujflist.getItickettypeid2());
                    ujflist.setPoint(new Double(yjifen));
                    ujflist.setStdt(Tools.getTodayString());
                    ujflist.setEtdt(Tools.getTodayString());
                    ujflist.setStdt2(Tools.getTodayString());
                    ujflist.setJftp("03");
                    ujflist.setZusid(fusid);
                    timeSharingDao.save(ujflist);
                }
                if (njifen > 0) {
                    // 读取用户的分社
                    String fusid = "";
                    Custom c = (Custom) timeSharingDao.get(Custom.class, m.getUsid());

                    if (c.getUsqx().substring(0, 4).equals("0111")) {
                        fusid = c.getSusid();
                    } else {
                        fusid = c.getUsid();
                    }
                    List jflist = timeSharingDao.find(" from Usernumjf where usid='"
                            + fusid + "' and stdt<='" + m.getStdt()
                            + "' and etdt>='" + m.getStdt() + "' and iscenicid="
                            + tdorder.getId().getIscenicid() + " and jflb=2");
                    Usernumjf ujf = (Usernumjf) jflist.get(0);
                    ujf.setYpoint(ujf.getYpoint() - njifen);
                    timeSharingDao.update(ujf);

                    UsernumjflistId yuid = new UsernumjflistId();
                    yuid.setOrid(y.getId().getOrid());
                    yuid.setUsid(fusid);
                    Usernumjflist yujflist = (Usernumjflist) timeSharingDao.get(
                            Usernumjflist.class, yuid);
                    Usernumjflist ujflist = new Usernumjflist();
                    UsernumjflistId uid = new UsernumjflistId();
                    uid.setOrid(tdorder.getId().getOrid());
                    uid.setUsid(fusid);
                    ujflist.setId(uid);
                    ujflist.setNid(yujflist.getNid());
                    ujflist.setIsvalid(new BigDecimal(1));
                    ujflist.setIscenicid(yujflist.getIscenicid());
                    ujflist.setJflb(new BigDecimal(1));
                    ujflist.setItickettypeid(yujflist.getItickettypeid());
                    ujflist.setItickettypeid2(yujflist.getItickettypeid2());
                    ujflist.setPoint(new Double(njifen));
                    ujflist.setStdt(Tools.getTodayString());
                    ujflist.setEtdt(Tools.getTodayString());
                    ujflist.setStdt2(Tools.getTodayString());
                    ujflist.setJftp("04");
                    ujflist.setZusid(fusid);
                    timeSharingDao.save(ujflist);

                }
                this.addOrderLog(morder.getOrid(), iscenicid, morder.getIsc(),
                        morder.getSrid());

            }
            if(!orid.substring(8,11).equals("888") && !orid.substring(8,11).equals("999")){
                boolean hqyt = CommonUtil.isHqyt();
                if(hqyt){
                    HqytClient client = new HqytClient();
                    RefundbillsRequest request = new RefundbillsRequest();
                    request.setId(Long.parseLong(m.getNoteh()));
                    request.setRefundMoney(tpmont);
                    request.setRefundOrid(neworid);
                    request.setReason("出票口出票退订");
                    request.setMemo("退款金额:"+(tpmont+tpsx)+";手续费:"+tpsx);
                    try{
                        JSONRefundBill refundBill = client.refundbills(request);
                        if(refundBill != null){
                            morder.setNoteh(refundBill.getInvoice().getId().toString());
                            timeSharingDao.update(morder);
                        }else{
                            throw new RuntimeException("退订失败:申请退订失败");
                        }
                    }catch (Exception e){
                        throw new RuntimeException("退订失败:"+e.getMessage());
                    }
                }else{
                    saveUseryfk(zfusid, neworid, 1, "02", tpmont, tpsx, "出票口出票退订");
                }
            }
            rs.addRow(new String[] { "true", "成功" });
            return rs;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            throw new RuntimeException("修改预订单数据失败");

        }
    }

    public ResultBean updateT_order(String orid, Long iscenicid,Long iemployeeid, Double mont) {
        ResultBean rs = new ResultBean();
        try {
            rs.setColumnCount(2);
            rs.setColumnNames(new String[] { "returnstats", "message" });
            String returnstats = "";
            String message = "";
            LOGGER.debug("开始更新网上订单状态");
            /*MOrder m = (MOrder) timeSharingDao.get(MOrder.class, orid);
            YOrder yorder = (YOrder) timeSharingDao.get(YOrder.class, new YOrderId(
                    orid, iscenicid));*/
            MOrder m = ecService.getMorderInfo(orid);
            YOrder yorder = ecService.getYOrderInfoById(orid, iscenicid);
            yorder.setNotec(Tools.getNowString());
            yorder.setIsc(iemployeeid);
            // 2014-03-05 lijingrui 修改 网上现场支付订单状态 00 支付方式 05
            if (!m.getDdzt().equals("00") && !m.getZffs().equals("05")) {
                if (!yorder.getDdzt().equals("02")) {
                    rs.addRow(new String[] { "fasle", "订单状态不是已付款状态不允许出票" });
                    return rs;
                }
            }

            yorder.setDdzt("11");
            yorder.setNotec(Tools.getNowString());
            yorder.setIsc(iemployeeid);
            Boolean flag = ecService.updateYOrder(yorder);
            if(!flag) {
            	LOGGER.error("更新YOrder信息失败");
            	throw new RuntimeException("更新YOrder信息失败");
            }
           /* List listtorder = timeSharingDao.find("from TOrder where id.orid='"
                    + orid + "'");*/
            List listtorder = ecService.getTOrderForListByOrid(orid);
            boolean b = true;
            for (int i = 0; i < listtorder.size(); i++) {
                TOrder t = (TOrder) listtorder.get(i);
                if (t.getId().getIscenicid().longValue() == iscenicid
                        .longValue()) {
                    if (t.getZfmont().doubleValue() != mont) {
                        rs.addRow(new String[] { "fasle", "出票金额与订单金额不符" });
                        return rs;
                    }
                    // 2014-03-05 lijingrui 修改 网上现场支付订单状态 00 支付方式 05
                    if (!m.getDdzt().equals("00") && !m.getZffs().equals("05")) {
                        if (!t.getDdzt().equals("02")) {
                            rs.addRow(new String[] { "fasle",
                                    "订单状态不是已付款状态不允许出票" });
                            return rs;
                        }
                    }

                    t.setDdzt("11");
                    t.setNotec(Tools.getNowString());
                    t.setIsc(iemployeeid);
//                    timeSharingDao.update(t);
                    ecService.updateTOrder(t);
                } else {
                    if (t.getDdzt().equals("02")) {
                        b = false;
                    }
                }
            }
            if (b) {
                // 该订单已经全部出票
                if (m.getNotea() != null && m.getNotea().equals("50")) {
                    m.setNotea("51");
                }
                if (m.getNotea() != null && m.getNotea().equals("02")) {
                    m.setNotea("11");
                }
                m.setDdzt("11");
                ecService.updateMOrder(m);
            }
            rs.addRow(new String[] { "true", "成功" });
            return rs;
        } catch (Exception e) {
            LOGGER.error("修改网上订单信息接口异常："+StringUtil.toString_02(e));
            rs.addRow(new String[] { "false", e.getMessage() });
            return rs;
        }
    }

    public ResultBean ChupiaoT_order(String orid, Long iscenicid) {
        String sql = " select CASt(t.orid as varchar(17)) as orid,t.iscenicid,t.scenictype,CASt(t.orfl as varchar(2)) as orfl,t.usid,t.ibusinessid,t.sztravelbillno,t.iregionalid,t.tdlx,CASt(t.ddzt as varchar(2)) as ddzt,t.dtstartdate,t.dtenddate,t.dyusid,t.ornm,t.orzj,t.orhm,t.orph,t.faxno,t.mont,t.yhamnt,t.zfmont,t.youfei,t.isjfjf,t.ischupiao,t.fempid,t.forcedrefund,t.isa,t.isb,t.isc,t.isd,t.ise,t.isf,t.isg,t.ish,t.isi,t.isj,t.notea,t.notej,t.notei,t.noteh,t.noteg,t.notef,t.notee,t.noted,t.notec,t.noteb,t.ornote1,t.ornote2,t.ornote3,t.ornote4,t.ornote5,t.ornote6,t.ornote7,t.ornote8,t.ornote9,t.ornote10,m.orda||' '||m.orti as dtmakedate from T_order t,M_order m where  t.orid=?  and t.iscenicid in (select iscenicid from Esbscenicareatab where (( isjd = 0 and  iparentid =? ) or iscenicid = ?)) and m.orid=t.orid";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMap(sql, orid, iscenicid, iscenicid);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(list);

    }

    public ResultBean ChupiaoT_orderlist(String orid, Long iscenicid) {
        String sql = " select CASt(orid as varchar(17)) as orid,orderlistid,iscenicid,itickettypeid,icrowdkindpriceid,icrowdkindid,dtstartdate,dtenddate,starttime,endtime,pric,numb,yhnumb,amnt,yhamnt,ioffersschemeid,isa,isb,isc,isd,ise,isf,isg,ish,isi,isj,notea,notej,notei,noteh,noteg,notef,notee,noted,notec,noteb,jsprice,'00' as bymaketicketway,'00' as szticketprintno from T_orderlist t where  orid=?  and iscenicid in (select iscenicid from Esbscenicareatab where (( isjd = 0 and  iparentid =? ) or iscenicid = ?)) and numb>0 order by orderlistid";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMap(sql, orid, iscenicid, iscenicid);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

		/*
		 * if (list.size() > 0) { for (Map map : list) {
		 * System.out.println(map); } }
		 */

        return MapToResultBean.toResultBean(list);

    }
    /**
     * 网上订单，线下出票
     */
    public ResultBean ChupiaoT_zorderlist(String orid, Long iscenicid) {
        // 读取子票信息前，对竹筏时间进行更新
    	// 2018-05-24 注释竹筏票逻辑逻辑，系统业务暂无
       /* String hsql = " from TZorderlist where id.orid='"
                + orid
                + "' and id.iscenicid in (select iscenicid from Esbscenicareatab where (( isjd = 0 and  iparentid ="
                + iscenicid + ") or iscenicid = " + iscenicid
                + ")) and tripid>0";
        List zlist = timeSharingDao.find(hsql);
        Long iztickettypeid = new Long(0);
        Long tripid = new Long(0);
        String stdt = "";
        for (int i = 0; i < zlist.size(); i++) {
            System.out.println("t_zorderlist2");
            TZorderlist t = (TZorderlist) zlist.get(i);
            Prdtripvenuemanage p = null;
            if (iztickettypeid != t.getIztickettypeid()
                    || tripid != t.getTripid()
                    || !stdt.equals(t.getDtstartdate().substring(0, 10))) {
                iztickettypeid = t.getIztickettypeid();
                tripid = t.getTripid();
                stdt = t.getDtstartdate().substring(0, 10);
                System.out.println("t_zorderlist3");
                String hsql1 = "from Prdtripvenuemanage where tripid=" + tripid
                        + " and itickettypeid=" + iztickettypeid
                        + " and startdata<='" + stdt + "' and enddata>='"
                        + stdt + "'";
                List plist = timeSharingDao.find(hsql1);
                if (plist != null && plist.size() > 0) {
                    System.out.println("t_zorderlist4");
                    p = (Prdtripvenuemanage) plist.get(0);
                }
            }
            System.out.println("t_zorderlist5");
            if (p != null && p.getStartdata() != null
                    && !p.getStartdata().equals("")) {
                t.setDtstartdate(stdt + " " + p.getStarttime() + ":00");
                t.setDtenddate(stdt + " " + p.getEndtime() + ":00");
                timeSharingDao.update(t);
            }
        }*/
      /*  String sql = " select CASt(orid as varchar(17)) as orid,zorderlistid,orderlistid,orid,iscenicid,icrowdkindpriceid,icrowdkindid,itickettypeid,iztickettypeid,dtstartdate,dtenddate,tripid,ivenueid,ivenueareaid,ivenueseatsid,zpric,znumb,zyhnumb,zyhamnt,zamnt,isa,isb,isc,isd,ise,isf,isg,ish,isi,isj,notea,notej,notei,noteh,noteg,notef,notee,noted,notec,noteb,jsprice from T_zorderlist t where  orid=?  and iscenicid in (select iscenicid from Esbscenicareatab where (( isjd = 0 and  iparentid =? ) or iscenicid = ?)) and znumb>0 order by t.orderlistid,zorderlistid";*/
        List<Map> list = new ArrayList();
        try {
//            list = timeSharingDao.findBySqlToMap(sql, orid, iscenicid, iscenicid);
        	list = ecService.getTZOrderMapListByOrIdAndIscenicid(orid, String.valueOf(iscenicid));
            for (Map map : list) {
                String seats = "";
                if (!map.get("IVENUESEATSID").toString().equals("null")
                        && !map.get("IVENUESEATSID").toString().equals("NULL")
                        && !map.get("IVENUESEATSID").toString().equals("0")) {
                    Long zorderlistid = new Long(map.get("ZORDERLISTID")
                            .toString());
                    Long orderlistid = new Long(map.get("ORDERLISTID")
                            .toString());
                    Long ziscenicid = new Long(map.get("ISCENICID").toString());
                   /* List seatlist = timeSharingDao
                            .find(" from Seatordertab where id.orid='" + orid
                                    + "' and id.orderlistid=" + orderlistid
                                    + " and id.iscenicid=" + ziscenicid
                                    + " and id.zorderlistid=" + zorderlistid);

                    for (int i = 0; i < seatlist.size(); i++) {
                        Seatordertab seat = (Seatordertab) seatlist.get(i);
                        if (i == 0) {
                            seats = seat.getIseatid().toString();
                        } else {
                            seats = seats + ">" + seat.getIseatid().toString();
                        }
                    }*/
                }
                map.put("SEATS", seats);
            }
        } catch (Exception e) {
            LOGGER.error("获取网上订单出票信息异常："+StringUtil.toString_02(e));
        }
        return MapToResultBean.toResultBean(list);
    }

    public ResultBean ChupiaoTRealname(String orid, Long iscenicid) {
        String sql = "select seq,orid,itickettypeid,iscenicid,icrowdkindid,cname,idcard,zjtp,ischild,mbnumber from T_realname where orid='"
                + orid + "' and iscenicid= " + iscenicid;
        List<Map> list = new ArrayList();
        try {
            // System.out.println(sql);
            list = timeSharingDao.findBySqlToMap(sql);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(list);

    }
    
    /**
     * 窗口售票，查询网上订单详细信息
     */
    public ResultBean getT_orderlist(String orid, Long iscenicid) {
//        MOrder morder = (MOrder) timeSharingDao.get(MOrder.class,orid);
        /*TOrder to = (TOrder) timeSharingDao.get(TOrder.class, new TOrderId(orid,iscenicid));
        to.setIschupiao(1L);
        timeSharingDao.save(to);*/
        MOrder morder = ecService.getMorderInfo(orid);
        /*TOrder to = ecService.getTOrderInfo(orid,String.valueOf(iscenicid));
        if(to != null) {
        	//设置订单出票锁定状态
        	to.setIschupiao(1L);
        }
        Boolean flag = ecService.updateTOrder(to);
        if(!flag) {
        	LOGGER.info("修改订单出票锁定状态失败");
        }*/
        /*String sql = " select orderlistid,CASt(t.orid as varchar(17)) as orid,t.iscenicid,t.itickettypeid,t.icrowdkindid,"
        		+ "t.dtstartdate,t.dtenddate,t.icrowdkindpriceid,t.pric,t.numb,t.yhnumb,t.amnt,t.yhamnt,et.sztickettypename,"
        		+ "ew.szcrowdkindname,et.bymaketicketway,et.bymediatype,v5.pmva as strmaketype,v55.pmva as strmediatype,ep.inote1 from t_orderlist t,Edpcrowdkindtab ew,Edmtickettypetab et,sysparv5 v5 ,sysparv5 v55,Edmcrowdkindpricetab ep where  t.orid=? and t.iscenicid in (select iscenicid from Esbscenicareatab where (( isjd = 0 and  iparentid = ? ) or iscenicid = "
                + iscenicid
                + ")) and ew.icrowdkindid=t.icrowdkindid and t.itickettypeid=et.itickettypeid and v5.pmky='CPFS' and v5.pmcd=et.bymaketicketway and v55.pmky='CKFS' and v55.pmcd =et.bymediatype and ep.icrowdkindpriceid=t.icrowdkindpriceid  order by orderlistid";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMap(sql, orid, iscenicid);
        } catch (Exception e) {
            e.printStackTrace();
        }*/
        List<Map> list = ecService.getTOrderListMapInfoByOridAndIscenicid(orid, String.valueOf(iscenicid));
        for (Map map : list) {
            Long orderlistid = Long.valueOf(map.get("orderlistid").toString());
            Long icrowdkindid = Long.valueOf(map.get("icrowdkindid").toString());
            Long itickettypeid = Long.valueOf(map.get("itickettypeid").toString());
            Long icrowdkindpriceid = Long.valueOf(map.get("icrowdkindpriceid").toString());
            
            String sql = "select et.sztickettypename,ew.szcrowdkindname,et.bymaketicketway,et.bymediatype,ep.inote1 "
            			+ "from Edpcrowdkindtab ew,Edmtickettypetab et,Edmcrowdkindpricetab ep "
            			+ "where ew.icrowdkindid = "+icrowdkindid+" and et.itickettypeid = "+itickettypeid+"  and ep.icrowdkindpriceid = "+icrowdkindpriceid;
            List<Map> list1 = new ArrayList();
            StringBuffer zdail = new StringBuffer();
            StringBuffer zdail1 = new StringBuffer();
            try {
	            List<Map> findBySqlToMap = timeSharingDao.findBySqlToMap(sql, new Object[] {});
	            if(findBySqlToMap != null && findBySqlToMap.size() > 0) {
	            	Map map2 = findBySqlToMap.get(0);
	            	map.put("SZTICKETTYPENAME", map2.get("SZTICKETTYPENAME"));
	            	map.put("SZCROWDKINDNAME", map2.get("SZCROWDKINDNAME"));
	            	map.put("BYMAKETICKETWAY", map2.get("BYMAKETICKETWAY"));
	            	map.put("BYMEDIATYPE", map2.get("BYMEDIATYPE"));
	            	map.put("INOTE1", map2.get("INOTE1"));
	            	map.put("STRMAKETYPE", CPFS.getPmvaByPmcd(map2.get("BYMAKETICKETWAY").toString()));
	            	map.put("STRMEDIATYPE", CKFS.getPmvaByPmcd(map2.get("BYMEDIATYPE").toString()));
	            }
	            //et.sztickettypename,zet.sztickettypename as szztickettypename,Edmtickettypetab et
	            /*String sql1 = " select t.zorderlistid,t.orderlistid,CASt(t.orid as varchar(17)) as orid,"
	             + "t.iscenicid,t.itickettypeid,t.iztickettypeid,t.dtstartdate,t.dtenddate,t.zpric,"
	             + "t.znumb,t.zyhnumb,t.zyhamnt,t.zamnt,t.tripid,t.ivenueid,t.ivenueareaid,t.ivenueseatsid,t.ise"
	             + "from t_zorderlist twhere  t.orid='"+ orid + " and iscenicid = " + iscenicid
	             + " and t.orderlistid = "+ orderlistid;*/
//	            and  t.iztickettypeid=zet.itickettypeid  and t.itickettypeid=et.itickettypeid
	            list1 = ecService.getTZOrderMapList(orid, String.valueOf(iscenicid), String.valueOf(orderlistid));
            } catch (Exception e) {
                LOGGER.info(StringUtil.toString_02(e));
            }
            //场馆业务
            for (Map map1 : list1) {
                String seatids = "";
                if (map1.get("TRIPID") != null) {
                	Long itickettypeid1 = Long.valueOf(map1.get("ITICKETTYPEID").toString());
                	Edmtickettypetab edmtickettypetab = (Edmtickettypetab) timeSharingDao.get(Edmtickettypetab.class, itickettypeid1);
                	map1.put("SZZTICKETTYPENAME", edmtickettypetab.getSztickettypename());
                	if (new Long(map1.get("TRIPID").toString()) > 0) {

                        zdail1 = zdail1.append(map1.get("IZTICKETTYPEID") + "&"
                                + map1.get("SZZTICKETTYPENAME").toString()
                                + "&" + map1.get("TRIPID").toString() + "&"
                                + map1.get("TRIPNAME").toString() + "&"
                                + map1.get("DTSTARTDATE").toString() + "&"
                                + map1.get("DTENDDATE").toString());
                        zdail = zdail.append(map1.get("IZTICKETTYPEID") + "&"
                                + map1.get("SZZTICKETTYPENAME").toString()
                                + "&" + map1.get("TRIPID").toString() + "&"
                                + map1.get("TRIPNAME").toString() + "&"
                                + map1.get("DTSTARTDATE").toString() + "&"
                                + map1.get("DTENDDATE").toString());

                        List tlist = timeSharingDao
                                .find(" from Productcontrol where controltype='03' and iscenicid="
                                        + iscenicid
                                        + " and itickettypeid="
                                        + map1.get("IZTICKETTYPEID").toString()
                                        + " and tripid="
                                        + map1.get("TRIPID").toString()
                                        + " and stdata='"
                                        + map1.get("DTSTARTDATE").toString()
                                        .substring(0, 10) + "'");
                        if (tlist != null && tlist.size() > 0) {
                            Productcontrol p = (Productcontrol) tlist.get(0);
                            if (p.getBystate() == 1) {
                                zdail1 = zdail1.append("&" + p.getBystate()
                                        + "&正常" + "!");
                                zdail = zdail.append("&" + p.getBystate()
                                        + "&正常" + "!");
                            } else if (p.getBystate() == 0) {
                                zdail1 = zdail1.append("&" + p.getBystate()
                                        + "&开始停排" + "!");
                                zdail = zdail.append("&" + p.getBystate()
                                        + "&开始停排" + "!");
                            } else {
                                zdail1 = zdail1.append("&" + p.getBystate()
                                        + "&确认停排" + "!");
                                zdail = zdail.append("&" + p.getBystate()
                                        + "&确认停排" + "!");
                            }
                        } else {
                            zdail1 = zdail1.append("&1&正常");
                            zdail = zdail.append("&1&正常");
                        }
                        try {
                            List list2 = this.timeSharingDao
                                    .findBySqlToMap("select s.iseatid from seatordertab s where s.orid="
                                            + orid
                                            + " and s.iscenicid="
                                            + map1.get("ISCENICID")
                                            + " and s.orderlistid="
                                            + orderlistid
                                            + " and s.zorderlistid="
                                            + map1.get("ZORDERLISTID")
                                            + " and s.isvalid=1");
                            if (list2 != null && list2.size() > 0) {
                                for (int a = 0; a < list2.size(); a++) {
                                    Map map2 = (Map) list2.get(a);
                                    if (a == 0) {
                                        seatids = map2.get("ISEATID")
                                                .toString();
                                    } else {
                                        seatids = seatids
                                                + ">"
                                                + map2.get("ISEATID")
                                                .toString();
                                    }
                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        zdail = zdail.append("&"
                                + map1.get("IVENUEID").toString() + "&"
                                + map1.get("IVENUEAREAID").toString() + "&"
                                + map1.get("VENUEIDNAME").toString() + "&"
                                + map1.get("IVENUESEATSID").toString() + "&"
                                + map1.get("SZPROGRAMNAME").toString() + "&"
                                + map1.get("ISE").toString() + "&" + seatids
                                + "!");
                        zdail1 = zdail1.append("&"
                                + map1.get("IVENUEID").toString() + "&"
                                + map1.get("IVENUEAREAID").toString() + "&"
                                + map1.get("VENUEIDNAME").toString() + "&"
                                + map1.get("IVENUESEATSID").toString() + "&"
                                + map1.get("SZPROGRAMNAME").toString() + "&"
                                + map1.get("ISE").toString() + "&" + seatids
                                + "!");
                    } else {

                        zdail = zdail.append(map1.get("IZTICKETTYPEID") + "&"
                                + map1.get("SZZTICKETTYPENAME").toString()
                                + "&" + "0&&"
                                + map1.get("DTSTARTDATE").toString() + "&"
                                + map1.get("DTENDDATE").toString()
                                + "&1&正常&0&0&&0&&&!");
                        zdail1 = zdail1.append(map1.get("IZTICKETTYPEID") + "&"
                                + map1.get("SZZTICKETTYPENAME").toString()
                                + "&" + "0&&"
                                + map1.get("DTSTARTDATE").toString() + "&"
                                + map1.get("DTENDDATE").toString()
                                + "&1&正常&0&0&&0&&&!");
                    }
                } else {
                    zdail = zdail.append(map1.get("IZTICKETTYPEID") + "&"
                            + map1.get("SZZTICKETTYPENAME").toString() + "&"
                            + "0&&" + map1.get("DTSTARTDATE").toString() + "&"
                            + map1.get("DTENDDATE").toString()
                            + "&1&正常&0&0&&0&&&!");
                    zdail1 = zdail1.append(map1.get("IZTICKETTYPEID") + "&"
                            + map1.get("SZZTICKETTYPENAME").toString() + "&"
                            + "0&&" + map1.get("DTSTARTDATE").toString() + "&"
                            + map1.get("DTENDDATE").toString()
                            + "&1&正常&0&0&&0&&&!");
                }
            }
            String zzdail1 = zdail1.toString();
            if (!zzdail1.equals("")) {
                zzdail1 = zzdail1.substring(0, zzdail1.length() - 1);
                map.put("ZZDAIL", zzdail1);
            } else {
                map.put("ZZDAIL", "");
            }
            String zzdail = zdail.toString();
            if (!zzdail.equals("")) {
                zzdail = zzdail.substring(0, zdail.length() - 1);
                map.put("ZDAIL", zzdail);
            } else {
                map.put("ZDAIL", "");
            }
            map.put("ISEDIT","1");
            if(morder.getIsg() != null && morder.getIsg() == 1L){
                map.put("ISEDIT","0");
            }
            if(orid.substring(8, 11).equals("888") || orid.substring(8, 11).equals("999")){
                map.put("ISEDIT","0");
            }
        }
        return MapToResultBean.toResultBean(list);
    }

    public ResultBean getT_zorderlist(String orid, Long iscenicid) {
        String sql = " select zorderlistid,orderlistid,CASt(t.orid as varchar(17)) as orid,t.iscenicid,t.itickettypeid,t.iztickettypeid,t.dtstartdate,t.dtenddate,t.zpric,t.znumb,t.zyhnumb,t.zyhamnt,t.zamnt,et.sztickettypename,zet.sztickettypename as szztickettypename,t.tripid,t.ivenueareaid,tr.tripname,v.ivenueareaname from t_zorderlist t left outer join  trip tr on tr.tripid=t.tripid left outer join Venuearea v on v.ivenueareaid=t.ivenueareaid,Edpcrowdkindtab ew,Edmtickettypetab et where  t.orid=? and t.iscenicid=? and  t.iztickettypeid=zet.itickettypeid  and t.itickettypeid=et.itickettypeid order by orderlistid,zorderlistid";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMap(sql, orid, iscenicid);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return MapToResultBean.toResultBean(list);
    }

    public ResultBean getT_zorderlistbyorderlistid(Long orderlistid,
                                                   String orid, Long iscenicid) {
        String sql = " select zorderlistid,orderlistid,CASt(t.orid as varchar(17)) as orid,t.iscenicid,t.itickettypeid,t.iztickettypeid,t.dtstartdate,t.dtenddate,t.zpric,t.znumb,t.zyhnumb,t.zyhamnt,t.zamnt,et.sztickettypename,zet.sztickettypename as szztickettypename,t.tripid,t.ivenueareaid,tr.tripname,v.ivenueareaname from t_orderlist t left outer join  trip tr on tr.tripid=t.tripid left outer join Venuearea v on v.ivenueareaid=t.ivenueareaid,Edpcrowdkindtab ew,Edmtickettypetab et where  t.orid=? and t.iscenicid=? and t.orderlistid=? and  t.iztickettypeid=zet.itickettypeid  and t.itickettypeid=et.itickettypeid ";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMap(sql, orid, iscenicid, orderlistid);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return MapToResultBean.toResultBean(list);
    }

    public ResultBean updatereserve(List productcontrollist, String usid) {

        ResultBean rs = new ResultBean();
        try {
            rs.setColumnCount(2);
            rs.setColumnNames(new String[] { "returnstats", "message" });
            String returnstats = "";
            String message = "";
            for (int i = 0; i < productcontrollist.size(); i++) {
                Productcontrol p = (Productcontrol) productcontrollist.get(i);
                String hsql = " from Productcontrol where itickettypeid="
                        + p.getItickettypeid() + " and tripid=" + p.getTripid()
                        + " and stdata='" + p.getStdata()
                        + "' and controltype='03'";
                List plist = timeSharingDao.find(hsql);
                if (plist == null || plist.size() == 0) {
                    Edmtickettypetab e = (Edmtickettypetab) timeSharingDao.get(
                            Edmtickettypetab.class, p.getItickettypeid());
                    if (e.getIscontrolsale() == 0) {
                        returnstats = "false";
                        Trip t = (Trip) timeSharingDao.get(Trip.class,
                                p.getTripid());
                        message = e.getSztickettypename() + t.getTripname()
                                + "无销售数据";
                    }
                    rs.addRow(new String[] { returnstats, message });
                    return rs;
                } else {
                    Productcontrol p1 = (Productcontrol) plist.get(0);
                    Edmtickettypetab e = (Edmtickettypetab) timeSharingDao.get(
                            Edmtickettypetab.class, p.getItickettypeid());
                    Trip t = (Trip) timeSharingDao.get(Trip.class, p.getTripid());
                    if (p1.getBystate() != 1) {
                        returnstats = "false";

                        if (p1.getBystate() == 0) {
                            message = e.getSztickettypename() + t.getTripname()
                                    + "准备停排";
                        } else {
                            message = e.getSztickettypename() + t.getTripname()
                                    + "已停排";
                        }
                        rs.addRow(new String[] { returnstats, message });
                        return rs;
                    } else {
                        String hql2 = " from Reservecontrol where usid='"
                                + usid + "' and productcontrolid="
                                + p1.getProductcontrolid();
                        List rlist = timeSharingDao.find(hql2);
                        if (rlist == null || rlist.size() == 0) {
                            returnstats = "false";
                            message = e.getSztickettypename() + t.getTripname()
                                    + "没有该用户的预留量数据";
                            rs.addRow(new String[] { returnstats, message });
                            return rs;
                        } else {
                            Reservecontrol r = (Reservecontrol) rlist.get(0);
                            if (r.getReservednumber()
                                    - r.getReservedsalenumber() >= p
                                    .getSoldnumber()) {
                                r.setReservedsalenumber(r
                                        .getReservedsalenumber()
                                        + p.getSoldnumber());
                                timeSharingDao.update(r);
                                p1.setReservedsalenumber(p1
                                        .getReservedsalenumber()
                                        + p.getSoldnumber());
                                timeSharingDao.update(p1);
                            } else {
                                message = e.getSztickettypename()
                                        + t.getTripname() + "该用户的预留量已不足";
                                rs.addRow(new String[] { returnstats, message });
                                return rs;
                            }
                        }
                    }
                }

                rs.addRow(new String[] { "true", "" });
                return rs;
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            rs.addRow(new String[] { "false", e.getMessage() });
            return rs;
        }
        return null;
    }

    /**
     * 根据票号读取订单信息及该票的检票信息 Describe:
     *
     * @see ISaleCenterService#getTicketmesssage(String)
     * @param szticketprintno
     * @return
     * @author yuanchengjun Date:2011-11-22
     */
    public ResultBean getTicketmesssage(String szticketprintno) {
        // 读取售出门票表信息
        List<Map> stslist = new ArrayList();

        try {
            // if (szticketprintno.length() == 14) {
            String szticketprintno1 = szticketprintno;
            szticketprintno = szticketprintno.toUpperCase();
            stslist = timeSharingDao
                    .findBySqlToMap("select s.szsoldticketid,s.isalesvoucherdetailsid,s.szticketprintno,s.isalesvoucherid,s.iticketstationid,s.dtstartdate,s.dtenddate,e.sztickettypename||'--'||edp.szcrowdkindname as sztickettypename,st.szsalesvoucherno,st.usid,st.ihandler,em.szemployeename,s.byvalidity,s.iserialnum,s.itickettypeid,st.dtmakedate,s.manyouno,s.myzj,se.isettlementid ,v5.pmva as strsettlement from Stssoldtickettab s,Edmtickettypetab e,Stssalesvouchertab st,Employee em,Edpcrowdkindtab edp,Stssalessettlementtab se,Sysparv5 v5 where s.icrowdkindid=edp.icrowdkindid and ( s.szticketprintno='"
                            + szticketprintno
                            + "' or myzj='"
                            + szticketprintno
                            + "' or  myzj='"
                            + szticketprintno1
                            + "') " + " and s.byvalidity='00' " //lizhaodong 新增查询
                            +" and s.itickettypeid=e.itickettypeid and st.isalesvoucherid=s.isalesvoucherid and st.iticketstationid=s.iticketstationid and em.iemployeeid=st.ihandler and se.isalesvoucherid=s.isalesvoucherid and se.iticketstationid=s.iticketstationid and v5.pmky='ZFFS' and v5.pmcd=se.isettlementid order by s.dtmakedate desc");
            // } else {

            if (stslist == null || stslist.size() == 0) {
                stslist = new ArrayList();

                List elist = timeSharingDao
                        .find(" from Esbticketstationtab where szstationcode='"
                                + szticketprintno.substring(0, 1) + "'");
                if (elist == null || elist.size() == 0) {
                    return null;
                }
                Esbticketstationtab esbticketstationtab = (Esbticketstationtab) elist
                        .get(0);
                stslist = timeSharingDao
                        .findBySqlToMap("select * from (select s.szsoldticketid,s.isalesvoucherdetailsid,s.szticketprintno,s.isalesvoucherid,s.iticketstationid,s.dtstartdate,s.dtenddate,e.sztickettypename||'--'||edp.szcrowdkindname as sztickettypename,st.szsalesvoucherno,st.usid,st.ihandler,em.szemployeename,s.byvalidity,s.iserialnum,s.itickettypeid,st.dtmakedate,s.manyouno,s.myzj,se.isettlementid ,v5.pmva as strsettlement from Stssoldtickettab s,Edmtickettypetab e,Stssalesvouchertab st,Employee em,Edpcrowdkindtab edp,Stssalessettlementtab se,Sysparv5 v5 where s.icrowdkindid=edp.icrowdkindid and s.iserialnum="
                                + szticketprintno.substring(1)
                                + " and s.iticketstationid="
                                + esbticketstationtab.getIticketstationid()
                                + " and s.byvalidity='00' " //lizhaodong 新增查询
                                + " and s.itickettypeid=e.itickettypeid and st.isalesvoucherid=s.isalesvoucherid and st.iticketstationid=s.iticketstationid and em.iemployeeid=st.ihandler and se.isalesvoucherid=s.isalesvoucherid and se.iticketstationid=s.iticketstationid and v5.pmky='ZFFS' and v5.pmcd=se.isettlementid order by s.dtmakedate desc) where rownum=1");

            }
        } catch (Exception e) {
            LOGGER.info("读取票信息接口异常："+StringUtil.toString_02(e));
        }
        if (stslist == null || stslist.size() == 0) {
            return null;
        }

        for (Map map : stslist) {
            // 读取售出门票子表信息
            Long szsoldticketid = new Long(map.get("SZSOLDTICKETID").toString());
            Long isalesvoucherdetailsid = new Long(map.get(
                    "ISALESVOUCHERDETAILSID").toString());
            Long isalesvoucherid = new Long(map.get("ISALESVOUCHERID")
                    .toString());
            Long iticketstationid = new Long(map.get("ITICKETSTATIONID")
                    .toString());
            List<Map> zstslist = new ArrayList();
            try {
                zstslist = timeSharingDao
                        .findBySqlToMap("select stsss.itickettypeid,stsss.iztickettypeid,et2.sztickettypename as zsztickettypename,et2.bycategorytype,stsss.tripid,t.tripname,stsss.dtbegindate,stsss.dtenddate,sum(stsss.ipassedtimes) as ipassedtimes  from Stssoldticketsubtab stsss left outer join trip t on t.tripid=stsss.tripid,Edmtickettypetab et2 where stsss.iticketstationid="
                                + iticketstationid
                                + " and stsss.isalesvoucherid="
                                + isalesvoucherid
                                + " and stsss.szsoldticketid="
                                + szsoldticketid
                                + " and stsss.isalesvoucherdetailsid="
                                + isalesvoucherdetailsid
                                + " and et2.itickettypeid=stsss.iztickettypeid and stsss.isvalid=1 group by stsss.itickettypeid,stsss.iztickettypeid,et2.sztickettypename,et2.bycategorytype,stsss.tripid,t.tripname,stsss.dtbegindate,stsss.dtenddate");

            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            String zdail = "";
            for (Map map1 : zstslist) {
                if (map1.get("TRIPID").toString().equals("0")) {
                    zdail = zdail + map1.get("IZTICKETTYPEID") + "&"
                            + map1.get("ZSZTICKETTYPENAME") + "&"
                            + map1.get("DTBEGINDATE") + "&"
                            + map1.get("DTENDDATE") + "&" + map1.get("TRIPID")
                            + "&" + " " + "&" + map1.get("IPASSEDTIMES") +"#";
                } else {
                    zdail = zdail + map1.get("IZTICKETTYPEID") + "&"
                            + map1.get("ZSZTICKETTYPENAME") + "&"
                            + map1.get("DTBEGINDATE") + "&"
                            + map1.get("DTENDDATE") + "&" + map1.get("TRIPID")
                            + "&" + map1.get("TRIPNAME") + "&"
                            + map1.get("IPASSEDTIMES")+"#";
                }
            }
            if (!zdail.equals("")) {
                zdail = zdail.substring(0, zdail.length() - 1);
            }
            map.put("ZDAIL", zdail);
            String orderno = map.get("SZSALESVOUCHERNO").toString();
            if (orderno != null && !orderno.equals("")) {
                if (orderno.substring(8, 11).equals("000")) {
                    map.put("ORDERTYPE", "网络订单");
                } else {
                    map.put("ORDERTYPE", "窗口订单");
                }
            }
        }
        return MapToResultBean.toResultBean(stslist);
    }

    // 根据订单中一张票的信息读取同凭证里面所有的票
    public ResultBean getOrderTicketmesssage(String szticketprintno) {
        // 读取售出门票表信息
        List list = new ArrayList();

        szticketprintno = szticketprintno.toUpperCase();
        list = timeSharingDao.find("from Stssoldtickettab where szticketprintno='"
                + szticketprintno + "' order by dtmakedate desc");
        if (list == null || list.size() == 0) {
            List elist = timeSharingDao
                    .find(" from Esbticketstationtab where szstationcode='"
                            + szticketprintno.substring(0, 1) + "'");
            if (elist == null || elist.size() == 0) {
                return null;
            }
            Esbticketstationtab esbticketstationtab = (Esbticketstationtab) elist
                    .get(0);
            list = timeSharingDao.find("from Stssoldtickettab where iserialnum="
                    + szticketprintno.substring(1)
                    + " and id.iticketstationid="
                    + esbticketstationtab.getIticketstationid()
                    + " order by dtmakedate desc");
        }
        if (list == null || list.size() == 0) {

            return null;
        }
        Stssoldtickettab s = (Stssoldtickettab) list.get(0);
        // Long isalesvoucherdetailsid = s.getId().getIsalesvoucherdetailsid();
        Long isalesvoucherid = s.getId().getIsalesvoucherid();
        Long iticketstationid = s.getId().getIticketstationid();
        // 读取同一批次的票
        List<Map> stslist = new ArrayList();
        try {
            stslist = timeSharingDao
                    .findBySqlToMap("select s.szsoldticketid,s.isalesvoucherdetailsid,s.szticketprintno,s.isalesvoucherid,s.iticketstationid,s.dtstartdate,s.dtenddate,e.sztickettypename||'--'||edp.szcrowdkindname as sztickettypename,st.szsalesvoucherno,st.usid,st.ihandler,em.szemployeename,s.byvalidity,s.iserialnum,s.itickettypeid,st.dtmakedate,s.manyouno,s.myzj from Stssoldtickettab s,Edmtickettypetab e,Stssalesvouchertab st,Employee em,Edpcrowdkindtab edp where s.icrowdkindid=edp.icrowdkindid and s.isalesvoucherid="
                            + isalesvoucherid
                            + " and s.iticketstationid="
                            + iticketstationid
                            + " and s.byvalidity='00'"
                            + " and s.itickettypeid=e.itickettypeid and st.isalesvoucherid=s.isalesvoucherid and st.iticketstationid=s.iticketstationid and em.iemployeeid=st.ihandler order by s.szticketprintno");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        if (stslist == null || stslist.size() == 0) {
            return null;
        }
        for (Map map : stslist) {
            Long szsoldticketid = new Long(map.get("SZSOLDTICKETID").toString());
            Long isalesvoucherdetailsid = new Long(map.get(
                    "ISALESVOUCHERDETAILSID").toString());
            List<Map> zstslist = new ArrayList();
            try {
                zstslist = timeSharingDao
                        .findBySqlToMap("select stsss.itickettypeid,stsss.iztickettypeid,et2.sztickettypename as zsztickettypename,et2.bycategorytype,stsss.tripid,t.tripname,stsss.dtbegindate,stsss.dtenddate,sum(stsss.ipassedtimes) as ipassedtimes  from Stssoldticketsubtab stsss " +
                                "left outer join trip t on t.tripid=stsss.tripid,Edmtickettypetab et2 where stsss.iticketstationid="
                                + iticketstationid
                                + " and stsss.isalesvoucherid="
                                + isalesvoucherid
                                + " and stsss.szsoldticketid="
                                + szsoldticketid
                                + "and stsss.isalesvoucherdetailsid="
                                + isalesvoucherdetailsid
                                + " and et2.itickettypeid=stsss.iztickettypeid and stsss.isvalid=1 group by stsss.itickettypeid,stsss.iztickettypeid,et2.sztickettypename ,et2.bycategorytype,stsss.tripid,t.tripname,stsss.dtbegindate,stsss.dtenddate order by stsss.itickettypeid,stsss.iztickettypeid");
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            String zdail = "";
            for (Map map1 : zstslist) {
                if (map1.get("TRIPID").toString().equals("0")) {
                    zdail = zdail+map1.get("IZTICKETTYPEID") + "&"
                            + map1.get("ZSZTICKETTYPENAME") + "&"
                            + map1.get("DTBEGINDATE") + "&"
                            + map1.get("DTENDDATE") + "&" + map1.get("TRIPID")
                            + "&" + "" + "&" + map1.get("IPASSEDTIMES") +"&"+map1.get("BYCATEGORYTYPE")+"#";
                } else {
                    zdail = zdail+ map1.get("IZTICKETTYPEID") + "&"
                            + map1.get("ZSZTICKETTYPENAME") + "&"
                            + map1.get("DTBEGINDATE") + "&"
                            + map1.get("DTENDDATE") + "&" + map1.get("TRIPID")
                            + "&" + map1.get("TRIPNAME") + "&"
                            + map1.get("IPASSEDTIMES")+"&"+ map1.get("BYCATEGORYTYPE") + "#";
                }
            }
            if (!zdail.equals("")) {
                zdail = zdail.substring(0, zdail.length() - 1);
            }
            map.put("ZDAIL", zdail);
        }
        return MapToResultBean.toResultBean(stslist);
    }

    public String getreturnticketconsole(String szticketprintnos,
                                         String iztickettypeids) {
        String[] szticketprintno = szticketprintnos.split("&");// 退订的票号数组
        String[] iztickettypeid = iztickettypeids.split("&");// 退订产品数组

        String sszticketprintno = "";
        String siztickettypeid = "";
        String productcontrols = "";
        for (int i = 0; i < szticketprintno.length; i++) {
            if (i == 0) {
                sszticketprintno = szticketprintno[i];
            } else {
                sszticketprintno = sszticketprintno + "','"
                        + szticketprintno[i];
            }
        }
        for (int i = 0; i < iztickettypeid.length; i++) {
            siztickettypeid = siztickettypeid + "," + iztickettypeid[i];
        }
        // System.out.println("取出所有退票的票号数据");
        List list = timeSharingDao
                .find("from Stssoldtickettab where szticketprintno in ('"
                        + sszticketprintno + "') order by dtmakedate desc");
        for (int i = 0; i < list.size(); i++) {
            Stssoldtickettab s = (Stssoldtickettab) list.get(i);
            // System.out.println("取出所有退票的票号对应的子票验票数据");
            List zsdaillist = timeSharingDao
                    .find("from Stssoldticketsubtab where id.isalesvoucherid="
                            + s.getId().getIsalesvoucherid()
                            + " and id.iticketstationid="
                            + s.getId().getIticketstationid()
                            + " and id.isalesvoucherdetailsid="
                            + s.getId().getIsalesvoucherdetailsid()
                            + " and id.szsoldticketid="
                            + s.getId().getSzsoldticketid()
                            + " order by iztickettypeid");
            for (int j = 0; j < zsdaillist.size(); j++) {
                Stssoldticketsubtab zs = (Stssoldticketsubtab) zsdaillist
                        .get(j);
                for (int k = 0; k < iztickettypeid.length; k++) {
                    if (zs.getIztickettypeid().longValue() == Long
                            .parseLong(iztickettypeid[k])) {
                        if (zs.getTripid() > 0) {
                            productcontrols = productcontrols
                                    + zs.getIztickettypeid() + "&03&"
                                    + zs.getTripid() + "&"
                                    + zs.getDtbegindate().substring(0, 10)
                                    + "&1:";
                        }
                    }
                }
            }
        }
        if (!productcontrols.equals("")) {
            productcontrols = productcontrols.substring(0,
                    productcontrols.length() - 1);
        }

        return productcontrols;
    }

    /**
     * 根据票号读取销售凭证 Describe:
     *
     * @auth:yuanchengjun
     * @param szticketprintno
     * @return return:Stssalesvouchertab Date:2011-11-23
     */
    public Stssalesvouchertab getStssalesvouchertabbyprintno(
            String szticketprintno) {
        List list = timeSharingDao
                .find("from Stssoldtickettab where szticketprintno='"
                        + szticketprintno + "' order by dtmakedate desc");
        Stssoldtickettab s1 = (Stssoldtickettab) list.get(0);
        Stssalesvouchertab s = (Stssalesvouchertab) timeSharingDao.get(
                Stssalesvouchertab.class,
                new StssalesvouchertabId(s1.getId().getIsalesvoucherid(), s1
                        .getId().getIticketstationid()));
        return s;
    }

    public ResultBean savereturnticket(
            Stssalesvouchertab oldstssalesvouchertab, String szticketprintnos,
            String iztickettypeids, Long newiticketwinid, Long iemployeeid) {
        String nowtime = Tools.getDayTimes();
        String[] szticketprintno = szticketprintnos.split("&");// 退订的票号数组
        String[] iztickettypeid = iztickettypeids.split("&");// 退订产品数组
        String sszticketprintno = "";
        String siztickettypeid = "";
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        for (int i = 0; i < szticketprintno.length; i++) {
            if (i == 0) {
                sszticketprintno = szticketprintno[i];
            } else {
                sszticketprintno = sszticketprintno + "','"
                        + szticketprintno[i];
            }
        }
        for (int i = 0; i < iztickettypeid.length; i++) {
            siztickettypeid = siztickettypeid + "," + iztickettypeid[i];
        }
        // 查询所有票号所有售出门票表信息
        // int isnet = 0;// 等于0表示是现金订单 1 表示网上订单(要添加网上退订数据)
        Long isalesvoucherdetailsid = new Long(0);
        List zdaillist = new ArrayList();
        List zslist = new ArrayList();// 需删除的Stssoldticketsubtab表中信息
        List slist = new ArrayList();// 需要修改的Stssoldtickettab表信息
        Stssalesvouchertab stssalesvouchertab = new Stssalesvouchertab();// 新的销售凭证表

        Long isalesvoucherid = oldstssalesvouchertab.getId()
                .getIsalesvoucherid();
        Long iticketstationid = oldstssalesvouchertab.getId()
                .getIticketstationid();
        // System.out.println("取出新窗口数据");
        Esbticketwintab e = (Esbticketwintab) timeSharingDao.get(
                Esbticketwintab.class, newiticketwinid);
        StssalesvouchertabId stssalesvouchertabid = new StssalesvouchertabId();
        stssalesvouchertabid.setIticketstationid(e.getIticketstationid());
        // System.out.println("取出售票点最大流水");
        Long maxid = timeSharingDao.getMaxPk("id.isalesvoucherid",
                new String[] { "id.iticketstationid" }, new String[] { e
                        .getIticketstationid().toString() },
                "Stssalesvouchertab");
        stssalesvouchertabid.setIsalesvoucherid(new Long(maxid + 1));
        stssalesvouchertab.setId(stssalesvouchertabid);
        stssalesvouchertab.setIscenicid(oldstssalesvouchertab.getIscenicid());
        stssalesvouchertab.setIticketwinid(newiticketwinid);
        stssalesvouchertab.setIbusinessid(oldstssalesvouchertab
                .getIbusinessid());
        stssalesvouchertab.setIhandler(iemployeeid);
        stssalesvouchertab.setIpayeer(iemployeeid);

        stssalesvouchertab.setIauditor(iemployeeid);
        stssalesvouchertab.setDyusid(oldstssalesvouchertab.getDyusid());
        stssalesvouchertab.setIaccountreceivable(new Double(0));
        stssalesvouchertab.setIacceptmoney(new Double(0));
        stssalesvouchertab.setIgivechange(new Double(0));
        stssalesvouchertab.setIyear(new Long(nowtime.substring(0, 4)));
        stssalesvouchertab.setImonth(new Long(nowtime.substring(5, 7)));
        stssalesvouchertab.setIday(new Long(nowtime.substring(8, 10)));
        stssalesvouchertab.setDtmakedate(nowtime);
        stssalesvouchertab.setDtauditdate(nowtime.substring(0, 10));
        stssalesvouchertab.setUsid(oldstssalesvouchertab.getUsid());
        stssalesvouchertab.setBisintegral(new Long(0));
        stssalesvouchertab.setByprintinvoice(new Long(0));
        stssalesvouchertab.setBysplitway(new Long(2));
        stssalesvouchertab.setBisreturn(new Long(1));
        stssalesvouchertab.setBysalesvouchertype("02");
        stssalesvouchertab.setBypostrecord(new Long(0));
        stssalesvouchertab.setBysalesvoucherstate(new Long(1));
        stssalesvouchertab.setBispay(new Long(0));
        stssalesvouchertab.setBispayee(new Long(0));
        int ticketstation = e.getIticketstationid().intValue();
        String szticketstation = "";
        if (0 < ticketstation && ticketstation < 10) {
            szticketstation = "00" + ticketstation;
        } else if (ticketstation >= 10 && ticketstation < 100) {
            szticketstation = "0" + ticketstation;
        } else {
            szticketstation = "" + ticketstation;
        }
        String szsalesvoucherno;
        try {
            // System.out.println("取出最大订单号");
            szsalesvoucherno = timeSharingDao.getMaxNo(szticketstation);
            stssalesvouchertab.setSzsalesvoucherno(szsalesvoucherno);
        } catch (SQLException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }

        Stssalesvoucherdetailstab stssalesvoucherdetailstab = new Stssalesvoucherdetailstab();
        List stssalelist = new ArrayList();// 新的销售凭证明细列表
        // System.out.println("取出所有退票的票号数据");
        List list = timeSharingDao
                .find("from Stssoldtickettab where szticketprintno in ('"
                        + sszticketprintno + "') order by dtmakedate desc");
        for (int i = 0; i < list.size(); i++) {
            Stssoldtickettab s = (Stssoldtickettab) list.get(i);
            // 验证订单号是否相同
            if (iticketstationid != s.getId().getIticketstationid().longValue()
                    || isalesvoucherid != s.getId().getIsalesvoucherid()
                    .longValue()) {
                rs.addRow(new String[] { "false",
                        "票号" + s.getSzticketprintno() + "不是同一条销售凭证" });
                return rs;
            }
            if (s.getByvalidity().equals("01")) {
                rs.addRow(new String[] { "false",
                        "票号" + s.getSzticketprintno() + "已全部退订" });
                return rs;
            }
            if (s.getByvalidity().equals("02")) {
                rs.addRow(new String[] { "false",
                        "票号" + s.getSzticketprintno() + "已挂失" });
                return rs;
            }
            // 根据票信息查询对应子票的价格
            if (isalesvoucherdetailsid == 0) {
                // 没有凭证明细ID，表示第一次进入
                isalesvoucherdetailsid = s.getId().getIsalesvoucherdetailsid();
                Stssalesvoucherdetailstab ystssalesvoucherdetailstab = (Stssalesvoucherdetailstab) timeSharingDao
                        .get(Stssalesvoucherdetailstab.class,
                                new StssalesvoucherdetailstabId(
                                        isalesvoucherdetailsid,
                                        isalesvoucherid, iticketstationid));
                StssalesvoucherdetailstabId id = new StssalesvoucherdetailstabId();
                id.setIsalesvoucherdetailsid(ystssalesvoucherdetailstab.getId()
                        .getIsalesvoucherdetailsid());
                id.setIticketstationid(e.getIticketstationid());
                id.setIsalesvoucherid(stssalesvouchertabid.getIsalesvoucherid());
                stssalesvoucherdetailstab.setId(id);
                stssalesvoucherdetailstab
                        .setDtstartdate(ystssalesvoucherdetailstab
                                .getDtstartdate());
                stssalesvoucherdetailstab
                        .setDtenddate(ystssalesvoucherdetailstab.getDtenddate());
                stssalesvoucherdetailstab.setIticketwinid(newiticketwinid);
                stssalesvoucherdetailstab
                        .setIcrowdkindpriceid(ystssalesvoucherdetailstab
                                .getIcrowdkindpriceid());
                stssalesvoucherdetailstab
                        .setItickettypeid(ystssalesvoucherdetailstab
                                .getItickettypeid());
                stssalesvoucherdetailstab.setIplayerperticket(new Long(1));// 人/张
                stssalesvoucherdetailstab.setIticketnum(new Long(0));// 张数
                stssalesvoucherdetailstab.setIticketplayer(new Long(0));
                stssalesvoucherdetailstab
                        .setDtstartdate(ystssalesvoucherdetailstab
                                .getDtstartdate());
                stssalesvoucherdetailstab
                        .setDtenddate(ystssalesvoucherdetailstab.getDtenddate());
                stssalesvoucherdetailstab.setIstartid(new Long(0));
                stssalesvoucherdetailstab.setIendid(new Long(0));
                stssalesvoucherdetailstab.setSzstartserial("0");
                stssalesvoucherdetailstab.setSzendserial("0");
                stssalesvoucherdetailstab.setIoffersschemeid(new Long(0));
                stssalesvoucherdetailstab.setIpresentnums(new Long(0));
                stssalesvoucherdetailstab.setIderatenums(new Long(0));
                stssalesvoucherdetailstab.setIamount(new Long(0));
                stssalesvoucherdetailstab.setIfactnum(new Long(0)); // 交易数量
                stssalesvoucherdetailstab.setIuseablenessnum(new Long(0));// 使用数量
                stssalesvoucherdetailstab.setMderatemoney(new Double(0));// 减免金额
                stssalesvoucherdetailstab.setMpresentmoney(new Double(0));// 赠送金额
                stssalesvoucherdetailstab.setMnominalfee(new Double(0));// 工本费
                stssalesvoucherdetailstab.setMdeposit(new Double(0));
                stssalesvoucherdetailstab.setMhandcharge(new Double(0));// 手续费
                stssalesvoucherdetailstab.setByconsumetype("00");
                stssalesvoucherdetailstab.setIconsumenum(new Double(0));
                stssalesvoucherdetailstab.setItotalminutes(new Long(0));
                stssalesvoucherdetailstab.setByisout(new Long(0));
                stssalesvoucherdetailstab.setDtmakedate(Tools.getDayTimes());
                stssalesvoucherdetailstab.setIversion(new Long(0));
                stssalesvoucherdetailstab.setMactualsaleprice(new Double(0));
                stssalesvoucherdetailstab.setMeventmoney(new Double(0));
                stssalesvoucherdetailstab.setItotalnumber(new Long(0));
                stssalesvoucherdetailstab.setMtotalamount(new Double(0));

                List stsscomlist = new ArrayList();// 新的销售明细凭证子表
                stssalesvoucherdetailstab.setComlist(stsscomlist);
                // System.out.println("取出凭证明细子票数据");
                zdaillist = timeSharingDao
                        .find("from Stscomticketsalesdetailstab where  id.isalesvoucherid="
                                + isalesvoucherid
                                + " and id.iticketstationid="
                                + iticketstationid
                                + " and id.isalesvoucherdetailsid="
                                + isalesvoucherdetailsid
                                + " order by isalesvoucherdetailsid");

            } else {
                if (isalesvoucherdetailsid != s.getId()
                        .getIsalesvoucherdetailsid().longValue()) {
                    // 明细ID改变，新建新的明细，将老明细保存到对应的LIST
                    stssalelist.add(stssalesvoucherdetailstab);
                    isalesvoucherdetailsid = s.getId()
                            .getIsalesvoucherdetailsid().longValue();
                    stssalesvoucherdetailstab = new Stssalesvoucherdetailstab();
                    Stssalesvoucherdetailstab ystssalesvoucherdetailstab = (Stssalesvoucherdetailstab) timeSharingDao
                            .get(Stssalesvoucherdetailstab.class,
                                    new StssalesvoucherdetailstabId(
                                            isalesvoucherdetailsid,
                                            isalesvoucherid, iticketstationid));
                    StssalesvoucherdetailstabId id = new StssalesvoucherdetailstabId();
                    id.setIsalesvoucherdetailsid(ystssalesvoucherdetailstab
                            .getId().getIsalesvoucherdetailsid());
                    id.setIticketstationid(e.getIticketstationid());
                    id.setIsalesvoucherid(stssalesvouchertabid
                            .getIsalesvoucherid());
                    stssalesvoucherdetailstab.setId(id);
                    stssalesvoucherdetailstab
                            .setDtstartdate(ystssalesvoucherdetailstab
                                    .getDtstartdate());
                    stssalesvoucherdetailstab
                            .setDtenddate(ystssalesvoucherdetailstab
                                    .getDtenddate());
                    stssalesvoucherdetailstab.setIticketwinid(newiticketwinid);
                    stssalesvoucherdetailstab
                            .setIcrowdkindpriceid(ystssalesvoucherdetailstab
                                    .getIcrowdkindpriceid());
                    stssalesvoucherdetailstab
                            .setItickettypeid(ystssalesvoucherdetailstab
                                    .getItickettypeid());
                    stssalesvoucherdetailstab.setIplayerperticket(new Long(1));// 人/张
                    stssalesvoucherdetailstab.setIticketnum(new Long(0));// 张数
                    stssalesvoucherdetailstab.setIticketplayer(new Long(0));
                    stssalesvoucherdetailstab.setIamount(new Long(0));// 录入数量
                    stssalesvoucherdetailstab
                            .setDtstartdate(ystssalesvoucherdetailstab
                                    .getDtstartdate());
                    stssalesvoucherdetailstab
                            .setDtenddate(ystssalesvoucherdetailstab
                                    .getDtenddate());
                    stssalesvoucherdetailstab.setIstartid(new Long(0));
                    stssalesvoucherdetailstab.setIendid(new Long(0));
                    stssalesvoucherdetailstab.setSzstartserial("0");
                    stssalesvoucherdetailstab.setSzendserial("0");
                    stssalesvoucherdetailstab.setIoffersschemeid(new Long(0));
                    stssalesvoucherdetailstab.setIpresentnums(new Long(0));
                    stssalesvoucherdetailstab.setIderatenums(new Long(0));
                    stssalesvoucherdetailstab.setIfactnum(new Long(0)); // 交易数量
                    stssalesvoucherdetailstab.setIuseablenessnum(new Long(0));// 使用数量
                    stssalesvoucherdetailstab.setMderatemoney(new Double(0));// 减免金额
                    stssalesvoucherdetailstab.setMpresentmoney(new Double(0));// 赠送金额
                    stssalesvoucherdetailstab.setMnominalfee(new Double(0));// 工本费
                    stssalesvoucherdetailstab.setMdeposit(new Double(0));
                    stssalesvoucherdetailstab.setMhandcharge(new Double(0));// 手续费
                    stssalesvoucherdetailstab
                            .setMactualsaleprice(new Double(0));
                    stssalesvoucherdetailstab.setMeventmoney(new Double(0));
                    stssalesvoucherdetailstab.setByconsumetype("00");
                    stssalesvoucherdetailstab.setIconsumenum(new Double(0));
                    stssalesvoucherdetailstab.setItotalminutes(new Long(0));
                    stssalesvoucherdetailstab.setByisout(new Long(0));
                    stssalesvoucherdetailstab
                            .setDtmakedate(Tools.getDayTimes());
                    stssalesvoucherdetailstab.setIversion(new Long(0));
                    stssalesvoucherdetailstab.setItotalnumber(new Long(0));
                    stssalesvoucherdetailstab.setMtotalamount(new Double(0));
                    List stsscomlist = new ArrayList();// 新的销售明细凭证子表
                    stssalesvoucherdetailstab.setComlist(stsscomlist);
                    // System.out.println("取出新凭证明细子票数据");
                    zdaillist = timeSharingDao
                            .find("from Stscomticketsalesdetailstab where  id.isalesvoucherid="
                                    + isalesvoucherid
                                    + " and id.iticketstationid="
                                    + iticketstationid
                                    + " and id.isalesvoucherdetailsid="
                                    + isalesvoucherdetailsid
                                    + " order by isalesvoucherdetailsid");
                }
            }
            // 对于每张票对应的凭证明细数量加1
            stssalesvoucherdetailstab.setIamount(stssalesvoucherdetailstab
                    .getIamount() + 1);
            stssalesvoucherdetailstab.setIticketnum(stssalesvoucherdetailstab
                    .getIticketnum() + 1);
            stssalesvoucherdetailstab
                    .setIticketplayer(stssalesvoucherdetailstab
                            .getIticketplayer() + 1);
            stssalesvoucherdetailstab
                    .setIuseablenessnum(stssalesvoucherdetailstab
                            .getIuseablenessnum() + 1);
            stssalesvoucherdetailstab.setItotalnumber(stssalesvoucherdetailstab
                    .getItotalnumber() + 1);
            // System.out.println("读取对应票号的售出门票子表信息");
            List zsdaillist = timeSharingDao
                    .find("from Stssoldticketsubtab where id.isalesvoucherid="
                            + isalesvoucherid + " and id.iticketstationid="
                            + iticketstationid
                            + " and id.isalesvoucherdetailsid="
                            + isalesvoucherdetailsid
                            + " and id.szsoldticketid="
                            + s.getId().getSzsoldticketid()
                            + " order by iztickettypeid");
            int m = 0;
            int n = 0;
            long ziztickettypeid = 0;
            for (int j = 0; j < zsdaillist.size(); j++) {
                Stssoldticketsubtab zs = (Stssoldticketsubtab) zsdaillist
                        .get(j);

                for (int k = 0; k < iztickettypeid.length; k++) {
                    if (zs.getIztickettypeid().longValue() == Long
                            .parseLong(iztickettypeid[k])) {
                        n = n + 1;
                        zslist.add(zs);
                        if (ziztickettypeid == 0) {
                            ziztickettypeid = Long.parseLong(iztickettypeid[k]);
                            m = m + 1;
                        } else {
                            if (ziztickettypeid != Long
                                    .parseLong(iztickettypeid[k])) {
                                ziztickettypeid = Long
                                        .parseLong(iztickettypeid[k]);
                                m = m + 1;
                            }
                        }

                        if (zs.getIpassedtimes().longValue() > 0) {
                            rs.addRow(new String[] { "false",
                                    "票号" + s.getSzticketprintno() + "的票已经检过票" });
                            return rs;
                        }
                    }
                }

            }

            if (m < iztickettypeid.length) {
                // 当前退的子票在售出门票子表中没有数据说明已经退订过了
                rs.addRow(new String[] { "false",
                        "票号" + s.getSzticketprintno() + "的票有子票已经退订过或该票中没有该子票" });
                return rs;
            }
            if (n == zsdaillist.size()) {
                // 已经全部退订
                s.setByvalidity("01");
            } else {
                s.setByvalidity("03");
            }
            // 根据明细子表中的数据计算明细的各种金额
            for (int j = 0; j < zdaillist.size(); j++) {
                Stscomticketsalesdetailstab sts = (Stscomticketsalesdetailstab) zdaillist
                        .get(j);
                for (int k = 0; k < iztickettypeid.length; k++) {
                    if (sts.getIztickettypeid().longValue() == Long
                            .parseLong(iztickettypeid[k])) {
                        s.setMactualsaleprice(s.getMactualsaleprice()
                                - sts.getMsplitprice());
                        List comlist = stssalesvoucherdetailstab.getComlist();
                        boolean flag = true;
                        for (int b = 0; b < comlist.size(); b++) {
                            Stscomticketsalesdetailstab stscom = (Stscomticketsalesdetailstab) comlist
                                    .get(b);
                            if (stscom.getIztickettypeid().longValue() == sts
                                    .getIztickettypeid().longValue()) {
                                flag = false;
                                // 存在对应子明细，修改子明细数据
                                stscom.setIsplitamount(stscom.getIsplitamount() + 1);
                                stscom.setMsplitmoney(stscom.getMsplitmoney()
                                        + stscom.getMsplitprice());

                                stscom.setMhandcharge(stscom.getMhandcharge()
                                        + sts.getMsplitprice()
                                        * stscom.getTdfl());
                                // 跟新凭证明细金额数据

                                stssalesvoucherdetailstab
                                        .setMhandcharge(stssalesvoucherdetailstab
                                                .getMhandcharge()
                                                + sts.getMsplitprice()
                                                * stscom.getTdfl());// 手续费
                                stssalesvoucherdetailstab
                                        .setMeventmoney(stssalesvoucherdetailstab
                                                .getMeventmoney()
                                                + sts.getMsplitprice());
                                stssalesvoucherdetailstab
                                        .setMtotalamount(stssalesvoucherdetailstab
                                                .getMtotalamount()
                                                + sts.getMsplitprice());

                                // 跟新凭证金额数据
                                stssalesvouchertab
                                        .setIaccountreceivable(stssalesvouchertab
                                                .getIaccountreceivable()
                                                + sts.getMsplitprice()
                                                * (1 - stscom.getTdfl()));
                                stssalesvouchertab
                                        .setIacceptmoney(stssalesvouchertab
                                                .getIacceptmoney()
                                                + sts.getMsplitprice()
                                                * (1 - stscom.getTdfl()));
                            }
                        }
                        if (flag) {
                            // comlist中没有对应子产品数据需添加
                            Stscomticketsalesdetailstab stscom = new Stscomticketsalesdetailstab();
                            StscomticketsalesdetailstabId sid = new StscomticketsalesdetailstabId();
                            sid.setIticketstationid(e.getIticketstationid());
                            sid.setIcomticketsalesdetailsid(sts.getId()
                                    .getIcomticketsalesdetailsid());
                            sid.setIsalesvoucherdetailsid(s.getId()
                                    .getIsalesvoucherdetailsid());
                            sid.setIsalesvoucherid(stssalesvouchertabid
                                    .getIsalesvoucherid());
                            stscom.setId(sid);
                            stscom.setDtstartdate(sts.getDtstartdate());
                            stscom.setDtenddate(sts.getDtenddate());
                            stscom.setIcrowdkindpriceid(sts
                                    .getIcrowdkindpriceid());
                            stscom.setIsplitamount(new Long(1));
                            stscom.setMsplitmoney(sts.getMsplitprice());
                            stscom.setMsplitprice(sts.getMsplitprice());
                            stscom.setItickettypeid(sts.getItickettypeid());
                            stscom.setIztickettypeid(sts.getIztickettypeid());
                            stscom.setTripid(sts.getTripid());
                            stscom.setIvenueid(sts.getIvenueid());
                            stscom.setIvenueareaid(sts.getIvenueareaid());
                            stscom.setIvenueseatsid(sts.getIvenueseatsid());
                            // 计算手续费
                            // 查询该票是否有退订费率

                            List tdlist = timeSharingDao
                                    .find(" from Ticketxgz where itickettypeid="
                                            + sts.getIztickettypeid());
                            if (tdlist.size() == 0) {
                                stscom.setTdfl(new Double(0));
                            } else {
                                Ticketxgz tcx = (Ticketxgz) tdlist.get(0);
                                if (tcx.getJsfs().equals("0001")) {
                                    // 按小时计算
                                    long hours = 0;
                                    DateFormat df = new SimpleDateFormat(
                                            "yyyy-MM-dd HH:mm:ss");
                                    String bztime = sts.getDtenddate();
                                    try {
                                        Date d1 = df.parse(nowtime);
                                        Date d2 = df.parse(bztime);
                                        long diff = d2.getTime() - d1.getTime();
                                        hours = diff / (1000 * 60 * 60);
                                    } catch (ParseException e1) {
                                        // TODO Auto-generated catch block
                                        e1.printStackTrace();
                                    }
                                    if (hours < 0) {
                                        if (tcx.getXyjs2() == 0) {
                                            rs.addRow(new String[] {
                                                    "false",
                                                    s.getSzticketprintno()
                                                            + "的票过期票不能在出票口退票" });
                                            return rs;
                                        } else {
                                            // 将退订费率保存
                                            stscom.setTdfl(tcx.getXyrate2());
                                        }
                                    } else {
                                        List fllist = timeSharingDao
                                                .find("from Changebackrate where gzid="
                                                        + tcx.getGzid()
                                                        + " and time>="
                                                        + hours
                                                        + " order by time");
                                        if (fllist == null
                                                || fllist.size() == 0) {
                                            stscom.setTdfl(new Double(0));
                                        } else {
                                            Changebackrate grate = (Changebackrate) fllist
                                                    .get(0);
                                            // 将退订费率保存
                                            stscom.setTdfl(grate.getTdfl());
                                        }
                                    }
                                } else if (tcx.getJsfs().equals("0002")) {
                                    // 按天计算退订费率
                                    long days = 0;
                                    DateFormat df = new SimpleDateFormat(
                                            "yyyy-MM-dd HH:mm:ss");
                                    String bztime = sts.getDtenddate();
                                    try {
                                        Date d1 = df.parse(nowtime);
                                        Date d2 = df.parse(bztime);
                                        long diff = d2.getTime() - d1.getTime();
                                        days = diff / (1000 * 60 * 60 * 24);
                                    } catch (ParseException e1) {
                                        // TODO Auto-generated catch block
                                        e1.printStackTrace();
                                    }
                                    if (days < 0) {
                                        if (tcx.getXyjs2() == 0) {
                                            rs.addRow(new String[] {
                                                    "false",
                                                    s.getSzticketprintno()
                                                            + "的票过期票不能在出票口退票" });
                                            return rs;
                                        } else {
                                            // 将退订费率保存
                                            stscom.setTdfl(tcx.getXyrate2());
                                        }
                                    } else {
                                        List fllist = timeSharingDao
                                                .find("from Changebackrate where gzid="
                                                        + tcx.getGzid()
                                                        + " and time>="
                                                        + days
                                                        + " order by time");
                                        if (fllist == null
                                                || fllist.size() == 0) {
                                            stscom.setTdfl(new Double(0));
                                        } else {
                                            Changebackrate grate = (Changebackrate) fllist
                                                    .get(0);
                                            // 将退订费率保存
                                            stscom.setTdfl(grate.getTdfl());
                                        }
                                    }
                                } else if (tcx.getJsfs().equals("0003")) {
                                    // 常年
                                    long days = 0;
                                    DateFormat df = new SimpleDateFormat(
                                            "yyyy-MM-dd HH:mm:ss");
                                    String bztime = sts.getDtenddate();
                                    try {
                                        Date d1 = df.parse(nowtime);
                                        Date d2 = df.parse(bztime);
                                        long diff = d2.getTime() - d1.getTime();
                                        days = diff / (1000 * 60 * 60 * 24);
                                    } catch (ParseException e1) {
                                        // TODO Auto-generated catch block
                                        e1.printStackTrace();
                                    }
                                    if (days < 0) {
                                        if (tcx.getXyjs2() == 0) {
                                            rs.addRow(new String[] {
                                                    "false",
                                                    s.getSzticketprintno()
                                                            + "的票过期票不能在出票口退票" });
                                            return rs;
                                        } else {
                                            // 将退订费率保存
                                            stscom.setTdfl(tcx.getXyrate2());
                                        }
                                    } else {
                                        List fllist = timeSharingDao
                                                .find("from Changebackrate where gzid="
                                                        + tcx.getGzid());
                                        Changebackrate grate = (Changebackrate) fllist
                                                .get(0);
                                        // 将退订费率保存
                                        stscom.setTdfl(grate.getTdfl());
                                    }
                                }
                            }
                            stscom.setMhandcharge(sts.getMsplitprice()
                                    * stscom.getTdfl());
                            stscom.setIversion(new Long(0));
                            comlist.add(stscom);
                            stssalesvoucherdetailstab.setComlist(comlist);
                            // 跟新凭证明细金额数据
                            stssalesvoucherdetailstab
                                    .setMactualsaleprice(stssalesvoucherdetailstab
                                            .getMactualsaleprice()
                                            + sts.getMsplitprice());
                            stssalesvoucherdetailstab
                                    .setMhandcharge(stssalesvoucherdetailstab
                                            .getMhandcharge()
                                            + sts.getMsplitprice()
                                            * stscom.getTdfl());// 手续费
                            stssalesvoucherdetailstab
                                    .setMeventmoney(stssalesvoucherdetailstab
                                            .getMeventmoney()
                                            + sts.getMsplitprice());
                            stssalesvoucherdetailstab
                                    .setMtotalamount(stssalesvoucherdetailstab
                                            .getMtotalamount()
                                            + sts.getMsplitprice());
                            // 跟新凭证金额数据
                            stssalesvouchertab
                                    .setIaccountreceivable(stssalesvouchertab
                                            .getIaccountreceivable()
                                            + sts.getMsplitprice()
                                            * (1 - stscom.getTdfl()));
                            stssalesvouchertab
                                    .setIacceptmoney(stssalesvouchertab
                                            .getIacceptmoney()
                                            + sts.getMsplitprice()
                                            * (1 - stscom.getTdfl()));
                        }
                    }
                }
            }
            slist.add(s);
        }
        // 将最后一个凭证明细添加到LIST
        stssalelist.add(stssalesvoucherdetailstab);
        // 结算表中添加数据
        int isnet = 0;
        if (oldstssalesvouchertab.getSzsalesvoucherno().substring(8, 11)
                .equals("000")) {
            isnet = 1;
        }
        Stssalessettlementtab st = new Stssalessettlementtab();
        StssalessettlementtabId sid = new StssalessettlementtabId();
        sid.setIsalesvoucherid(stssalesvouchertab.getId().getIsalesvoucherid());
        sid.setIticketstationid(stssalesvouchertab.getId()
                .getIticketstationid());
        sid.setIsalessettlementid(new Long(1));
        st.setId(sid);
        st.setSettlementdata(nowtime.substring(0, 10));
        st.setSettlementtime(nowtime.substring(11));
        if (isnet == 1) {
            st.setIsettlementid("01");
        } else {
            st.setIsettlementid("00");
        }
        st.setMsettlementmoney(stssalesvouchertab.getIacceptmoney());
        st.setIversion(new Long(1));
        // System.out.println("开始保存");
        timeSharingDao.save(stssalesvouchertab);
        // 将网上订单数据保存到本地的订单表中
        if (isnet == 1) {
            MOrder morder = new MOrder();
            morder.setOrid(stssalesvouchertab.getSzsalesvoucherno());
            morder.setOrtp("02");// 退订单
            morder.setOrda(nowtime.substring(0, 10));
            morder.setOrti(nowtime.substring(11));
            morder.setUsid(stssalesvouchertab.getUsid());
            morder.setIsjl(new Long(0));
            morder.setMont(stssalesvouchertab.getIacceptmoney());
            morder.setZfmont(stssalesvouchertab.getIacceptmoney());
            morder.setDdzt("03");
            morder.setIsallcp(new Long(0));
            timeSharingDao.save(morder);
            YOrder yorder = new YOrder();
            YOrder oldyorder = (YOrder) timeSharingDao.get(YOrder.class,
                    new YOrderId(oldstssalesvouchertab.getSzsalesvoucherno(),
                            oldstssalesvouchertab.getIscenicid()));
            YOrderId yid = new YOrderId();
            yid.setOrid(stssalesvouchertab.getSzsalesvoucherno());
            yid.setIscenicid(stssalesvouchertab.getIscenicid());
            yorder.setId(yid);
            yorder.setScenictype("01");
            yorder.setUsid(stssalesvouchertab.getUsid());
            yorder.setIbusinessid(stssalesvouchertab.getIbusinessid());
            yorder.setDtstartdate(oldyorder.getDtstartdate());
            yorder.setDtenddate(oldyorder.getDtenddate());
            yorder.setOrnm(oldyorder.getOrnm());
            yorder.setOrzj(oldyorder.getOrzj());
            yorder.setOrhm(oldyorder.getOrhm());
            yorder.setMont(stssalesvouchertab.getIacceptmoney());
            yorder.setZfmont(stssalesvouchertab.getIacceptmoney());
            timeSharingDao.save(yorder);
        }
        timeSharingDao.save(st);
        for (int i = 0; i < stssalelist.size(); i++) {
            Stssalesvoucherdetailstab ss = (Stssalesvoucherdetailstab) stssalelist
                    .get(i);
            if (isnet == 1) {
                YOrderlist yorderlist = new YOrderlist();
                YOrderlistId ylid = new YOrderlistId();
                ylid.setIscenicid(stssalesvouchertab.getIscenicid());
                ylid.setOrid(stssalesvouchertab.getSzsalesvoucherno());
                ylid.setOrderlistid(ss.getId().getIsalesvoucherdetailsid());
                yorderlist.setId(ylid);
                yorderlist.setItickettypeid(ss.getItickettypeid());
                yorderlist.setIcrowdkindid(ss.getIticketwinid());
                yorderlist.setIcrowdkindpriceid(ss.getIcrowdkindpriceid());
                yorderlist.setDtstartdate(ss.getDtstartdate());
                yorderlist.setDtenddate(ss.getDtenddate());
                yorderlist.setNumb(ss.getIticketnum());
                yorderlist.setPric(ss.getMactualsaleprice());
                yorderlist.setAmnt(ss.getMeventmoney());// 订单金额-手续费
                yorderlist.setMhandcharge(ss.getMhandcharge());
                timeSharingDao.save(yorderlist);
            }
            timeSharingDao.save(ss);
            List comlist = ss.getComlist();
            for (int j = 0; j < comlist.size(); j++) {
                Stscomticketsalesdetailstab stscom = (Stscomticketsalesdetailstab) comlist
                        .get(j);
                if (isnet == 1) {

                }
                timeSharingDao.save(stscom);
            }
        }
        for (int i = 0; i < slist.size(); i++) {
            Stssoldtickettab s3 = (Stssoldtickettab) slist.get(i);
            timeSharingDao.update(s3);
        }
        for (int i = 0; i < zslist.size(); i++) {
            Stssoldticketsubtab zs = (Stssoldticketsubtab) zslist.get(i);
            timeSharingDao.delete(zs);
        }

        rs.addRow(new String[] { "true",
                stssalesvouchertab.getId().getIsalesvoucherid().toString() });
        return rs;
    }

    public ResultBean getreturnticketsconsole(List returnmodellist,
                                              Stssalesvouchertab stssalesvouchertab, Long isqt) {
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        String productcontrols = "";
        int shifoujp = 0;
        for (int i = 0; i < returnmodellist.size(); i++) {
            System.out.println("getreturnticketsconsole1");
            Returnmodel rt = (Returnmodel) returnmodellist.get(i);
            List list = timeSharingDao
                    .find("from Stssoldtickettab where szticketprintno='"
                            + rt.getSzticketprintno()
                            + "' and id.isalesvoucherid="
                            + stssalesvouchertab.getId().getIsalesvoucherid()
                            + " order by dtmakedate desc");
            Stssoldtickettab s = (Stssoldtickettab) list.get(0);
            Esbscenicareatab es = (Esbscenicareatab) timeSharingDao.get(
                    Esbscenicareatab.class, s.getIscenicid());

            if (s.getByvalidity().equals("02")) {
                rs.addRow(new String[] { "false",
                        s.getSzticketprintno() + "已挂失,不能退订" });
                return rs;
            }
            if (stssalesvouchertab.getId().getIsalesvoucherid().longValue() != s
                    .getId().getIsalesvoucherid().longValue()
                    || stssalesvouchertab.getId().getIticketstationid()
                    .longValue() != s.getId().getIticketstationid()
                    .longValue()) {
                rs.addRow(new String[] { "false",
                        s.getSzticketprintno() + "不属于同一售票凭证" });
                return rs;
            }
            System.out.println("getreturnticketsconsole2");
            String[] iztickettypeid = rt.getItickettypeids();
            // 取出该票的事前优惠信息
            Edmtickettypetab edmtickettypetab = (Edmtickettypetab) this.timeSharingDao
                    .get(Edmtickettypetab.class, s.getItickettypeid());
            if (edmtickettypetab.getBycategorytype().equals("0010")) {
                // 该票是套票

                List edlist = timeSharingDao
                        .find(" from Edpofferschemetab where itickettypeid="
                                + s.getItickettypeid() + " and ibusinessid="
                                + s.getIbusinessid() + " and icrowdkindid="
                                + s.getIcrowdkindid() + " and startdata<='"
                                + s.getDtstartdate() + "' and enddata>='"
                                + s.getDtstartdate()
                                + "' and ioffertype=0 and byisuse=1 ");
                if (edlist != null && edlist.size() > 0) {
                    // 存在优惠
                    // 读取售出门票子表条数 比较退订子票与售出门票子表数量是否一致
                    // 不一致没有全部退订返回错误 套票子票在有事前优惠的情况下不能单独退订
                    List zglist = timeSharingDao
                            .find(" from Stscomticketsalesdetailstab where isalesvoucherid="
                                    + s.getId().getIsalesvoucherid()
                                    + " and iticketstationid="
                                    + s.getId().getIticketstationid()
                                    + " and isalesvoucherdetailsid="
                                    + s.getId().getIsalesvoucherdetailsid());
                    if (zglist.size() != iztickettypeid.length) {
                        rs.addRow(new String[] { "false",
                                s.getSzticketprintno() + "套票不能单独退订子票" });
                        return rs;
                    }
                } else {// 服务商优惠 2014-04-03 lijingrui 增加
                    List scenList = timeSharingDao
                            .find(" from Edpofferschemetab where iscenicid="
                                    + s.getIscenicid() + " and startdata<='"
                                    + s.getDtstartdate() + "' and enddata>='"
                                    + s.getDtstartdate()
                                    + "' and ioffertype=1 and byisuse=1 ");
                    if (scenList != null && scenList.size() > 0) {

                        List zglist = timeSharingDao
                                .find(" from Stscomticketsalesdetailstab where isalesvoucherid="
                                        + s.getId().getIsalesvoucherid()
                                        + " and iticketstationid="
                                        + s.getId().getIticketstationid()
                                        + " and isalesvoucherdetailsid="
                                        + s.getId().getIsalesvoucherdetailsid());
                        if (zglist.size() != iztickettypeid.length) {
                            rs.addRow(new String[] { "false",
                                    s.getSzticketprintno() + "套票不能单独退订子票" });
                            return rs;
                        }
                    }
                }
            }
            System.out.println("getreturnticketsconsole3");
            // 读取票信息
			/*
			 * if (iztickettypeid.length == 1) { // 判断该票是否车 Edmtickettypetab e =
			 * (Edmtickettypetab) this.timeSharingDao.get( Edmtickettypetab.class,
			 * new Long(iztickettypeid[0])); if
			 * (e.getBycategorytype().equals("0002")) { // 该票是车票
			 * 
			 * if (s.getItickettypeid().longValue() != e.getItickettypeid()
			 * .longValue()) { rs.addRow(new String[] { "false",
			 * s.getSzticketprintno() + "不能单独退订车票" }); return rs; } else { if
			 * (isqt == 0) { rs.addRow(new String[] { "false1",
			 * s.getSzticketprintno() + "是单独车票，退订需授权" }); return rs; } } } }
			 */
            // 取出售出凭证子表
            List zsdaillist = timeSharingDao
                    .find("from Stssoldticketsubtab where id.isalesvoucherid="
                            + s.getId().getIsalesvoucherid()
                            + " and id.iticketstationid="
                            + s.getId().getIticketstationid()
                            + " and id.isalesvoucherdetailsid="
                            + s.getId().getIsalesvoucherdetailsid()
                            + " and id.szsoldticketid="
                            + s.getId().getSzsoldticketid()
                            + " and isvalid=1 order by iztickettypeid");
            long ziztickettypeid = 0;
            int m = 0;
            int n = 0;
            System.out.println("getreturnticketsconsole4");
            for (int j = 0; j < zsdaillist.size(); j++) {
                Stssoldticketsubtab zs = (Stssoldticketsubtab) zsdaillist
                        .get(j);
                boolean shtd = false;

                for (int k = 0; k < iztickettypeid.length; k++) {

                    if (zs.getIztickettypeid().longValue() == Long
                            .parseLong(iztickettypeid[k])) {

                        if (ziztickettypeid == 0) {
                            m = m + 1;
                            ziztickettypeid = zs.getIztickettypeid();
                            // 根据首个票号判定该票是否已经检过票
                            if (i == 0) {

                                List yjlist = timeSharingDao
                                        .find("select sum(zs.ipassedtimes) from Stssoldticketsubtab zs where zs.id.isalesvoucherid="
                                                + s.getId()
                                                .getIsalesvoucherid()
                                                + " and zs.id.iticketstationid="
                                                + s.getId()
                                                .getIticketstationid()
                                                + " and zs.id.isalesvoucherdetailsid="
                                                + s.getId()
                                                .getIsalesvoucherdetailsid()
                                                + " and zs.id.szsoldticketid="
                                                + s.getId().getSzsoldticketid()
                                                + " and zs.isvalid=1 and zs.iztickettypeid="
                                                + ziztickettypeid);
                                if (yjlist != null && yjlist.size() > 0) {
                                    if (yjlist.get(0) != null) {
                                        if (new Long(yjlist.get(0).toString()) > 0) {
                                            shifoujp = 1;
                                        }
                                    }
                                }
                            } else {
                                List yjlist = timeSharingDao
                                        .find(" select sum(zs.ipassedtimes) from Stssoldticketsubtab zs where zs.id.isalesvoucherid="
                                                + s.getId()
                                                .getIsalesvoucherid()
                                                + " and zs.id.iticketstationid="
                                                + s.getId()
                                                .getIticketstationid()
                                                + " and zs.id.isalesvoucherdetailsid="
                                                + s.getId()
                                                .getIsalesvoucherdetailsid()
                                                + " and zs.id.szsoldticketid="
                                                + s.getId().getSzsoldticketid()
                                                + " and zs.isvalid=1 and zs.iztickettypeid="
                                                + ziztickettypeid);
                                if (shifoujp == 1) {
                                    if (yjlist != null && yjlist.size() > 0) {
                                        if (yjlist.get(0) != null) {
                                            if (new Long(yjlist.get(0)
                                                    .toString()) == 0) {
                                                rs.addRow(new String[] {
                                                        "false",
                                                        "未检的子票与检过的子票不能一起退订" });
                                                return rs;
                                            }
                                        }
                                    }
                                } else {
                                    if (yjlist != null && yjlist.size() > 0) {
                                        if (yjlist.get(0) != null) {
                                            if (new Long(yjlist.get(0)
                                                    .toString()) > 0) {

                                            }
                                        }
                                    }
                                }
                            }
                        } else {

                            if (ziztickettypeid != zs.getIztickettypeid()
                                    .longValue()) {
                                m = m + 1;
                                ziztickettypeid = zs.getIztickettypeid()
                                        .longValue();

                                List yjlist = timeSharingDao
                                        .find(" select sum(zs.ipassedtimes) from Stssoldticketsubtab zs where zs.id.isalesvoucherid="
                                                + s.getId()
                                                .getIsalesvoucherid()
                                                + " and zs.id.iticketstationid="
                                                + s.getId()
                                                .getIticketstationid()
                                                + " and zs.id.isalesvoucherdetailsid="
                                                + s.getId()
                                                .getIsalesvoucherdetailsid()
                                                + " and zs.id.szsoldticketid="
                                                + s.getId().getSzsoldticketid()
                                                + " and zs.isvalid=1 and zs.iztickettypeid="
                                                + ziztickettypeid);
                                if (shifoujp == 1) {
                                    if (yjlist != null && yjlist.size() > 0) {
                                        if (yjlist.get(0) != null) {
                                            if (new Long(yjlist.get(0)
                                                    .toString()) == 0) {
                                                rs.addRow(new String[] {
                                                        "false",
                                                        "未检的子票与检过的子票不能一起退订" });
                                                return rs;
                                            }
                                        }
                                    }

                                } else {
                                    if (yjlist != null && yjlist.size() > 0) {
                                        if (yjlist.get(0) != null) {
                                            if (new Long(yjlist.get(0)
                                                    .toString()) > 0) {
                                                rs.addRow(new String[] {
                                                        "false",
                                                        "检过的子票与未检的子票不能一起退订" });
                                                return rs;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        shtd = true;

                        if (shifoujp == 1) {
                            if (zs.getIpassedtimes() > 0) {
                                if (es.getIscanreturn() == 0) {
                                    rs.addRow(new String[] {
                                            "false",
                                            s.getSzticketprintno()
                                                    + "退订票务已经检过票，不能退订" });
                                    return rs;
                                } else {
                                    if (isqt == 0) {
                                        rs.addRow(new String[] {
                                                "false1",
                                                s.getSzticketprintno()
                                                        + "退订票务已经检过票，需授权退订" });
                                        return rs;
                                    }
                                }
                            }
                        }
                        if (shifoujp == 0) {
                            // 未检票务需要判断是否过期
                            DateFormat df = new SimpleDateFormat(
                                    "yyyy-MM-dd HH:mm:ss");
                            String bztime = zs.getDtenddate();
                            try {
                                Date d1 = df.parse(Tools.getDayTimes());
                                Date d2 = df.parse(bztime);
                                long diff = d2.getTime() - d1.getTime();
                                if (diff < 0) {

                                    if (es.getIscanreturn() == 0) {
                                        rs.addRow(new String[] {
                                                "false",
                                                s.getSzticketprintno()
                                                        + "退订票务已经过期" });
                                        return rs;
                                    } else {
                                        if (isqt == 0) {
                                            rs.addRow(new String[] {
                                                    "false1",
                                                    s.getSzticketprintno()
                                                            + "退订票务已经过期,需授权" });
                                            return rs;
                                        }
                                    }
                                    // 等于０
                                }
                            } catch (ParseException e1) {
                                // TODO Auto-generated catch block
                                e1.printStackTrace();
                            }
                        }
                    }
                }

                if (isqt == 0) {
                    if (!shtd) {
                        // 该票未退
                        if (zs.getTripid().longValue() > 0) {
                            List ll = this.timeSharingDao
                                    .find("select count(distinct iztickettypeid) from  Stssoldticketsubtab where id.isalesvoucherid="
                                            + s.getId().getIsalesvoucherid()
                                            + " and id.iticketstationid="
                                            + s.getId().getIticketstationid()
                                            + " and id.isalesvoucherdetailsid="
                                            + s.getId()
                                            .getIsalesvoucherdetailsid()
                                            + " and id.szsoldticketid="
                                            + s.getId().getSzsoldticketid()
                                            + " and isvalid=1 order by iztickettypeid");
                            Long zsize = new Long(ll.get(0).toString());

                            if (zsize - iztickettypeid.length == 1) {
                                // 该票只有这一张
                                Edmtickettypetab e = (Edmtickettypetab) this.timeSharingDao
                                        .get(Edmtickettypetab.class,
                                                zs.getIztickettypeid());
                                if (e.getBycategorytype().equals("0003")) {
                                    // 该票是竹筏
                                    rs.addRow(new String[] {
                                            "false1",
                                            s.getSzticketprintno()
                                                    + "退订只剩竹筏票,需授权" });
                                    return rs;
                                }
                            }
                        }
                    }
                }
            }
            System.out.println("getreturnticketsconsole5");
            if (m < iztickettypeid.length) {
                rs.addRow(new String[] { "false",
                        "票号" + s.getSzticketprintno() + "有子票已经退订或不存在" });
                return rs;
            }
            System.out.println("getreturnticketsconsole6");
            // 取出售出凭证子表
            List complist = timeSharingDao
                    .find(" from Stscomticketsalesdetailstab where id.isalesvoucherdetailsid="
                            + s.getId().getIsalesvoucherdetailsid()
                            + " and id.isalesvoucherid="
                            + s.getId().getIsalesvoucherid()
                            + " and id.iticketstationid="
                            + s.getId().getIticketstationid());
            for (int q = 0; q < complist.size(); q++) {
                Stscomticketsalesdetailstab stt = (Stscomticketsalesdetailstab) complist
                        .get(q);
                for (int k = 0; k < iztickettypeid.length; k++) {
                    if (stt.getIztickettypeid().longValue() == Long
                            .parseLong(iztickettypeid[k])) {
                        if (stt.getTripid() != null) {
                            if (stt.getTripid().longValue() > 0) {
                                productcontrols = productcontrols
                                        + stt.getIztickettypeid() + "&03&"
                                        + stt.getTripid() + "&"
                                        + stt.getDtstartdate().substring(0, 10)
                                        + "&1:";

                            }
                        }
                    }
                }
            }
            System.out.println("getreturnticketsconsole7");
        }

        if (!productcontrols.equals("")) {
            productcontrols = productcontrols.substring(0,
                    productcontrols.length() - 1);
        }
        rs.addRow(new String[] { "true", productcontrols });
        return rs;
    }

    public String updateMaxNo(String Saleid) throws SQLException {
        return timeSharingService.getMaxNo(Saleid);
    }

    public Esbticketwintab getEsbticketwintab(Long newiticketwinid) {

        return (Esbticketwintab) timeSharingDao.get(Esbticketwintab.class,
                newiticketwinid);
    }

    public ResultBean savereturntickets(
            Stssalesvouchertab oldstssalesvouchertab, List returnmodellist,
            Esbticketwintab e, Long iemployeeid, String szsalesvoucherno,
            Long maxid, Long isqt, Long forceemid, String forcenote, Long issx,
            String productcontrols,String url) throws Exception {
    	if(url==null || url.length()<1){
    		url=WebContant.GetKeyValue("CenterUrl");
    	}
        String nowtime = Tools.getDayTimes();
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        // 查询所有票号所有售出门票表信息
        List plist = new ArrayList();

        List zslist = new ArrayList();// 需删除的Stssol;dticketsubtab表中信息
        List slist = new ArrayList();// 需要修改的Stssoldtickettab表信息
        List stssalelist = new ArrayList();// 需要增加的Stssalesvoucherdetailstab表信息
        // 新的销售凭证表
        List ystssalelist = new ArrayList();// 原销售凭证明细
        List yxsyhlist = new ArrayList(); // 服务商优惠的原销售凭证明细
        List comtlist = new ArrayList(); // 服务商优惠的原票务明细表

        Stssalesvouchertab stssalesvouchertab = new Stssalesvouchertab();
        Long isalesvoucherid = oldstssalesvouchertab.getId()
                .getIsalesvoucherid();
        Long iticketstationid = oldstssalesvouchertab.getId()
                .getIticketstationid();
        StssalesvouchertabId stssalesvouchertabid = new StssalesvouchertabId();
        stssalesvouchertabid.setIticketstationid(e.getIticketstationid());
        stssalesvouchertabid.setIsalesvoucherid(new Long(maxid));
        stssalesvouchertab.setId(stssalesvouchertabid);
        stssalesvouchertab.setIscenicid(oldstssalesvouchertab.getIscenicid());
        stssalesvouchertab.setIticketwinid(e.getIticketwinid());
        stssalesvouchertab.setIbusinessid(oldstssalesvouchertab
                .getIbusinessid());
        stssalesvouchertab.setIhandler(iemployeeid);
        stssalesvouchertab.setIpayeer(iemployeeid);
        stssalesvouchertab.setForcedrefund(forcenote);
        if (isqt.longValue() == 1) {
            stssalesvouchertab.setImaker(forceemid);

        } else {
            stssalesvouchertab.setImaker(iemployeeid);
        }
        stssalesvouchertab.setIauditor(iemployeeid);
        stssalesvouchertab.setDyusid(oldstssalesvouchertab.getDyusid());
        stssalesvouchertab.setIaccountreceivable(new Double(0));
        stssalesvouchertab.setIacceptmoney(new Double(0));
        stssalesvouchertab.setIgivechange(new Double(0));
        stssalesvouchertab.setIyear(new Long(nowtime.substring(0, 4)));
        stssalesvouchertab.setImonth(new Long(nowtime.substring(5, 7)));
        stssalesvouchertab.setIday(new Long(nowtime.substring(8, 10)));
        stssalesvouchertab.setDtmakedate(nowtime);
        stssalesvouchertab.setDtauditdate(nowtime.substring(0, 10));
        stssalesvouchertab.setUsid(oldstssalesvouchertab.getUsid());
        stssalesvouchertab.setBisintegral(new Long(0));
        stssalesvouchertab.setByprintinvoice(new Long(0));
        stssalesvouchertab.setBysplitway(new Long(2));
        stssalesvouchertab.setBisreturn(new Long(1));
        stssalesvouchertab.setBysalesvouchertype("02");
        stssalesvouchertab.setBypostrecord(new Long(0));
        stssalesvouchertab.setBysalesvoucherstate(new Long(1));
        stssalesvouchertab.setBispay(new Long(0));
        stssalesvouchertab.setBispayee(new Long(0));
        stssalesvouchertab.setMhandcharge(new Double(0));
        stssalesvouchertab.setIssalesvoucherid(oldstssalesvouchertab.getId()
                .getIsalesvoucherid());
        stssalesvouchertab.setIsticketstationid(oldstssalesvouchertab.getId()
                .getIticketstationid());
        stssalesvouchertab.setSzsalesvoucherno(szsalesvoucherno);
        List seatlist = new ArrayList();// 读取订单的座位数
        // 新建stssalesvouchertab完成
        System.out.println("00000");

        Long numbs = 0L; // 此销售凭证总的使用数量 服务商优惠添加
        List detailList = timeSharingDao
                .find("select sum(st.iremainnum*st.iplayerperticket) as numb from Stssoldtickettab st where st.id.isalesvoucherid="
                        + oldstssalesvouchertab.getId().getIsalesvoucherid()
                        + " and st.byvalidity='00'  ");
        System.out
                .println("select sum(st.iremainnum*st.iplayerperticket) as numb from Stssoldtickettab st where st.id.isalesvoucherid="
                        + oldstssalesvouchertab.getId().getIsalesvoucherid()
                        + " and st.byvalidity='00'  ");
        if (detailList != null && detailList.size() > 0) {
            if (detailList.get(0) == null || detailList.get(0).equals("")) {

            } else {
                numbs = (Long) detailList.get(0);
            }

        }
        Long offernum = 0L; // 退票数量

        for (int i = 0; i < returnmodellist.size(); i++) {
            Returnmodel returnmodel = (Returnmodel) returnmodellist.get(i);
            // System.out.println("根据票号读取该售出票信息" +
            // returnmodel.getSzticketprintno());
            Long jmnumb = new Long(0);// 免票数量
            System.out.println("00001");
            List list = timeSharingDao
                    .find("from Stssoldtickettab where szticketprintno='"
                            + returnmodel.getSzticketprintno()
                            + "' and id.isalesvoucherid="
                            + oldstssalesvouchertab.getId()
                            .getIsalesvoucherid()
                            + " order by dtmakedate desc");
            Stssoldtickettab stssoldtickettab = (Stssoldtickettab) list.get(0);
            // 读取原凭证明细

            boolean b = false;
            Stssalesvoucherdetailstab ystssalesvoucherdetailstab = null;
            for (int a = 0; a < ystssalelist.size(); a++) {
                ystssalesvoucherdetailstab = (Stssalesvoucherdetailstab) ystssalelist
                        .get(a);
                if (ystssalesvoucherdetailstab.getId()
                        .getIsalesvoucherdetailsid() == stssoldtickettab
                        .getId().getIsalesvoucherdetailsid()
                        && ystssalesvoucherdetailstab.getId()
                        .getIsalesvoucherid() == stssoldtickettab
                        .getId().getIsalesvoucherid()
                        && ystssalesvoucherdetailstab.getId()
                        .getIticketstationid() == stssoldtickettab
                        .getId().getIticketstationid()) {
                    b = true;

                    break;
                }
            }
            if (!b) {
                ystssalesvoucherdetailstab = (Stssalesvoucherdetailstab) timeSharingDao
                        .get(Stssalesvoucherdetailstab.class,
                                new StssalesvoucherdetailstabId(
                                        stssoldtickettab.getId()
                                                .getIsalesvoucherdetailsid(),
                                        isalesvoucherid, iticketstationid));
                ystssalelist.add(ystssalesvoucherdetailstab);
            }

            boolean bs = false; // 判断是否优惠
            double newamnt = 0D;
            double tdamnt = 0D;
            // 2014-04-03 lijingrui
            // 根据售票门票表 判断此产品所在服务商是否有服务商优惠
            List offerList = timeSharingDao
                    .find("from Edpofferschemetab where iscenicid='"
                            + stssoldtickettab.getIscenicid()
                            + "' and startdata<='"
                            + stssoldtickettab.getDtstartdate()
                            + "' and enddata>='"
                            + stssoldtickettab.getDtstartdate()
                            + "' and byisuse=1 and ioffertype=1 ");
            if (offerList != null && offerList.size() > 0) {
                Edpofferschemetab edpoffer = (Edpofferschemetab) offerList
                        .get(0);
                offernum += stssoldtickettab.getIplayerperticket();// 退票数量

                String yhlx = "0";// 获取优惠方式 0 -最高价 1-最低价
                Hotelprovider hotel = (Hotelprovider) this.timeSharingDao.get(
                        Hotelprovider.class, stssoldtickettab.getIscenicid());
                if (hotel != null && hotel.getInoteger8() != null) {
                    yhlx = hotel.getInoteger8().toString();
                }

                // 获取退票后可优惠的数量
                Long yhnums = (numbs - offernum) / edpoffer.getImultiples()
                        * edpoffer.getIoffernum();
                // 原销售凭证的优惠数量
                Long ysnums = (numbs - offernum + stssoldtickettab
                        .getIplayerperticket())
                        / edpoffer.getImultiples()
                        * edpoffer.getIoffernum();
                // 退票后优惠数量小于原优惠数量 说明退票退 退票金额-优惠票的金额
                if (yhnums != ysnums && ysnums > yhnums) {
                    bs = true;
                    List vourcherList = new ArrayList();
                    if (yhlx.equals("0")) { // 最高价优惠
                        vourcherList = timeSharingDao
                                .find(" from Stssalesvoucherdetailstab st where st.id.isalesvoucherid="
                                        + oldstssalesvouchertab.getId()
                                        .getIsalesvoucherid()
                                        + "  and st.id.iticketstationid="
                                        + oldstssalesvouchertab.getId()
                                        .getIticketstationid()
                                        + " and st.ioffersschemeid>0 order by st.mactualsaleprice desc");

                    } else {
                        vourcherList = timeSharingDao
                                .find(" from Stssalesvoucherdetailstab st where st.id.isalesvoucherid="
                                        + oldstssalesvouchertab.getId()
                                        .getIsalesvoucherid()
                                        + "  and st.id.iticketstationid="
                                        + oldstssalesvouchertab.getId()
                                        .getIticketstationid()
                                        + " and st.ioffersschemeid>0 order by st.mactualsaleprice");

                    }

                    Long yhsl = ysnums - yhnums; // 要退的优惠票数量

                    if (vourcherList != null && vourcherList.size() > 0) {
                        Long salenum = 0L;
                        for (int q = 0; q < vourcherList.size(); q++) {
                            Stssalesvoucherdetailstab voucher = (Stssalesvoucherdetailstab) vourcherList
                                    .get(q);
                            salenum = voucher.getIderatenums()
                                    - voucher.getIpresentnums(); // 优惠数量

                            if (yhsl <= salenum) {
                                // 优惠金额
                                newamnt += voucher.getMactualsaleprice() * yhsl;
                                // 退票金额
                                tdamnt += ystssalesvoucherdetailstab
                                        .getMactualsaleprice()
                                        * yhsl
                                        - voucher.getMactualsaleprice() * yhsl;
                                voucher.setMpresentmoney(voucher
                                        .getMpresentmoney()
                                        + voucher.getMactualsaleprice() * yhsl);
                                voucher.setIpresentnums(voucher
                                        .getIpresentnums()
                                        + stssoldtickettab
                                        .getIplayerperticket());

                                jmnumb += yhsl;

                                yxsyhlist.add(voucher);

                                List zdaillist = timeSharingDao
                                        .find("from Stscomticketsalesdetailstab where  id.isalesvoucherid="
                                                + isalesvoucherid
                                                + " and id.iticketstationid="
                                                + iticketstationid
                                                + " and id.isalesvoucherdetailsid="
                                                + voucher
                                                .getId()
                                                .getIsalesvoucherdetailsid()
                                                + " order by isalesvoucherdetailsid");
                                if (zdaillist != null && zdaillist.size() > 0) {
                                    for (int z = 0; z < zdaillist.size(); z++) {
                                        Stscomticketsalesdetailstab comt = (Stscomticketsalesdetailstab) zdaillist
                                                .get(z);
                                        comt.setIderatenums(comt
                                                .getIderatenums() - yhsl);
                                        comt.setMderatemoney(comt
                                                .getMderatemoney()
                                                - yhsl
                                                * comt.getMsplitprice());
                                        comtlist.add(comt);
                                    }
                                }

                                break;
                            } else {
                                // 计算新的总金额
                                newamnt += (ystssalesvoucherdetailstab
                                        .getIuseablenessnum() - ystssalesvoucherdetailstab
                                        .getIpresentnums())
                                        * ystssalesvoucherdetailstab
                                        .getMactualsaleprice()
                                        - voucher.getMactualsaleprice()
                                        * salenum;
                                tdamnt += ystssalesvoucherdetailstab
                                        .getMactualsaleprice()
                                        * salenum
                                        - voucher.getMactualsaleprice()
                                        * salenum;
                                voucher.setMpresentmoney(voucher
                                        .getMpresentmoney()
                                        + voucher.getMactualsaleprice()
                                        * salenum);
                                voucher.setIpresentnums(voucher
                                        .getIpresentnums()
                                        + stssoldtickettab
                                        .getIplayerperticket());

                                jmnumb += salenum;

                                yhsl = yhsl - salenum;

                                yxsyhlist.add(voucher);

                                List zdaillist = timeSharingDao
                                        .find("from Stscomticketsalesdetailstab where  id.isalesvoucherid="
                                                + isalesvoucherid
                                                + " and id.iticketstationid="
                                                + iticketstationid
                                                + " and id.isalesvoucherdetailsid="
                                                + voucher
                                                .getId()
                                                .getIsalesvoucherdetailsid()
                                                + " order by isalesvoucherdetailsid");
                                if (zdaillist != null && zdaillist.size() > 0) {
                                    for (int z = 0; z < zdaillist.size(); z++) {
                                        Stscomticketsalesdetailstab comt = (Stscomticketsalesdetailstab) zdaillist
                                                .get(z);
                                        comt.setIderatenums(comt
                                                .getIderatenums() - salenum);
                                        comt.setMderatemoney(comt
                                                .getMderatemoney()
                                                - salenum
                                                * comt.getMsplitprice());
                                        comtlist.add(comt);
                                    }
                                }
                            }

                        }
                    }

                }

            } else {
                System.out.println("00002");
                if (ystssalesvoucherdetailstab.getIoffersschemeid() > 0) {
                    // 销售过优惠
                    // 判断是否退订该票是减免金额的票
                    Edpofferschemetab edpofferschemetab = (Edpofferschemetab) timeSharingDao
                            .get(Edpofferschemetab.class,
                                    ystssalesvoucherdetailstab
                                            .getIoffersschemeid());
                    // 计算新的总金额
                    newamnt = (ystssalesvoucherdetailstab.getIuseablenessnum()
                            - ystssalesvoucherdetailstab.getIpresentnums()
                            - stssoldtickettab.getIplayerperticket() - (ystssalesvoucherdetailstab
                            .getIuseablenessnum()
                            - ystssalesvoucherdetailstab.getIpresentnums() - stssoldtickettab
                            .getIplayerperticket())
                            / edpofferschemetab.getImultiples()
                            * edpofferschemetab.getIoffernum())

                            * ystssalesvoucherdetailstab.getMactualsaleprice();
                    System.out
                            .println((ystssalesvoucherdetailstab
                                    .getIuseablenessnum()
                                    - ystssalesvoucherdetailstab
                                    .getIpresentnums() - stssoldtickettab
                                    .getIplayerperticket())
                                    / edpofferschemetab.getImultiples()
                                    * edpofferschemetab.getIoffernum());
                    System.out.println("newamnt=" + newamnt);
                    tdamnt = ystssalesvoucherdetailstab.getMeventmoney()
                            - ystssalesvoucherdetailstab.getMderatemoney()
                            - ystssalesvoucherdetailstab.getMpresentmoney()
                            - newamnt;
                    System.out.println("tdamnt=" + tdamnt);
                    ystssalesvoucherdetailstab
                            .setMpresentmoney(ystssalesvoucherdetailstab
                                    .getMpresentmoney() + tdamnt);

                    ystssalesvoucherdetailstab
                            .setIpresentnums(ystssalesvoucherdetailstab
                                    .getIpresentnums()
                                    + stssoldtickettab.getIplayerperticket());
                    jmnumb = stssoldtickettab.getIplayerperticket()
                            - (long) (tdamnt / ystssalesvoucherdetailstab
                            .getMactualsaleprice());
                    System.out.println("jmnumb=" + jmnumb);
                }
            }

            System.out.println("111111111111111111111111111=");
            // System.out.println("新建凭证明细" +
            // stssoldtickettab.getSzticketprintno());
            Stssalesvoucherdetailstab stssalesvoucherdetailstab = new Stssalesvoucherdetailstab();
            StssalesvoucherdetailstabId id = new StssalesvoucherdetailstabId();
            id.setIsalesvoucherdetailsid(new Long(i + 1));
            id.setIticketstationid(e.getIticketstationid());
            id.setIsalesvoucherid(stssalesvouchertab.getId()
                    .getIsalesvoucherid());
            stssalesvoucherdetailstab.setId(id);
            stssalesvoucherdetailstab.setDtstartdate(ystssalesvoucherdetailstab
                    .getDtstartdate());
            stssalesvoucherdetailstab.setDtenddate(ystssalesvoucherdetailstab
                    .getDtenddate());
            stssalesvoucherdetailstab.setIticketwinid(e.getIticketwinid());
            stssalesvoucherdetailstab
                    .setIcrowdkindpriceid(ystssalesvoucherdetailstab
                            .getIcrowdkindpriceid());
            stssalesvoucherdetailstab
                    .setItickettypeid(ystssalesvoucherdetailstab
                            .getItickettypeid());
            stssalesvoucherdetailstab.setIplayerperticket(stssoldtickettab
                    .getIplayerperticket());// 人/张
            stssalesvoucherdetailstab.setIticketnum(new Long(1));// 张数
            stssalesvoucherdetailstab.setIticketplayer(stssoldtickettab
                    .getIplayerperticket());
            stssalesvoucherdetailstab.setDtstartdate(ystssalesvoucherdetailstab
                    .getDtstartdate());
            stssalesvoucherdetailstab.setDtenddate(ystssalesvoucherdetailstab
                    .getDtenddate());
            stssalesvoucherdetailstab.setIstartid(new Long(0));
            stssalesvoucherdetailstab.setIendid(new Long(0));
            stssalesvoucherdetailstab.setSzstartserial("0");
            stssalesvoucherdetailstab.setSzendserial("0");
            stssalesvoucherdetailstab
                    .setIoffersschemeid(ystssalesvoucherdetailstab
                            .getIoffersschemeid());
            stssalesvoucherdetailstab.setIpresentnums(new Long(0));
            stssalesvoucherdetailstab.setIderatenums(jmnumb);
            stssalesvoucherdetailstab.setIamount(stssoldtickettab
                    .getIplayerperticket());
            stssalesvoucherdetailstab.setIfactnum(new Long(0)); // 交易数量
            stssalesvoucherdetailstab.setIuseablenessnum(stssoldtickettab
                    .getIplayerperticket());// 使用数量
            stssalesvoucherdetailstab.setMderatemoney(new Double(0));// 减免金额
            stssalesvoucherdetailstab.setMpresentmoney(new Double(0));// 赠送金额
            stssalesvoucherdetailstab.setMnominalfee(new Double(0));// 工本费
            stssalesvoucherdetailstab.setMdeposit(new Double(0));
            stssalesvoucherdetailstab.setMhandcharge(new Double(0));// 手续费
            stssalesvoucherdetailstab.setByconsumetype("00");
            stssalesvoucherdetailstab.setIconsumenum(new Double(0));
            stssalesvoucherdetailstab.setItotalminutes(new Long(0));
            stssalesvoucherdetailstab.setByisout(new Long(0));
            stssalesvoucherdetailstab.setDtmakedate(nowtime);
            stssalesvoucherdetailstab.setIversion(new Long(0));
            stssalesvoucherdetailstab.setMactualsaleprice(new Double(0));
            stssalesvoucherdetailstab.setMeventmoney(new Double(0));
            stssalesvoucherdetailstab.setItotalnumber(new Long(0));
            stssalesvoucherdetailstab.setMtotalamount(new Double(0));
            stssalesvoucherdetailstab.setSzstartserial(returnmodel
                    .getSzticketprintno());
            stssalesvoucherdetailstab.setSzendserial(returnmodel
                    .getSzticketprintno());
            stssalesvoucherdetailstab.setIstartid(stssoldtickettab
                    .getIserialnum());
            stssalesvoucherdetailstab.setIendid(stssoldtickettab
                    .getIserialnum());
            stssalesvoucherdetailstab.setIderatenums(jmnumb);
            System.out.println("00002");
            List zsdaillist = timeSharingDao
                    .find("from Stssoldticketsubtab where id.isalesvoucherid="
                            + isalesvoucherid
                            + " and id.iticketstationid="
                            + iticketstationid
                            + " and id.isalesvoucherdetailsid="
                            + stssoldtickettab.getId()
                            .getIsalesvoucherdetailsid()
                            + " and id.szsoldticketid="
                            + stssoldtickettab.getId().getSzsoldticketid()
                            + " and isvalid=1 order by iztickettypeid");
            String[] iztickettypeid = returnmodel.getItickettypeids();
            int n = 0;
            long ziztickettypeid = 0;
            for (int j = 0; j < zsdaillist.size(); j++) {
                Stssoldticketsubtab zs = (Stssoldticketsubtab) zsdaillist
                        .get(j);
                for (int k = 0; k < iztickettypeid.length; k++) {
                    if (zs.getIztickettypeid().longValue() == Long
                            .parseLong(iztickettypeid[k])) {
                        n = n + 1;
                        zslist.add(zs);

                    }
                }
            }
            System.out.println("00003");
            // 根据明细子表中的数据计算明细的各种金额

            List zdaillist = timeSharingDao
                    .find("from Stscomticketsalesdetailstab where  id.isalesvoucherid="
                            + isalesvoucherid
                            + " and id.iticketstationid="
                            + iticketstationid
                            + " and id.isalesvoucherdetailsid="
                            + stssoldtickettab.getId()
                            .getIsalesvoucherdetailsid()
                            + " order by isalesvoucherdetailsid");

            List comlist = new ArrayList();
            System.out.println("00004");
            for (int j = 0; j < zdaillist.size(); j++) {

                Stscomticketsalesdetailstab sts = (Stscomticketsalesdetailstab) zdaillist
                        .get(j);
                for (int k = 0; k < iztickettypeid.length; k++) {

                    if (sts.getIztickettypeid().longValue() == Long
                            .parseLong(iztickettypeid[k])) {
                        stssoldtickettab.setMactualsaleprice(stssoldtickettab
                                .getMactualsaleprice() - sts.getMsplitprice());
                        // 判断原票是否有剧院座位

                        Stscomticketsalesdetailstab stscom = new Stscomticketsalesdetailstab();
                        StscomticketsalesdetailstabId sid = new StscomticketsalesdetailstabId();
                        sid.setIticketstationid(e.getIticketstationid());
                        sid.setIcomticketsalesdetailsid(sts.getId()
                                .getIcomticketsalesdetailsid());
                        sid.setIsalesvoucherdetailsid(new Long(i + 1));
                        sid.setIsalesvoucherid(stssalesvouchertab.getId()
                                .getIsalesvoucherid());
                        stscom.setId(sid);
                        stscom.setDtstartdate(sts.getDtstartdate());
                        stscom.setDtenddate(sts.getDtenddate());
                        stscom.setIcrowdkindpriceid(sts.getIcrowdkindpriceid());
                        stscom.setIsplitamount(stssoldtickettab
                                .getIplayerperticket());
                        stscom.setMsplitmoney(sts.getMsplitprice()
                                * stssoldtickettab.getIplayerperticket());
                        stscom.setIderatenums(jmnumb);
                        stscom.setMderatemoney(sts.getMsplitprice() * jmnumb);
                        stscom.setMsplitprice(sts.getMsplitprice());
                        stscom.setItickettypeid(sts.getItickettypeid());
                        stscom.setIztickettypeid(sts.getIztickettypeid());
                        stscom.setTripid(sts.getTripid());
                        stscom.setIvenueid(sts.getIvenueid());
                        stscom.setIvenueareaid(sts.getIvenueareaid());
                        stscom.setIvenueseatsid(sts.getIvenueseatsid());
                        stscom.setDtmakedate(nowtime);
                        // 计算手续费
                        // 查询该票是否有退订费率

                        // boolean shouxu = true;

                        if (issx == 1) {

                            long bystats = 1;
                            if (sts.getTripid() > 0) {
                                // 根据plist里面的数据找出对应竹排趟次是否停排
                                if (plist.size() > 0) {
                                    for (int a = 0; a < plist.size(); a++) {
                                        Productcontrol p = (Productcontrol) plist
                                                .get(a);
                                        if (p.getItickettypeid().longValue() == sts
                                                .getIztickettypeid()
                                                .longValue()
                                                && p.getTripid().longValue() == sts
                                                .getTripid()
                                                .longValue()
                                                && p.getStdata().equals(
                                                sts.getDtstartdate()
                                                        .substring(0,
                                                                10))) {
                                            bystats = p.getBystate();
                                        }
                                    }
                                }
                            }

                            if (bystats == 1) {
                                List tdlist = timeSharingDao
                                        .find(" from Ticketxgz where itickettypeid="
                                                + sts.getIztickettypeid()
                                                + " and xyjs4=1 and isvalid=1");

                                if (tdlist.size() == 0) {
                                    stscom.setTdfl(new Double(0));
                                } else {

                                    Ticketxgz tcx = (Ticketxgz) tdlist.get(0);

                                    if (tcx.getJsfs().equals("0001")) {
                                        // 按小时计算

                                        long hours = 0;
                                        DateFormat df = new SimpleDateFormat(
                                                "yyyy-MM-dd HH:mm:ss");
                                        String bztime = sts.getDtenddate();
                                        try {
                                            Date d1 = df.parse(nowtime);
                                            Date d2 = df.parse(bztime);
                                            long diff = d2.getTime()
                                                    - d1.getTime();
                                            hours = diff / (1000 * 60 * 60);
                                        } catch (ParseException e1) {
                                            // TODO Auto-generated catch block
                                            e1.printStackTrace();
                                        }
                                        if (hours < 0) {
                                            stscom.setTdfl(tcx.getXyrate2());
                                        } else {
                                            List fllist = timeSharingDao
                                                    .find("from Changebackrate where gzid="
                                                            + tcx.getGzid()
                                                            + " and time>"
                                                            + hours
                                                            + " order by time");

                                            if (fllist == null
                                                    || fllist.size() == 0) {

                                                stscom.setTdfl(new Double(0));
                                            } else {

                                                Changebackrate grate = (Changebackrate) fllist
                                                        .get(0);
                                                // 将退订费率保存
                                                stscom.setTdfl(grate.getTdfl());
                                            }

                                        }
                                    } else if (tcx.getJsfs().equals("0002")) {
                                        // 按天计算退订费率
                                        long days = 0;
                                        DateFormat df = new SimpleDateFormat(
                                                "yyyy-MM-dd HH:mm:ss");
                                        String bztime = sts.getDtenddate();
                                        try {
                                            Date d1 = df.parse(nowtime);
                                            Date d2 = df.parse(bztime);
                                            long diff = d2.getTime()
                                                    - d1.getTime();
                                            days = diff / (1000 * 60 * 60 * 24);
                                        } catch (ParseException e1) {
                                            // TODO Auto-generated catch block
                                            e1.printStackTrace();
                                        }
                                        if (days < 0) {
                                            stscom.setTdfl(tcx.getXyrate2());
                                            // }
                                        } else {
                                            List fllist = timeSharingDao
                                                    .find("from Changebackrate where gzid="
                                                            + tcx.getGzid()
                                                            + " and time>"
                                                            + days
                                                            + " order by time");
                                            if (fllist == null
                                                    || fllist.size() == 0) {
                                                stscom.setTdfl(new Double(0));
                                            } else {
                                                Changebackrate grate = (Changebackrate) fllist
                                                        .get(0);
                                                // 将退订费率保存
                                                stscom.setTdfl(grate.getTdfl());
                                            }
                                        }
                                    } else if (tcx.getJsfs().equals("0003")) {
                                        // 常年
                                        long days = 0;
                                        DateFormat df = new SimpleDateFormat(
                                                "yyyy-MM-dd HH:mm:ss");
                                        String bztime = sts.getDtenddate();
                                        try {
                                            Date d1 = df.parse(nowtime);
                                            Date d2 = df.parse(bztime);
                                            long diff = d2.getTime()
                                                    - d1.getTime();
                                            days = diff / (1000 * 60 * 60 * 24);
                                        } catch (ParseException e1) {
                                            // TODO Auto-generated catch block
                                            e1.printStackTrace();
                                        }
                                        if (days < 0) {
                                            stscom.setTdfl(tcx.getXyrate2());
                                            // }
                                        } else {
                                            List fllist = timeSharingDao
                                                    .find("from Changebackrate where gzid="
                                                            + tcx.getGzid());
                                            if (fllist != null
                                                    && fllist.size() > 0) {
                                                Changebackrate grate = (Changebackrate) fllist
                                                        .get(0);
                                                stscom.setTdfl(grate.getTdfl());
                                            } else {
                                                stscom.setTdfl(new Double(0));
                                            }
                                        }
                                    } else {
                                        stscom.setTdfl(new Double(0));
                                    }

                                }

                            } else {
                                stscom.setTdfl(new Double(0));
                            }
                        } else {
                            stscom.setTdfl(new Double(0));
                        }

                        stscom.setMhandcharge((stscom.getMsplitmoney() - stscom
                                .getMderatemoney()) * stscom.getTdfl());
                        stscom.setIversion(new Long(0));
                        comlist.add(stscom);

                        stssalesvoucherdetailstab
                                .setMactualsaleprice(stssalesvoucherdetailstab
                                        .getMactualsaleprice()
                                        + sts.getMsplitprice());

                        stssalesvoucherdetailstab
                                .setItotalnumber(stssoldtickettab
                                        .getIplayerperticket());
                        stssalesvoucherdetailstab
                                .setMhandcharge(stssalesvoucherdetailstab
                                        .getMhandcharge()
                                        + stscom.getMhandcharge());// 手续费
                        stssalesvoucherdetailstab
                                .setMeventmoney(stssalesvoucherdetailstab
                                        .getMeventmoney()
                                        + stscom.getMsplitmoney());
                        stssalesvoucherdetailstab
                                .setMtotalamount(stssalesvoucherdetailstab
                                        .getMtotalamount()
                                        + stscom.getMsplitmoney());
                        stssalesvoucherdetailstab.setMderatemoney(jmnumb
                                * stssalesvoucherdetailstab
                                .getMactualsaleprice());
                        // 跟新凭证金额数据
                        stssalesvouchertab
                                .setIaccountreceivable(stssalesvouchertab
                                        .getIaccountreceivable()
                                        + stscom.getMsplitmoney()
                                        - stscom.getMderatemoney());
                        stssalesvouchertab.setIacceptmoney(stssalesvouchertab
                                .getIacceptmoney()
                                + stscom.getMsplitmoney()
                                - stscom.getMderatemoney());
                        stssalesvouchertab.setMhandcharge(stssalesvouchertab
                                .getMhandcharge() + stscom.getMhandcharge());
                        System.out.println("00005");
                        List Seatsalelist = this.timeSharingDao
                                .find(" from Seatsaletab where id.isalesvoucherid="
                                        + sts.getId().getIsalesvoucherid()
                                        + " and id.iticketstationid="
                                        + sts.getId().getIticketstationid()
                                        + " and id.isalesvoucherdetailsid="
                                        + sts.getId()
                                        .getIsalesvoucherdetailsid()
                                        + " and id.icomticketsalesdetailsid="
                                        + sts.getId()
                                        .getIcomticketsalesdetailsid()
                                        + " and id.szsoldticketid="
                                        + stssoldtickettab.getId()
                                        .getSzsoldticketid());

                        System.out.println("00006");
                        if (Seatsalelist != null && Seatsalelist.size() > 0) {
                            for (int a = 0; a < Seatsalelist.size(); a++) {
                                Seatsaletab seat = (Seatsaletab) Seatsalelist
                                        .get(a);
                                seat.setIsvalid(0L);// 退订
                                seatlist.add(seat);
                            }
                        }
                        System.out.println("00007");
                    }
                }
            }
            stssalesvoucherdetailstab.setComlist(comlist);
            stssalelist.add(stssalesvoucherdetailstab);
            slist.add(stssoldtickettab);
        }
        System.out.println("00008");
        Stssalessettlementtab st = new Stssalessettlementtab();
        StssalessettlementtabId sid = new StssalessettlementtabId();
        sid.setIsalesvoucherid(stssalesvouchertab.getId().getIsalesvoucherid());
        sid.setIticketstationid(stssalesvouchertab.getId()
                .getIticketstationid());

        sid.setIsalessettlementid(new Long(1));
        st.setId(sid);
        st.setSettlementdata(nowtime.substring(0, 10));
        st.setSettlementtime(nowtime.substring(11));
        st.setDtmakedate(nowtime);

        StssalessettlementtabId oldsid = new StssalessettlementtabId();
        oldsid.setIsalesvoucherid(oldstssalesvouchertab.getId()
                .getIsalesvoucherid());
        oldsid.setIticketstationid(oldstssalesvouchertab.getId()
                .getIticketstationid());
        oldsid.setIsalessettlementid(new Long(1));
        Stssalessettlementtab oldstssalessettlementtab = (Stssalessettlementtab) timeSharingDao
                .get(Stssalessettlementtab.class, oldsid);
        st.setIsettlementid(oldstssalessettlementtab.getIsettlementid());

        st.setMsettlementmoney(stssalesvouchertab.getIaccountreceivable());
        st.setIversion(new Long(1));

		/*
		 * if (productcontrols != null && !productcontrols.equals("")) { try {
		 * 
		 * javax.xml.rpc.Service service = null; java.net.URL endpointURL = new
		 * java.net.URL("http://" + WebContant.GetKeyValue("CenterUrl") +
		 * "/services/centersaleService?wsdl");
		 * 
		 * CentersaleServiceSoapBindingStub ssl = new
		 * CentersaleServiceSoapBindingStub( endpointURL, service);
		 * ssl.setMaintainSession(true); com.ectrip.ticket.centersale.client.ResultBean
		 * cano = ssl .updatecancelProductcontrol(productcontrols); if
		 * (cano.getResult(0, 0).equals("false")) { rs.addRow(new String[] {
		 * "false", "保存失败" }); return rs; } } catch (Exception e1) {
		 * rs.addRow(new String[] { "false", "保存失败" }); return rs; } }
		 */

        System.out.println("00009");
        if (seatlist.size() > 0) {

            String seatlists = "";
            for (int i = 0; i < seatlist.size(); i++) {
                Seatsaletab seatt = (Seatsaletab) seatlist.get(i);
                if (i == 0) {
                    seatlists = seatt.getIvenueid() + "&"
                            + seatt.getIvenueareaid() + "&"
                            + seatt.getItripid() + "&" + seatt.getIseatid()
                            + "&" + seatt.getStartdate();
                } else {
                    seatlists = seatlists + ":" + seatt.getIvenueid() + "&"
                            + seatt.getIvenueareaid() + "&"
                            + seatt.getItripid() + "&" + seatt.getIseatid()
                            + "&" + seatt.getStartdate();

                }

            }
            System.out.println("seatlists=" + seatlists);
            try {/*

                javax.xml.rpc.Service service = null;
                java.net.URL endpointURL = new java.net.URL("http://"
                        + url
                        + "/services/centersaleService?wsdl");

                CentersaleServiceSoapBindingStub ssl = new CentersaleServiceSoapBindingStub(
                        endpointURL, service);
                ssl.setMaintainSession(true);
                com.ectrip.ticket.centersale.client.ResultBean cano = ssl
                        .updatetdseatstuts(seatlists);
                if (cano.getResult(0, 0).equals("false")) {
                    rs.addRow(new String[] { "false", "保存失败" });
                    return rs;
                }
            */} catch (Exception e1) {
                rs.addRow(new String[] { "false", "保存失败" });
                return rs;
            }
            for (int i = 0; i < seatlist.size(); i++) {
                Seatsaletab seatt = (Seatsaletab) seatlist.get(i);
                this.timeSharingDao.update(seatt);
            }
        }
        System.out.println("00010");
        try {
            // System.out.println("开始保存");
            String stockUsid = stssalesvouchertab.getUsid();
            Custom c = (Custom) timeSharingDao.get(Custom.class,stockUsid);
            if(c != null){
                if(c.getIbusinessid().longValue() == 2L && c.getUstp().equals("02") && c.getUsqx().startsWith("0111")){
                    stockUsid = c.getSusid();
                }else if(c.getIbusinessid().longValue() == 3L && c.getUstp().equals("02")){
                    stockUsid = c.getSusid();
                }
            }

            timeSharingDao.save(stssalesvouchertab);
            timeSharingDao.save(st);
            // 将网上订单数据保存到本地的订单表中
            // timeSharingDao.save(st);
            for (int i = 0; i < stssalelist.size(); i++) {
                Stssalesvoucherdetailstab ss = (Stssalesvoucherdetailstab) stssalelist
                        .get(i);
                timeSharingDao.save(ss);
                List comlist = ss.getComlist();
                for (int j = 0; j < comlist.size(); j++) {
                    Stscomticketsalesdetailstab stscom = (Stscomticketsalesdetailstab) comlist
                            .get(j);
                    timeSharingDao.save(stscom);
                }
            }

            for (int i = 0; i < zslist.size(); i++) {
                Stssoldticketsubtab zs = (Stssoldticketsubtab) zslist.get(i);
                zs.setIsvalid(new Long(-1));
                zs.setDtmakedate(nowtime);
                timeSharingDao.update(zs);
                StsschecktabId scid = new StsschecktabId();
                scid.setIsalesvoucherid(zs.getId().getIsalesvoucherid());
                scid.setIsalesvoucherdetailsid(zs.getId()
                        .getIsalesvoucherdetailsid());
                scid.setIticketstationid(zs.getId().getIticketstationid());
                scid.setSzsoldticketid(zs.getId().getSzsoldticketid());
                scid.setSzsoldticketsubid(zs.getId().getSzsoldticketsubid());
                Stsschecktab sc = (Stsschecktab) this.timeSharingDao.get(
                        Stsschecktab.class, scid);
                if (sc != null) {
                    sc.setIsvalid(new Long(-1));
                    sc.setDtmakedate(nowtime);
                    timeSharingDao.update(sc);
                }

            }
            System.out.println("00011");
            List<StockOrderInfo> stocks = new ArrayList<StockOrderInfo>();
            String stockJson = "";
            for (int i = 0; i < slist.size(); i++) {
                Stssoldtickettab s3 = (Stssoldtickettab) slist.get(i);
                // 判断是否已经全部退订
                List zsdaillist = timeSharingDao
                        .find("from Stssoldticketsubtab where id.isalesvoucherid="
                                + isalesvoucherid
                                + " and id.iticketstationid="
                                + iticketstationid
                                + " and id.isalesvoucherdetailsid="
                                + s3.getId().getIsalesvoucherdetailsid()
                                + " and id.szsoldticketid="
                                + s3.getId().getSzsoldticketid()
                                + " and isvalid=1 order by iztickettypeid");
                if (zsdaillist == null || zsdaillist.size() == 0) {
                    s3.setByvalidity("01");// 全部退订
                    StockOrderInfo stockOrderInfo = new StockOrderInfo();
                    stockOrderInfo.setOrid(stssalesvouchertab.getSzsalesvoucherno());
                    stockOrderInfo.setProviderId(stssalesvouchertab.getIscenicid());
                    stockOrderInfo.setProductId(s3.getItickettypeid());
                    Stssalesvoucherdetailstab std = (Stssalesvoucherdetailstab) timeSharingDao.get(Stssalesvoucherdetailstab.class,
                            new StssalesvoucherdetailstabId(s3.getId().getIsalesvoucherdetailsid(),isalesvoucherid,iticketstationid));
                    stockOrderInfo.setPriceId(std.getIcrowdkindpriceid());
                    stockOrderInfo.setStockDate(s3.getDtstartdate());
                    stockOrderInfo.setNumb(-s3.getIplayerperticket());
                    stockOrderInfo.setUsid(stockUsid);
                    stocks.add(stockOrderInfo);
                }
                s3.setDtmakedate(nowtime);
                timeSharingDao.update(s3);
            }
            StockJson stockObject = new StockJson();
            stockObject.setStocks(stocks);
            stockJson = JSON.toJSONString(stockObject);
            System.out.println("00012");
            if (ystssalelist != null && ystssalelist.size() > 0) {
                for (int i = 0; i < ystssalelist.size(); i++) {
                    Stssalesvoucherdetailstab ystssalesvoucherdetailstab = (Stssalesvoucherdetailstab) ystssalelist
                            .get(i);
                    timeSharingDao.update(ystssalesvoucherdetailstab);
                }
            }

            // 服务商优惠 修改优惠明细
            if (yxsyhlist != null && yxsyhlist.size() > 0) {
                for (int h = 0; h < yxsyhlist.size(); h++) {
                    Stssalesvoucherdetailstab sts = (Stssalesvoucherdetailstab) yxsyhlist
                            .get(h);
                    timeSharingDao.update(sts);
                }
            }
            if (comtlist != null && comtlist.size() > 0) {
                for (int z = 0; z < comtlist.size(); z++) {
                    Stscomticketsalesdetailstab comt = (Stscomticketsalesdetailstab) comtlist
                            .get(z);
                    timeSharingDao.update(comt);
                }
            }
            Sysparv5 sysp = getSysparv5("COMM","0006");
            if(sysp == null){
                sysp = new Sysparv5();
                sysp.setIsvalue(1L);
            }
            if (WebContant.GetKeyValue("IsCenterUrl").equals("1") && sysp.getIsvalue() == 1L) {
                try {/*
                    javax.xml.rpc.Service service = null;
                    java.net.URL endpointURL = new java.net.URL("http://"
                            + url
                            + "/services/centersaleService?wsdl");
                    CentersaleServiceSoapBindingStub ssl = new CentersaleServiceSoapBindingStub(
                            endpointURL, service);
                    ssl.setMaintainSession(true);
                    ssl.saveStock(stockJson, "false");
                */} catch (Exception e1) {
                    e1.printStackTrace();
                    IStockService stockService = (IStockService) SpringUtil.getBean("stockService");
                    stockService.saveStockDetails(stocks, false);
                }
            }else{
                IStockService stockService = (IStockService) SpringUtil.getBean("stockService");
                try{
                    stockService.saveStockDetails(stocks, false);
                }catch (Exception e1){
                    e1.printStackTrace();
                }
            }
            System.out.println("5555555555555555555555555=");
            // 2012-11-15 李经锐修改 增加 预制票退票后是否可再修改
            if (e.getIscenicid() != null && !e.getIscenicid().equals("")) {
                Hotelprovider hotelpder = (Hotelprovider) this.timeSharingDao.get(
                        Hotelprovider.class, e.getIscenicid());
                if (hotelpder != null) {
                    // 预制票可退票后销售
                    if (hotelpder.getNoted4() != null
                            && hotelpder.getNoted4().equals("1")) {
                        getWarehouseCheck(returnmodellist, e.getIscenicid(),
                                iemployeeid);
                    }
                    // IC卡入库销售
                    if (hotelpder.getInoteger5() != null
                            && hotelpder.getInoteger5() == 1) {
                        getICkupCheck(returnmodellist, iemployeeid);
                    }
                }
            }
            System.out.println("66666666666666666666666666666=");
            rs.addRow(new String[] { "true",
                    stssalesvouchertab.getId().getIsalesvoucherid().toString() });
            return rs;
        } catch (Exception e1) {
            System.out.println(e1.getMessage());
            throw e1;
        }
    }

    public ResultBean savetorderreturntickets(
            Stssalesvouchertab oldstssalesvouchertab, List returnmodellist,
            String productcontrols, Esbticketwintab e, Long iemployeeid,
            String szsalesvoucherno, Long maxid, Long isqt, Long forceemid,
            String forcenote, Long issx,String url) throws Exception {
    	if(url==null || url.length()<1){
    		url=WebContant.GetKeyValue("CenterUrl");
    	}
        String nowtime = Tools.getDayTimes();
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        double tpmont = 0;
        double tpsx = 0;
        long bystats = 1;
        List plist = new ArrayList();
        // 查询所有票号所有售出门票表信息
        String zfusid = "";
        String ornm = "";
        String orhm = "";
        String orph = "";
        String orzj = "";
        String dtstartdate = "";
        String dtenddate = "";
        String isjl = "";
        try {/*
            javax.xml.rpc.Service service = null;
            java.net.URL endpointURL = new java.net.URL("http://"
                    + url
                    + "/services/centersaleService?wsdl");
            CentersaleServiceSoapBindingStub ssl = new CentersaleServiceSoapBindingStub(
                    endpointURL, service);
            ssl.setMaintainSession(true);

            com.ectrip.ticket.centersale.client.ResultBean cano = ssl
                    .getT_orderbyorid(
                            oldstssalesvouchertab.getSzsalesvoucherno(),
                            oldstssalesvouchertab.getIscenicid());

            if (cano != null && cano.getRowsCount() > 0) {
                for (int i = 0; i < cano.getRowsCount(); i++) {
                    ornm = cano.getResult(i, "ORNM");
                    orhm = cano.getResult(i, "ORHM");
                    ornm = cano.getResult(i, "ORPH");
                    orzj = cano.getResult(i, "ORZJ");
                    dtstartdate = cano.getResult(i, "DTSTARTDATE");
                    dtenddate = cano.getResult(i, "DTENDDATE");
                    zfusid = cano.getResult(i, "ZFUSID");
                    isjl = cano.getResult(i, "ISJL");

                }
            } else {
                rs.addRow(new String[] { "false", "读取原订单支付信息失败" });
                return rs;
            }
            if (!productcontrols.equals("")) {
                cano = ssl.getcancelproductcontrol(productcontrols);
                if (cano.getRowsCount() > 0) {
                    for (int i = 0; i < cano.getRowsCount(); i++) {
                        Productcontrol p = new Productcontrol();
                        p.setItickettypeid(new Long(cano.getResult(i,
                                "ITICKETTYPEID")));
                        p.setStdata(cano.getResult(i, "STDATA"));
                        p.setTripid(new Long(cano.getResult(i, "TRIPID")));
                        p.setBystate(new Long(cano.getResult(i, "BYSTATE")));
                        if (p.getBystate() == -1) {
                            rs.addRow(new String[] { "false",
                                    "确认停排的竹筏票不能在售票口退订" });
                            return rs;
                        }
                        plist.add(p);
                    }
                }
            }
        */} catch (Exception e3) {
            System.out.println(e3.getMessage());
            rs.addRow(new String[] { "false", "读取趟次信息失败" });
            return rs;
        }
        System.out.println("11111111111");
        List zslist = new ArrayList();// 需删除的Stssol;dticketsubtab表中信息
        List slist = new ArrayList();// 需要修改的Stssoldtickettab表信息
        List stssalelist = new ArrayList();// 需要增加的Stssalesvoucherdetailstab表信息
        // 新的销售凭证表
        List ystssalelist = new ArrayList();// 原销售凭证明细
        List yxsyhlist = new ArrayList(); // 服务商优惠的原销售凭证明细
        List comtlist = new ArrayList(); // 服务商优惠的原票务明细表

        Stssalesvouchertab stssalesvouchertab = new Stssalesvouchertab();
        Long isalesvoucherid = oldstssalesvouchertab.getId()
                .getIsalesvoucherid();
        Long iticketstationid = oldstssalesvouchertab.getId()
                .getIticketstationid();
        StssalesvouchertabId stssalesvouchertabid = new StssalesvouchertabId();
        stssalesvouchertabid.setIticketstationid(e.getIticketstationid());
        stssalesvouchertabid.setIsalesvoucherid(new Long(maxid));
        stssalesvouchertab.setId(stssalesvouchertabid);
        stssalesvouchertab.setIscenicid(oldstssalesvouchertab.getIscenicid());
        stssalesvouchertab.setIticketwinid(e.getIticketwinid());
        stssalesvouchertab.setIbusinessid(oldstssalesvouchertab
                .getIbusinessid());
        stssalesvouchertab.setIhandler(iemployeeid);
        stssalesvouchertab.setIpayeer(iemployeeid);
        System.out.println("11111111111");
        stssalesvouchertab.setForcedrefund(forcenote);
        if (isqt.longValue() == 1) {
            stssalesvouchertab.setImaker(forceemid);

        } else {

            stssalesvouchertab.setImaker(iemployeeid);
        }
        stssalesvouchertab.setIauditor(iemployeeid);
        stssalesvouchertab.setDyusid(oldstssalesvouchertab.getDyusid());
        stssalesvouchertab.setIaccountreceivable(new Double(0));
        stssalesvouchertab.setIacceptmoney(new Double(0));
        stssalesvouchertab.setIgivechange(new Double(0));
        stssalesvouchertab.setIyear(new Long(nowtime.substring(0, 4)));
        stssalesvouchertab.setImonth(new Long(nowtime.substring(5, 7)));
        stssalesvouchertab.setIday(new Long(nowtime.substring(8, 10)));
        stssalesvouchertab.setDtmakedate(nowtime);
        stssalesvouchertab.setDtauditdate(nowtime.substring(0, 10));
        stssalesvouchertab.setUsid(oldstssalesvouchertab.getUsid());
        stssalesvouchertab.setBisintegral(new Long(0));
        stssalesvouchertab.setByprintinvoice(new Long(0));
        stssalesvouchertab.setBysplitway(new Long(2));
        stssalesvouchertab.setBisreturn(new Long(1));
        stssalesvouchertab.setBysalesvouchertype("02");
        stssalesvouchertab.setBypostrecord(new Long(0));
        stssalesvouchertab.setBysalesvoucherstate(new Long(1));
        stssalesvouchertab.setBispay(new Long(0));
        stssalesvouchertab.setBispayee(new Long(0));
        stssalesvouchertab.setMhandcharge(new Double(0));
        stssalesvouchertab.setIssalesvoucherid(oldstssalesvouchertab.getId()
                .getIsalesvoucherid());
        stssalesvouchertab.setIsticketstationid(oldstssalesvouchertab.getId()
                .getIticketstationid());
        stssalesvouchertab.setSzsalesvoucherno(szsalesvoucherno);
        stssalesvouchertab.setJmamnt(new Double(0));

        Long numbs = 0L; // 此销售凭证总的使用数量 服务商优惠添加
        List detailList = timeSharingDao
                .find("select sum(st.iremainnum*st.iplayerperticket) as numb from Stssoldtickettab st where st.id.isalesvoucherid="
                        + oldstssalesvouchertab.getId().getIsalesvoucherid()
                        + " and st.byvalidity='00'  ");
        System.out
                .println("select sum(st.iremainnum*st.iplayerperticket) as numb from Stssoldtickettab st where st.id.isalesvoucherid="
                        + oldstssalesvouchertab.getId().getIsalesvoucherid()
                        + " and st.byvalidity='00'  ");
        if (detailList != null && detailList.size() > 0) {
            if (detailList.get(0) == null || detailList.get(0).equals("")) {

            } else {
                numbs = (Long) detailList.get(0);
            }

        }
        Long offernum = 0L; // 退票数量

        // 新建stssalesvouchertab完成
        List seatlist = new ArrayList();// 读取订单的座位数
        System.out.println("111111111112");
        for (int i = 0; i < returnmodellist.size(); i++) {
            Returnmodel returnmodel = (Returnmodel) returnmodellist.get(i);
            // System.out.println("根据票号读取该售出票信息" +
            // returnmodel.getSzticketprintno());
            String tdstr = "";
            Long jmnumb = new Long(0);// 免票数量
            List list = timeSharingDao
                    .find("from Stssoldtickettab where szticketprintno='"
                            + returnmodel.getSzticketprintno()
                            + "' order by dtmakedate desc");
            Stssoldtickettab stssoldtickettab = (Stssoldtickettab) list.get(0);
            // 读取原凭证明细
            boolean b = false;
            Stssalesvoucherdetailstab ystssalesvoucherdetailstab = null;
            for (int a = 0; a < ystssalelist.size(); a++) {
                ystssalesvoucherdetailstab = (Stssalesvoucherdetailstab) ystssalelist
                        .get(a);
                if (ystssalesvoucherdetailstab.getId()
                        .getIsalesvoucherdetailsid() == stssoldtickettab
                        .getId().getIsalesvoucherdetailsid()
                        && ystssalesvoucherdetailstab.getId()
                        .getIsalesvoucherid() == stssoldtickettab
                        .getId().getIsalesvoucherid()
                        && ystssalesvoucherdetailstab.getId()
                        .getIticketstationid() == stssoldtickettab
                        .getId().getIticketstationid()) {
                    b = true;

                    break;
                }
            }
            if (!b) {
                ystssalesvoucherdetailstab = (Stssalesvoucherdetailstab) timeSharingDao
                        .get(Stssalesvoucherdetailstab.class,
                                new StssalesvoucherdetailstabId(
                                        stssoldtickettab.getId()
                                                .getIsalesvoucherdetailsid(),
                                        isalesvoucherid, iticketstationid));
                ystssalelist.add(ystssalesvoucherdetailstab);
            }

            boolean bs = false; // 判断是否优惠
            double newamnt = 0D;
            double tdamnt = 0D;
            // 2014-04-03 lijingrui
            // 根据售票门票表 判断此产品所在服务商是否有服务商优惠
            List offerList = timeSharingDao
                    .find("from Edpofferschemetab where iscenicid='"
                            + stssoldtickettab.getIscenicid()
                            + "' and startdata<='"
                            + stssoldtickettab.getDtstartdate()
                            + "' and enddata>='"
                            + stssoldtickettab.getDtstartdate()
                            + "' and byisuse=1 and ioffertype=1 ");
            if(oldstssalesvouchertab.getSzsalesvoucherno().substring(8,11).equals("888") || oldstssalesvouchertab.getSzsalesvoucherno().substring(8,11).equals("999")){
                offerList = null;//OTA订单不计算优惠
            }
            if (offerList != null && offerList.size() > 0) {
                Edpofferschemetab edpoffer = (Edpofferschemetab) offerList
                        .get(0);
                offernum += stssoldtickettab.getIplayerperticket();// 退票数量

                String yhlx = "0";// 获取优惠方式 0 -最高价 1-最低价
                Hotelprovider hotel = (Hotelprovider) this.timeSharingDao.get(
                        Hotelprovider.class, stssoldtickettab.getIscenicid());
                if (hotel != null && hotel.getInoteger8() != null) {
                    yhlx = hotel.getInoteger8().toString();
                }

                // 获取退票后可优惠的数量
                Long yhnums = (numbs - offernum) / edpoffer.getImultiples()
                        * edpoffer.getIoffernum();
                // 原销售凭证的优惠数量
                Long ysnums = (numbs - offernum + stssoldtickettab
                        .getIplayerperticket())
                        / edpoffer.getImultiples()
                        * edpoffer.getIoffernum();
                // 退票后优惠数量小于原优惠数量 说明退票退 退票金额-优惠票的金额
                if (yhnums != ysnums && ysnums > yhnums) {
                    bs = true;
                    List vourcherList = new ArrayList();
                    if (yhlx.equals("0")) { // 最高价优惠
                        vourcherList = timeSharingDao
                                .find(" from Stssalesvoucherdetailstab st where st.id.isalesvoucherid="
                                        + oldstssalesvouchertab.getId()
                                        .getIsalesvoucherid()
                                        + "  and st.id.iticketstationid="
                                        + oldstssalesvouchertab.getId()
                                        .getIticketstationid()
                                        + " and st.ioffersschemeid>0 order by st.mactualsaleprice desc");

                    } else {
                        vourcherList = timeSharingDao
                                .find(" from Stssalesvoucherdetailstab st where st.id.isalesvoucherid="
                                        + oldstssalesvouchertab.getId()
                                        .getIsalesvoucherid()
                                        + "  and st.id.iticketstationid="
                                        + oldstssalesvouchertab.getId()
                                        .getIticketstationid()
                                        + " and st.ioffersschemeid>0 order by st.mactualsaleprice");

                    }

                    Long yhsl = ysnums - yhnums; // 要退的优惠票数量

                    if (vourcherList != null && vourcherList.size() > 0) {
                        Long salenum = 0L;
                        for (int q = 0; q < vourcherList.size(); q++) {
                            Stssalesvoucherdetailstab voucher = (Stssalesvoucherdetailstab) vourcherList
                                    .get(q);
                            salenum = voucher.getIderatenums()
                                    - voucher.getIpresentnums(); // 优惠数量

                            if (yhsl <= salenum) {
                                // 优惠金额
                                newamnt += voucher.getMactualsaleprice() * yhsl;
                                // 退票金额
                                tdamnt += ystssalesvoucherdetailstab
                                        .getMactualsaleprice()
                                        * yhsl
                                        - voucher.getMactualsaleprice() * yhsl;
                                voucher.setMpresentmoney(voucher
                                        .getMpresentmoney()
                                        + voucher.getMactualsaleprice() * yhsl);
                                voucher.setIpresentnums(voucher
                                        .getIpresentnums()
                                        + stssoldtickettab
                                        .getIplayerperticket());

                                jmnumb += yhsl;

                                yxsyhlist.add(voucher);

                                List zdaillist = timeSharingDao
                                        .find("from Stscomticketsalesdetailstab where  id.isalesvoucherid="
                                                + isalesvoucherid
                                                + " and id.iticketstationid="
                                                + iticketstationid
                                                + " and id.isalesvoucherdetailsid="
                                                + voucher
                                                .getId()
                                                .getIsalesvoucherdetailsid()
                                                + " order by isalesvoucherdetailsid");
                                if (zdaillist != null && zdaillist.size() > 0) {
                                    for (int z = 0; z < zdaillist.size(); z++) {
                                        Stscomticketsalesdetailstab comt = (Stscomticketsalesdetailstab) zdaillist
                                                .get(z);
                                        comt.setIderatenums(comt
                                                .getIderatenums() - yhsl);
                                        comt.setMderatemoney(comt
                                                .getMderatemoney()
                                                - yhsl
                                                * comt.getMsplitprice());
                                        comtlist.add(comt);
                                    }
                                }

                                break;
                            } else {
                                // 计算新的总金额
                                newamnt += (ystssalesvoucherdetailstab
                                        .getIuseablenessnum() - ystssalesvoucherdetailstab
                                        .getIpresentnums())
                                        * ystssalesvoucherdetailstab
                                        .getMactualsaleprice()
                                        - voucher.getMactualsaleprice()
                                        * salenum;
                                tdamnt += ystssalesvoucherdetailstab
                                        .getMactualsaleprice()
                                        * salenum
                                        - voucher.getMactualsaleprice()
                                        * salenum;
                                voucher.setMpresentmoney(voucher
                                        .getMpresentmoney()
                                        + voucher.getMactualsaleprice()
                                        * salenum);
                                voucher.setIpresentnums(voucher
                                        .getIpresentnums()
                                        + stssoldtickettab
                                        .getIplayerperticket());

                                jmnumb += salenum;

                                yhsl = yhsl - salenum;

                                yxsyhlist.add(voucher);

                                List zdaillist = timeSharingDao
                                        .find("from Stscomticketsalesdetailstab where  id.isalesvoucherid="
                                                + isalesvoucherid
                                                + " and id.iticketstationid="
                                                + iticketstationid
                                                + " and id.isalesvoucherdetailsid="
                                                + voucher
                                                .getId()
                                                .getIsalesvoucherdetailsid()
                                                + " order by isalesvoucherdetailsid");
                                if (zdaillist != null && zdaillist.size() > 0) {
                                    for (int z = 0; z < zdaillist.size(); z++) {
                                        Stscomticketsalesdetailstab comt = (Stscomticketsalesdetailstab) zdaillist
                                                .get(z);
                                        comt.setIderatenums(comt
                                                .getIderatenums() - salenum);
                                        comt.setMderatemoney(comt
                                                .getMderatemoney()
                                                - salenum
                                                * comt.getMsplitprice());
                                        comtlist.add(comt);
                                    }
                                }
                            }

                        }
                    }

                }

            } else {
                System.out.println("111111111113");
                if (ystssalesvoucherdetailstab.getIoffersschemeid() > 0) {
                    // 销售过优惠
                    // 判断是否退订该票是减免金额的票
                    Edpofferschemetab edpofferschemetab = (Edpofferschemetab) timeSharingDao
                            .get(Edpofferschemetab.class,
                                    ystssalesvoucherdetailstab
                                            .getIoffersschemeid());
                    // 计算新的总金额
                    newamnt = (ystssalesvoucherdetailstab.getIuseablenessnum()
                            - ystssalesvoucherdetailstab.getIpresentnums()
                            - stssoldtickettab.getIplayerperticket() - (ystssalesvoucherdetailstab
                            .getIuseablenessnum()
                            - ystssalesvoucherdetailstab.getIpresentnums() - stssoldtickettab
                            .getIplayerperticket())
                            / edpofferschemetab.getImultiples()
                            * edpofferschemetab.getIoffernum())

                            * ystssalesvoucherdetailstab.getMactualsaleprice();
                    System.out
                            .println((ystssalesvoucherdetailstab
                                    .getIuseablenessnum()
                                    - ystssalesvoucherdetailstab
                                    .getIpresentnums() - stssoldtickettab
                                    .getIplayerperticket())
                                    / edpofferschemetab.getImultiples()
                                    * edpofferschemetab.getIoffernum());
                    tdamnt = ystssalesvoucherdetailstab.getMeventmoney()
                            - ystssalesvoucherdetailstab.getMderatemoney()
                            - ystssalesvoucherdetailstab.getMpresentmoney()
                            - newamnt;
                    ystssalesvoucherdetailstab
                            .setMpresentmoney(ystssalesvoucherdetailstab
                                    .getMpresentmoney() + tdamnt);

                    ystssalesvoucherdetailstab
                            .setIpresentnums(ystssalesvoucherdetailstab
                                    .getIpresentnums()
                                    + stssoldtickettab.getIplayerperticket());
                    jmnumb = stssoldtickettab.getIplayerperticket()
                            - (long) (tdamnt / ystssalesvoucherdetailstab
                            .getMactualsaleprice());
                }
            }

            Stssalesvoucherdetailstab stssalesvoucherdetailstab = new Stssalesvoucherdetailstab();
            StssalesvoucherdetailstabId id = new StssalesvoucherdetailstabId();
            id.setIsalesvoucherdetailsid(new Long(i + 1));
            id.setIticketstationid(e.getIticketstationid());
            id.setIsalesvoucherid(stssalesvouchertab.getId()
                    .getIsalesvoucherid());
            stssalesvoucherdetailstab.setId(id);
            stssalesvoucherdetailstab.setDtstartdate(ystssalesvoucherdetailstab
                    .getDtstartdate());
            stssalesvoucherdetailstab.setDtenddate(ystssalesvoucherdetailstab
                    .getDtenddate());
            stssalesvoucherdetailstab.setIticketwinid(e.getIticketwinid());
            stssalesvoucherdetailstab
                    .setIcrowdkindpriceid(ystssalesvoucherdetailstab
                            .getIcrowdkindpriceid());
            stssalesvoucherdetailstab
                    .setItickettypeid(ystssalesvoucherdetailstab
                            .getItickettypeid());
            stssalesvoucherdetailstab.setIplayerperticket(stssoldtickettab
                    .getIplayerperticket());// 人/张
            stssalesvoucherdetailstab.setIticketnum(new Long(1));// 张数
            stssalesvoucherdetailstab.setIticketplayer(stssoldtickettab
                    .getIplayerperticket());
            stssalesvoucherdetailstab.setDtstartdate(ystssalesvoucherdetailstab
                    .getDtstartdate());
            stssalesvoucherdetailstab.setDtenddate(ystssalesvoucherdetailstab
                    .getDtenddate());
            stssalesvoucherdetailstab.setIstartid(new Long(0));
            stssalesvoucherdetailstab.setIendid(new Long(0));
            stssalesvoucherdetailstab.setSzstartserial("0");
            stssalesvoucherdetailstab.setSzendserial("0");
            stssalesvoucherdetailstab
                    .setIoffersschemeid(ystssalesvoucherdetailstab
                            .getIoffersschemeid());
            stssalesvoucherdetailstab.setIpresentnums(new Long(0));

            stssalesvoucherdetailstab.setIamount(stssoldtickettab
                    .getIplayerperticket());
            stssalesvoucherdetailstab.setIfactnum(new Long(0)); // 交易数量
            stssalesvoucherdetailstab.setIuseablenessnum(new Long(0));// 使用数量
            stssalesvoucherdetailstab.setMderatemoney(new Double(0));// 减免金额
            stssalesvoucherdetailstab.setMpresentmoney(new Double(0));// 赠送金额
            stssalesvoucherdetailstab.setMnominalfee(new Double(0));// 工本费
            stssalesvoucherdetailstab.setMdeposit(new Double(0));
            stssalesvoucherdetailstab.setMhandcharge(new Double(0));// 手续费
            stssalesvoucherdetailstab.setByconsumetype("00");
            stssalesvoucherdetailstab.setIconsumenum(new Double(0));
            stssalesvoucherdetailstab.setItotalminutes(new Long(0));
            stssalesvoucherdetailstab.setByisout(new Long(0));
            stssalesvoucherdetailstab.setDtmakedate(nowtime);
            stssalesvoucherdetailstab.setIversion(new Long(0));
            stssalesvoucherdetailstab.setMactualsaleprice(new Double(0));
            stssalesvoucherdetailstab.setMeventmoney(new Double(0));
            stssalesvoucherdetailstab.setItotalnumber(new Long(0));
            stssalesvoucherdetailstab.setMtotalamount(new Double(0));
            stssalesvoucherdetailstab.setSzstartserial(returnmodel
                    .getSzticketprintno());
            stssalesvoucherdetailstab.setSzendserial(returnmodel
                    .getSzticketprintno());
            stssalesvoucherdetailstab.setIstartid(stssoldtickettab
                    .getIserialnum());
            stssalesvoucherdetailstab.setIendid(stssoldtickettab
                    .getIserialnum());
            stssalesvoucherdetailstab.setIderatenums(jmnumb);
            List zsdaillist = timeSharingDao
                    .find("from Stssoldticketsubtab where id.isalesvoucherid="
                            + isalesvoucherid
                            + " and id.iticketstationid="
                            + iticketstationid
                            + " and id.isalesvoucherdetailsid="
                            + stssoldtickettab.getId()
                            .getIsalesvoucherdetailsid()
                            + " and id.szsoldticketid="
                            + stssoldtickettab.getId().getSzsoldticketid()
                            + " and isvalid=1 order by iztickettypeid");
            String[] iztickettypeid = returnmodel.getItickettypeids();
            int n = 0;
            for (int j = 0; j < zsdaillist.size(); j++) {
                Stssoldticketsubtab zs = (Stssoldticketsubtab) zsdaillist
                        .get(j);
                for (int k = 0; k < iztickettypeid.length; k++) {
                    if (zs.getIztickettypeid().longValue() == Long
                            .parseLong(iztickettypeid[k])) {
                        n = n + 1;
                        zslist.add(zs);
                    }
                }
            }

            // 根据明细子表中的数据计算明细的各种金额
            System.out.println("111111111115");
            List zdaillist = timeSharingDao
                    .find("from Stscomticketsalesdetailstab where  id.isalesvoucherid="
                            + isalesvoucherid
                            + " and id.iticketstationid="
                            + iticketstationid
                            + " and id.isalesvoucherdetailsid="
                            + stssoldtickettab.getId()
                            .getIsalesvoucherdetailsid()
                            + " order by isalesvoucherdetailsid");

            List comlist = new ArrayList();
            for (int j = 0; j < zdaillist.size(); j++) {
                Stscomticketsalesdetailstab sts = (Stscomticketsalesdetailstab) zdaillist
                        .get(j);
                for (int k = 0; k < iztickettypeid.length; k++) {
                    if (sts.getIztickettypeid().longValue() == Long
                            .parseLong(iztickettypeid[k])) {
                        stssoldtickettab.setMactualsaleprice(stssoldtickettab
                                .getMactualsaleprice() - sts.getMsplitprice());
                        Stscomticketsalesdetailstab stscom = new Stscomticketsalesdetailstab();
                        StscomticketsalesdetailstabId sid = new StscomticketsalesdetailstabId();
                        sid.setIticketstationid(e.getIticketstationid());
                        sid.setIcomticketsalesdetailsid(sts.getId()
                                .getIcomticketsalesdetailsid());
                        sid.setIsalesvoucherdetailsid(new Long(i + 1));
                        sid.setIsalesvoucherid(stssalesvouchertab.getId()
                                .getIsalesvoucherid());
                        stscom.setId(sid);
                        stscom.setDtstartdate(sts.getDtstartdate());
                        stscom.setDtenddate(sts.getDtenddate());
                        stscom.setIcrowdkindpriceid(sts.getIcrowdkindpriceid());
                        stscom.setIsplitamount(stssoldtickettab
                                .getIplayerperticket());
                        stscom.setMsplitmoney(sts.getMsplitprice()
                                * stssoldtickettab.getIplayerperticket());
                        stscom.setMsplitprice(sts.getMsplitprice());
                        stscom.setIderatenums(jmnumb);
                        stscom.setMderatemoney(sts.getMsplitprice() * jmnumb);
                        stscom.setItickettypeid(sts.getItickettypeid());
                        stscom.setIztickettypeid(sts.getIztickettypeid());
                        stscom.setTripid(sts.getTripid());
                        stscom.setIvenueid(sts.getIvenueid());
                        stscom.setIvenueareaid(sts.getIvenueareaid());
                        stscom.setIvenueseatsid(sts.getIvenueseatsid());
                        stscom.setDtmakedate(nowtime);
                        // 计算手续费
                        // 查询该票是否有退订费率
                        boolean shouxu = true;
                        if (issx == 1) {
                            bystats = 1;
                            if (sts.getTripid().longValue() > 0) {
                                // 根据plist里面的数据找出对应竹排趟次是否停排
                                for (int a = 0; a < plist.size(); a++) {
                                    Productcontrol p = (Productcontrol) plist
                                            .get(a);
                                    if (p.getItickettypeid().longValue() == sts
                                            .getIztickettypeid().longValue()
                                            && p.getTripid().longValue() == sts
                                            .getTripid().longValue()
                                            && p.getStdata().equals(
                                            sts.getDtstartdate()
                                                    .substring(0, 10))) {

                                        bystats = p.getBystate();
                                    }
                                }
                            }
                            if (bystats == 1) {
                                List tdlist = timeSharingDao
                                        .find(" from Ticketxgz where itickettypeid="
                                                + sts.getIztickettypeid()
                                                + " and xyjs4=1 and isvalid=1");

                                if (tdlist.size() == 0) {
                                    stscom.setTdfl(new Double(0));
                                } else {

                                    Ticketxgz tcx = (Ticketxgz) tdlist.get(0);

                                    if (tcx.getJsfs().equals("0001")) {
                                        // 按小时计算
                                        long hours = 0;
                                        DateFormat df = new SimpleDateFormat(
                                                "yyyy-MM-dd HH:mm:ss");
                                        String bztime = sts.getDtenddate();
                                        try {
                                            Date d1 = df.parse(nowtime);
                                            Date d2 = df.parse(bztime);
                                            long diff = d2.getTime()
                                                    - d1.getTime();
                                            hours = diff / (1000 * 60 * 60);
                                        } catch (ParseException e1) {
                                            // TODO Auto-generated catch block
                                            e1.printStackTrace();
                                        }
                                        if (hours < 0) {
                                            stscom.setTdfl(tcx.getXyrate2());
                                        } else {
                                            List fllist = timeSharingDao
                                                    .find("from Changebackrate where gzid="
                                                            + tcx.getGzid()
                                                            + " and time>"
                                                            + hours
                                                            + " order by time");
                                            if (fllist == null
                                                    || fllist.size() == 0) {
                                                stscom.setTdfl(new Double(0));
                                            } else {
                                                Changebackrate grate = (Changebackrate) fllist
                                                        .get(0);
                                                // 将退订费率保存
                                                stscom.setTdfl(grate.getTdfl());
                                            }

                                        }
                                    } else if (tcx.getJsfs().equals("0002")) {
                                        // 按天计算退订费率
                                        long days = 0;
                                        DateFormat df = new SimpleDateFormat(
                                                "yyyy-MM-dd HH:mm:ss");
                                        String bztime = sts.getDtenddate();
                                        try {
                                            Date d1 = df.parse(nowtime);
                                            Date d2 = df.parse(bztime);
                                            long diff = d2.getTime()
                                                    - d1.getTime();
                                            days = diff / (1000 * 60 * 60 * 24);
                                        } catch (ParseException e1) {
                                            // TODO Auto-generated catch block
                                            e1.printStackTrace();
                                        }
                                        if (days < 0) {
                                            // 将退订费率保存
                                            stscom.setTdfl(tcx.getXyrate2());
                                        } else {
                                            List fllist = timeSharingDao
                                                    .find("from Changebackrate where gzid="
                                                            + tcx.getGzid()
                                                            + " and time>"
                                                            + days
                                                            + " order by time");
                                            if (fllist == null
                                                    || fllist.size() == 0) {
                                                stscom.setTdfl(new Double(0));
                                            } else {
                                                Changebackrate grate = (Changebackrate) fllist
                                                        .get(0);
                                                stscom.setTdfl(grate.getTdfl());
                                            }
                                        }
                                    } else if (tcx.getJsfs().equals("0003")) {
                                        // 常年
                                        long days = 0;
                                        DateFormat df = new SimpleDateFormat(
                                                "yyyy-MM-dd HH:mm:ss");
                                        String bztime = sts.getDtenddate();
                                        try {
                                            Date d1 = df.parse(nowtime);
                                            Date d2 = df.parse(bztime);
                                            long diff = d2.getTime()
                                                    - d1.getTime();
                                            days = diff / (1000 * 60 * 60 * 24);
                                        } catch (ParseException e1) {
                                            // TODO Auto-generated catch block
                                            e1.printStackTrace();
                                        }
                                        if (days < 0) {
                                            stscom.setTdfl(tcx.getXyrate2());
                                        } else {
                                            List fllist = timeSharingDao
                                                    .find("from Changebackrate where gzid="
                                                            + tcx.getGzid());
                                            if (fllist != null
                                                    && fllist.size() > 0) {

                                                Changebackrate grate = (Changebackrate) fllist
                                                        .get(0);
                                                stscom.setTdfl(grate.getTdfl());

                                            } else {
                                                stscom.setTdfl(new Double(0));
                                            }
                                        }
                                    } else {
                                        stscom.setTdfl(new Double(0));
                                    }

                                }

                            } else {
                                stscom.setTdfl(new Double(0));
                            }
                        } else {
                            stscom.setTdfl(new Double(0));
                        }
                        if (stscom.getMsplitmoney() - stscom.getMderatemoney() > 0) {
                            stscom.setMhandcharge((stscom.getMsplitmoney() - stscom
                                    .getMderatemoney()) * stscom.getTdfl());
                        } else {
                            stscom.setMhandcharge(new Double(0));
                        }
                        stscom.setIversion(new Long(0));
                        List Seatsalelist = this.timeSharingDao
                                .find(" from Seatsaletab where id.isalesvoucherid="
                                        + sts.getId().getIsalesvoucherid()
                                        + " and id.iticketstationid="
                                        + sts.getId().getIticketstationid()
                                        + " and id.isalesvoucherdetailsid="
                                        + sts.getId()
                                        .getIsalesvoucherdetailsid()
                                        + " and id.icomticketsalesdetailsid="
                                        + sts.getId()
                                        .getIcomticketsalesdetailsid()
                                        + " and id.szsoldticketid="
                                        + stssoldtickettab.getId()
                                        .getSzsoldticketid());

                        StringBuffer seats = new StringBuffer();

                        if (Seatsalelist != null && Seatsalelist.size() > 0) {
                            for (int a = 0; a < Seatsalelist.size(); a++) {

                                Seatsaletab seat = (Seatsaletab) Seatsalelist
                                        .get(a);
                                stscom.setItripprdcontrolid(seat
                                        .getItripprdcontrolid());
                                if (a == 0) {
                                    seats.append(seat.getIseatid());
                                } else {
                                    seats.append("#" + seat.getIseatid());
                                }
                                seat.setIsvalid(0L);// 退订
                                seatlist.add(seat);
                            }
                        }
                        System.out.println("seats=" + seats.toString());
                        stscom.setSeatsid(seats.toString());
                        System.out.println("stscom.getSeatsid()="
                                + stscom.getSeatsid());
                        comlist.add(stscom);

                        stssalesvoucherdetailstab
                                .setMactualsaleprice(stssalesvoucherdetailstab
                                        .getMactualsaleprice()
                                        + sts.getMsplitprice());

                        stssalesvoucherdetailstab
                                .setItotalnumber(stssoldtickettab
                                        .getIplayerperticket());
                        stssalesvoucherdetailstab
                                .setMhandcharge(stssalesvoucherdetailstab
                                        .getMhandcharge()
                                        + stscom.getMhandcharge());// 手续费
                        stssalesvoucherdetailstab
                                .setMeventmoney(stssalesvoucherdetailstab
                                        .getMeventmoney()
                                        + stscom.getMsplitmoney());
                        stssalesvoucherdetailstab
                                .setMtotalamount(stssalesvoucherdetailstab
                                        .getMtotalamount()
                                        + stscom.getMsplitmoney());
                        stssalesvoucherdetailstab.setMderatemoney(jmnumb
                                * stssalesvoucherdetailstab
                                .getMactualsaleprice());
                        // 跟新凭证金额数据
                        stssalesvouchertab
                                .setIaccountreceivable(stssalesvouchertab
                                        .getIaccountreceivable()
                                        + stscom.getMsplitmoney()
                                        - stscom.getMderatemoney());
                        stssalesvouchertab.setIacceptmoney(stssalesvouchertab
                                .getIacceptmoney()
                                + stscom.getMsplitmoney()
                                - stscom.getMderatemoney());
                        stssalesvouchertab.setMhandcharge(stssalesvouchertab
                                .getMhandcharge() + stscom.getMhandcharge());
                        stssalesvouchertab.setJmamnt(stssalesvouchertab
                                .getJmamnt() + stscom.getMderatemoney());

                    }
                }
            }
            stssalesvoucherdetailstab.setComlist(comlist);
            stssalelist.add(stssalesvoucherdetailstab);
            slist.add(stssoldtickettab);
        }
        System.out.println("111111111116");

        System.out.println("111111111117");
        // 结算表中添加数据
        int isnet = 1;
        Stssalessettlementtab st = new Stssalessettlementtab();
        StssalessettlementtabId sid = new StssalessettlementtabId();
        sid.setIsalesvoucherid(stssalesvouchertab.getId().getIsalesvoucherid());
        sid.setIticketstationid(stssalesvouchertab.getId()
                .getIticketstationid());

        sid.setIsalessettlementid(new Long(1));
        st.setId(sid);
        st.setSettlementdata(nowtime.substring(0, 10));
        st.setSettlementtime(nowtime.substring(11));
        st.setDtmakedate(nowtime);
        StssalessettlementtabId oldsid = new StssalessettlementtabId();
        oldsid.setIsalesvoucherid(oldstssalesvouchertab.getId()
                .getIsalesvoucherid());
        oldsid.setIticketstationid(oldstssalesvouchertab.getId()
                .getIticketstationid());
        oldsid.setIsalessettlementid(new Long(1));
        Stssalessettlementtab oldstssalessettlementtab = (Stssalessettlementtab) timeSharingDao
                .get(Stssalessettlementtab.class, oldsid);
        st.setIsettlementid(oldstssalessettlementtab.getIsettlementid());

        st.setMsettlementmoney(stssalesvouchertab.getIacceptmoney()
                - stssalesvouchertab.getMhandcharge());
        st.setIversion(new Long(1));
        // System.out.println("开始保存");
        System.out.println("111111111118");
        // 将网上订单数据保存到本地的订单表中
        MOrder morder = new MOrder();
        morder.setOrid(stssalesvouchertab.getSzsalesvoucherno());
        morder.setOrtp("02");// 退订单
        morder.setOrda(nowtime.substring(0, 10));
        morder.setOrti(nowtime.substring(11));
        morder.setUsid(stssalesvouchertab.getUsid());
        morder.setIsjl(new Long(0));
        morder.setYhamnt(stssalesvouchertab.getJmamnt());
        morder.setMont(stssalesvouchertab.getIacceptmoney()
                + stssalesvouchertab.getJmamnt());
        morder.setZfmont(stssalesvouchertab.getIacceptmoney());
        morder.setDdzt("06");
        morder.setIsallcp(new Long(0));
        morder.setZfusid(zfusid);
        if (stssalesvouchertab.getMhandcharge() != null) {
            morder.setTpsx(stssalesvouchertab.getMhandcharge());
        } else {
            morder.setTpsx(new Double(0));
        }
        morder.setTpmont(stssalesvouchertab.getIacceptmoney());
        morder.setTpfs("01");// 出票后退订
        morder.setSrid(oldstssalesvouchertab.getSzsalesvoucherno());
        morder.setIsc(iemployeeid);
        morder.setTpdate(nowtime);
        morder.setBankdata(nowtime.substring(0, 10));
        morder.setBanktime(nowtime.substring(10));
        if (isqt.longValue() == 1) {
            morder.setNotef("02");
            morder.setIse(forceemid);
        } else {
            morder.setNotef("03");
            morder.setIse(0L);
        }
        morder.setStdt(oldstssalesvouchertab.getDtauditdate());
        morder.setIsj(new Long(-1));
        tpmont = morder.getTpmont() - morder.getTpsx();
        tpsx = morder.getTpsx();
        String mo = morder.getOrid() + "&" + morder.getOrtp() + "&"
                + morder.getOrda() + "&" + morder.getOrti() + "&"
                + morder.getUsid() + "&" + morder.getIsjl() + "&"
                + morder.getYhamnt() + "&" + morder.getMont() + "&"
                + morder.getZfmont() + "&" + morder.getDdzt() + "&"
                + morder.getIsallcp() + "&" + morder.getZfusid() + "&"
                + morder.getTpsx() + "&" + morder.getTpmont() + "&"
                + morder.getTpfs() + "&" + morder.getSrid() + "&"
                + morder.getIsc() + "&" + morder.getTpdate() + "&"
                + morder.getBankdata() + "&" + morder.getBanktime() + "&"
                + morder.getNotef() + "&" + morder.getIse() + "&"
                + morder.getStdt() + "&" + morder.getIsj();
        // timeSharingDao.save(morder);
        YOrder yorder = new YOrder();
        YOrderId yid = new YOrderId();
        yid.setOrid(stssalesvouchertab.getSzsalesvoucherno());
        yid.setIscenicid(stssalesvouchertab.getIscenicid());
        yorder.setId(yid);
        yorder.setScenictype("01");
        yorder.setDdzt(morder.getDdzt());
        yorder.setUsid(stssalesvouchertab.getUsid());
        yorder.setIbusinessid(stssalesvouchertab.getIbusinessid());
        yorder.setDtstartdate(dtstartdate);
        yorder.setDtenddate(dtenddate);
        yorder.setOrhm(orhm);
        yorder.setOrnm(ornm);
        yorder.setOrph(orph);
        yorder.setOrzj(orzj);
        yorder.setMont(stssalesvouchertab.getIacceptmoney()
                + stssalesvouchertab.getJmamnt());
        yorder.setZfmont(stssalesvouchertab.getIacceptmoney());
        yorder.setYhamnt(stssalesvouchertab.getJmamnt());
        yorder.setTpsx(stssalesvouchertab.getMhandcharge());
        yorder.setTpmont(stssalesvouchertab.getIacceptmoney());
        yorder.setTpdate(nowtime);
        yorder.setTpfs("01");// 出票后退订
        yorder.setIsc(iemployeeid);
        if (isqt.longValue() == 1) {
            // 授权退订
            yorder.setFempid(forceemid.toString());
            yorder.setIse(forceemid);
            yorder.setNoteb(forcenote);
            yorder.setNotef("02");
        } else {
            yorder.setFempid("");
            yorder.setIse(0L);
            yorder.setNoteb("");
            yorder.setNotef("03");
        }
        yorder.setIsj(new Long(-1));
        String yo = yorder.getId().getOrid() + "&"
                + yorder.getId().getIscenicid() + "&" + yorder.getScenictype()
                + "&" + yorder.getDdzt() + "&" + yorder.getUsid() + "&"
                + yorder.getIbusinessid() + "&" + yorder.getDtstartdate() + "&"
                + yorder.getDtenddate() + "&" + yorder.getOrhm() + "&"
                + yorder.getOrnm() + "&" + yorder.getOrph() + "&"
                + yorder.getOrzj() + "&" + yorder.getMont() + "&"
                + yorder.getZfmont() + "&" + yorder.getYhamnt() + "&"
                + morder.getTpsx() + "&" + yorder.getTpmont() + "&"
                + yorder.getTpdate() + "&" + yorder.getTpfs() + "&"
                + yorder.getIsc() + "&" + yorder.getFempid() + "&"
                + yorder.getIse() + "&" + yorder.getNoteb() + "&"
                + yorder.getNotef() + "&" + yorder.getIsj();

        // timeSharingDao.save(yorder);

        TOrder tdorder = new TOrder();
        TOrderId tid = new TOrderId();
        tid.setOrid(stssalesvouchertab.getSzsalesvoucherno());
        tid.setIscenicid(stssalesvouchertab.getIscenicid());
        tdorder.setId(tid);
        tdorder.setScenictype("01");
        tdorder.setOrfl("02");
        tdorder.setDdzt(morder.getDdzt());
        tdorder.setIregionalid(oldstssalesvouchertab.getIregionalid());
        tdorder.setUsid(stssalesvouchertab.getUsid());
        tdorder.setIbusinessid(stssalesvouchertab.getIbusinessid());
        tdorder.setDtstartdate(dtstartdate);
        tdorder.setDtenddate(dtenddate);
        tdorder.setOrnm(ornm);
        tdorder.setOrnm(orhm);
        tdorder.setOrzj(orzj);
        tdorder.setOrhm(orhm);
        tdorder.setMont(stssalesvouchertab.getIacceptmoney()
                + stssalesvouchertab.getJmamnt());
        tdorder.setZfmont(stssalesvouchertab.getIacceptmoney());
        tdorder.setYhamnt(stssalesvouchertab.getJmamnt());
        tdorder.setIsc(iemployeeid);
        tdorder.setNotec(Tools.getNowString());
        tdorder.setIsj(new Long(-1));
        tdorder.setNotej(oldstssalesvouchertab.getSzsalesvoucherno());
        if (isqt.longValue() == 1) {
            // 授权退订
            tdorder.setFempid(forceemid.toString());
            tdorder.setNoteb(forcenote);
            tdorder.setNotef("02");
        } else {
            tdorder.setFempid("");
            tdorder.setNoteb("");
            tdorder.setNotef("03");
        }
        System.out.println("111111111119");
        String to = tdorder.getId().getOrid() + "&"
                + tdorder.getId().getIscenicid() + "&"
                + tdorder.getScenictype() + "&" + tdorder.getOrfl() + "&"
                + tdorder.getDdzt() + "&" + tdorder.getIregionalid() + "&"
                + tdorder.getUsid() + "&" + tdorder.getIbusinessid() + "&"
                + tdorder.getDtstartdate() + "&" + tdorder.getDtenddate() + "&"
                + tdorder.getOrhm() + "&" + tdorder.getOrnm() + "&"
                + tdorder.getOrph() + "&" + tdorder.getOrzj() + "&"
                + tdorder.getMont() + "&" + tdorder.getZfmont() + "&"
                + tdorder.getYhamnt() + "&" + tdorder.getIsc() + "&"
                + tdorder.getNotec() + "&" + tdorder.getIsj() + "&"
                + tdorder.getNotej() + "&" + tdorder.getFempid() + "&"
                + tdorder.getNoteb() + "&" + tdorder.getNotef();

        // timeSharingDao.save(tdorder);

        String tl = "";
        String tzl = "";
        double price = 0.0;
        // timeSharingDao.save(st);
        for (int i = 0; i < stssalelist.size(); i++) {

            Stssalesvoucherdetailstab ss = (Stssalesvoucherdetailstab) stssalelist
                    .get(i);
            Edmcrowdkindpricetab edmcrowdkindpricetab = (Edmcrowdkindpricetab) timeSharingDao
                    .get(Edmcrowdkindpricetab.class, ss.getIcrowdkindpriceid());
            // timeSharingDao.save(ss);
            if (isnet == 1) {
                /**
                 * YOrderlist yorderlist = new YOrderlist(); YOrderlistId ylid =
                 * new YOrderlistId();
                 *
                 * ylid.setOrid(stssalesvouchertab.getSzsalesvoucherno());
                 * ylid.setOrderlistid(ss.getId().getIsalesvoucherdetailsid());
                 * ylid.setIscenicid(stssalesvouchertab.getIscenicid());
                 * yorderlist.setId(ylid);
                 * yorderlist.setItickettypeid(ss.getItickettypeid());
                 * yorderlist.setIcrowdkindpriceid(ss.getIcrowdkindpriceid());
                 * yorderlist
                 * .setIcrowdkindid(edmcrowdkindpricetab.getIcrowdkindid());
                 * yorderlist.setDtstartdate(ss.getDtstartdate());
                 * yorderlist.setDtenddate(ss.getDtenddate());
                 * yorderlist.setNumb(ss.getIplayerperticket());
                 * yorderlist.setPric(ss.getMactualsaleprice());
                 * yorderlist.setAmnt(ss.getMeventmoney());
                 * yorderlist.setMhandcharge(ss.getMhandcharge());
                 * yorderlist.setYhnumb(ss.getIderatenums());
                 * yorderlist.setYhamnt(ss.getMderatemoney());
                 * timeSharingDao.save(yorderlist);
                 */
                TOrderlist torderlist = new TOrderlist();
                TOrderlistId tlid = new TOrderlistId();

                tlid.setOrid(stssalesvouchertab.getSzsalesvoucherno());
                tlid.setOrderlistid(ss.getId().getIsalesvoucherdetailsid());
                tlid.setIscenicid(stssalesvouchertab.getIscenicid());
                torderlist.setId(tlid);
                torderlist.setItickettypeid(ss.getItickettypeid());
                torderlist.setIcrowdkindpriceid(ss.getIcrowdkindpriceid());
                torderlist.setIcrowdkindid(edmcrowdkindpricetab
                        .getIcrowdkindid());
                torderlist.setDtstartdate(ss.getDtstartdate());
                torderlist.setDtenddate(ss.getDtenddate());
                torderlist.setNumb(ss.getIplayerperticket());
                torderlist.setPric(ss.getMactualsaleprice());
                price = ss.getMactualsaleprice();
                torderlist.setAmnt(ss.getMeventmoney());
                torderlist.setMhandcharge(ss.getMhandcharge());
                torderlist.setYhnumb(ss.getIderatenums());
                torderlist.setYhamnt(ss.getMderatemoney());
                torderlist.setIsj(new Long(-1));
                // timeSharingDao.save(torderlist);
                if (tl.equals("")) {
                    tl = tlid.getOrid() + "&" + tlid.getOrderlistid() + "&"
                            + tlid.getIscenicid() + "&"
                            + torderlist.getItickettypeid() + "&"
                            + torderlist.getIcrowdkindpriceid() + "&"
                            + torderlist.getIcrowdkindid() + "&"
                            + torderlist.getDtstartdate() + "&"
                            + torderlist.getDtenddate() + "&"
                            + torderlist.getNumb() + "&" + torderlist.getPric()
                            + "&" + torderlist.getAmnt() + "&"
                            + torderlist.getMhandcharge() + "&"
                            + torderlist.getYhnumb() + "&"
                            + torderlist.getYhamnt() + "&"
                            + torderlist.getIsj();
                } else {
                    tl = tl + "|" + tlid.getOrid() + "&"
                            + tlid.getOrderlistid() + "&" + tlid.getIscenicid()
                            + "&" + torderlist.getItickettypeid() + "&"
                            + torderlist.getIcrowdkindpriceid() + "&"
                            + torderlist.getIcrowdkindid() + "&"
                            + torderlist.getDtstartdate() + "&"
                            + torderlist.getDtenddate() + "&"
                            + torderlist.getNumb() + "&" + torderlist.getPric()
                            + "&" + torderlist.getAmnt() + "&"
                            + torderlist.getMhandcharge() + "&"
                            + torderlist.getYhnumb() + "&"
                            + torderlist.getYhamnt() + "&"
                            + torderlist.getIsj();
                }
            }

            List comlist = ss.getComlist();

            for (int j = 0; j < comlist.size(); j++) {

                Stscomticketsalesdetailstab stscom = (Stscomticketsalesdetailstab) comlist
                        .get(j);
                // timeSharingDao.save(stscom);
                if (isnet == 1) {

                    /**
                     * YZorderlist yzlist = new YZorderlist(); YZorderlistId
                     * yzid = new YZorderlistId();
                     * yzid.setIscenicid(stssalesvouchertab.getIscenicid());
                     * yzid.setOrid(stssalesvouchertab.getSzsalesvoucherno());
                     * yzid
                     * .setOrderlistid(ss.getId().getIsalesvoucherdetailsid());
                     * yzid. setZorderlistid(stscom.getId().
                     * getIcomticketsalesdetailsid()); yzlist.setId(yzid);
                     * yzlist
                     * .setIcrowdkindpriceid(stscom.getIcrowdkindpriceid());
                     * yzlist
                     * .setIcrowdkindid(edmcrowdkindpricetab.getIcrowdkindid());
                     * yzlist.setDtstartdate(stscom.getDtstartdate());
                     * yzlist.setDtenddate(stscom.getDtenddate());
                     * yzlist.setItickettypeid(stscom.getItickettypeid());
                     * yzlist.setIztickettypeid(stscom.getIztickettypeid());
                     * yzlist.setIvenueid(stscom.getIvenueid());
                     * yzlist.setIvenueareaid(stscom.getIvenueareaid());
                     * yzlist.setIvenueseatsid(stscom.getIvenueseatsid());
                     * yzlist.setTripid(stscom.getTripid());
                     * yzlist.setZpric(stscom.getMsplitprice());
                     * yzlist.setZamnt(stscom.getMsplitmoney());
                     * yzlist.setZnumb(stscom.getIsplitamount());
                     * yzlist.setMhandcharge(stscom.getMhandcharge());
                     * yzlist.setTdfl(stscom.getTdfl());
                     * yzlist.setZyhnumb(stscom.getIderatenums());
                     * yzlist.setZyhamnt(stscom.getMderatemoney());
                     * yzlist.setSqnumber(stscom.getIsplitamount() -
                     * stscom.getIderatenums());
                     *
                     * timeSharingDao.save(yzlist);
                     */
                    TZorderlist tzlist = new TZorderlist();
                    TZorderlistId tzid = new TZorderlistId();
                    tzid.setIscenicid(stssalesvouchertab.getIscenicid());
                    tzid.setOrid(stssalesvouchertab.getSzsalesvoucherno());
                    tzid.setOrderlistid(ss.getId().getIsalesvoucherdetailsid());
                    tzid.setZorderlistid(stscom.getId()
                            .getIcomticketsalesdetailsid());
                    tzlist.setId(tzid);
                    tzlist.setIcrowdkindpriceid(stscom.getIcrowdkindpriceid());
                    tzlist.setIcrowdkindid(edmcrowdkindpricetab
                            .getIcrowdkindid());
                    tzlist.setDtstartdate(stscom.getDtstartdate());
                    tzlist.setDtenddate(stscom.getDtenddate());
                    tzlist.setItickettypeid(stscom.getItickettypeid());
                    tzlist.setIztickettypeid(stscom.getIztickettypeid());
                    tzlist.setIvenueid(stscom.getIvenueid());
                    tzlist.setIvenueareaid(stscom.getIvenueareaid());
                    tzlist.setIvenueseatsid(stscom.getIvenueseatsid());
                    tzlist.setTripid(stscom.getTripid());
                    tzlist.setZpric(stscom.getMsplitprice());
                    tzlist.setZamnt(stscom.getMsplitmoney());
                    tzlist.setZnumb(stscom.getIsplitamount());
                    tzlist.setZyhnumb(stscom.getIderatenums());
                    tzlist.setZyhamnt(stscom.getMderatemoney());
                    tzlist.setSqnumber(stscom.getIsplitamount()
                            - stscom.getIderatenums());
                    tzlist.setIsj(new Long(-1));
                    tzlist.setMhandcharge(stscom.getMhandcharge());
                    tzlist.setTdfl(stscom.getTdfl());
                    if (tzl.equals("")) {
                        tzl = tzid.getOrid() + "&" + tzid.getOrderlistid()
                                + "&" + tzid.getIscenicid() + "&"
                                + tzid.getZorderlistid() + "&"
                                + tzlist.getIcrowdkindpriceid() + "&"
                                + tzlist.getIcrowdkindid() + "&"
                                + tzlist.getDtstartdate() + "&"
                                + tzlist.getDtenddate() + "&"
                                + tzlist.getItickettypeid() + "&"
                                + tzlist.getIztickettypeid() + "&"
                                + tzlist.getIvenueid() + "&"
                                + tzlist.getIvenueareaid() + "&"
                                + tzlist.getIvenueseatsid() + "&"
                                + tzlist.getTripid() + "&" + tzlist.getZpric()
                                + "&" + tzlist.getZamnt() + "&"
                                + tzlist.getZnumb() + "&" + tzlist.getZyhnumb()
                                + "&" + tzlist.getZyhamnt() + "&"
                                + tzlist.getSqnumber() + "&" + tzlist.getIsj()
                                + "&" + tzlist.getMhandcharge() + "&"
                                + tzlist.getTdfl();
                        if (stscom.getSeatsid() != null
                                && !stscom.getSeatsid().equals("")) {
                            System.out.println("stscom.getSeatsid()="
                                    + stscom.getSeatsid());
                            tzl = tzl + "&" + stscom.getItripprdcontrolid();
                            tzl = tzl + "&" + stscom.getSeatsid();
                        } else {
                            tzl = tzl + "&0";
                        }
                    } else {
                        tzl = tzl + "|" + tzid.getOrid() + "&"
                                + tzid.getOrderlistid() + "&"
                                + tzid.getIscenicid() + "&"
                                + tzid.getZorderlistid() + "&"
                                + tzlist.getIcrowdkindpriceid() + "&"
                                + tzlist.getIcrowdkindid() + "&"
                                + tzlist.getDtstartdate() + "&"
                                + tzlist.getDtenddate() + "&"
                                + tzlist.getItickettypeid() + "&"
                                + tzlist.getIztickettypeid() + "&"
                                + tzlist.getIvenueid() + "&"
                                + tzlist.getIvenueareaid() + "&"
                                + tzlist.getIvenueseatsid() + "&"
                                + tzlist.getTripid() + "&" + tzlist.getZpric()
                                + "&" + tzlist.getZamnt() + "&"
                                + tzlist.getZnumb() + "&" + tzlist.getZyhnumb()
                                + "&" + tzlist.getZyhamnt() + "&"
                                + tzlist.getSqnumber() + "&" + tzlist.getIsj()
                                + "&" + tzlist.getMhandcharge() + "&"
                                + tzlist.getTdfl();
                        if (stscom.getSeatsid() != null
                                && !stscom.getSeatsid().equals("")) {
                            tzl = tzl + "&" + stscom.getItripprdcontrolid();
                            tzl = tzl + "&" + stscom.getSeatsid();
                        } else {
                            tzl = tzl + "&0";
                        }
                    }
                    // timeSharingDao.save(tzlist);
                }

            }
        }
        try {
            try {/*
                System.out.println("productcontrols=" + productcontrols);
                javax.xml.rpc.Service service = null;
                java.net.URL endpointURL = new java.net.URL("http://"
                        + url
                        + "/services/centersaleService?wsdl");
                CentersaleServiceSoapBindingStub ssl = new CentersaleServiceSoapBindingStub(
                        endpointURL, service);
                ssl.setMaintainSession(true);
                com.ectrip.ticket.centersale.client.ResultBean cano = ssl
                        .updatecptdorder(productcontrols,
                                oldstssalesvouchertab.getSzsalesvoucherno(),
                                stssalesvouchertab.getIscenicid(),
                                stssalesvouchertab.getIacceptmoney()
                                        - stssalesvouchertab.getMhandcharge(),
                                stssalesvouchertab.getMhandcharge(), zfusid,
                                szsalesvoucherno, mo, yo, to, tl, tzl);
                ResultBean rb = new ResultBean();
                if (cano.getRowsCount() > 0) {
                    rb.setColumnCount(cano.getColumnCount());
                    rb.setColumnNames(cano.getColumnNames());
                    rb.setColumnCount(cano.getColumnCount());
                    rb.setRowsCount(cano.getRowsCount());
                    for (int i = 0; i < cano.getRowsCount(); i++) {
                        String[] values = new String[cano.getColumnCount()];
                        for (int j = 0; j < cano.getColumnCount(); j++) {
                            values[j] = cano.getResult(i, j);
                        }
                        rb.addRow(values);
                    }
                }

                if (rb.getResult(0, 0).equals("false")) {

                    return rb;
                }
            */} catch (Exception e2) {
                rs.addRow(new String[] { "false", "原订单数据预付款保存失败,退订失败" });
                return rs;
            }
            if (seatlist.size() > 0) {
                for (int i = 0; i < seatlist.size(); i++) {
                    Seatsaletab seatt = (Seatsaletab) seatlist.get(i);
                    this.timeSharingDao.update(seatt);
                }

            }
            String stockUsid = stssalesvouchertab.getUsid();
            Custom c = (Custom) timeSharingDao.get(Custom.class,stockUsid);
            if(c != null){
                if(c.getIbusinessid().longValue() == 2L && c.getUstp().equals("02") && c.getUsqx().startsWith("0111")){
                    stockUsid = c.getSusid();
                }else if(c.getIbusinessid().longValue() == 3L && c.getUstp().equals("02")){
                    stockUsid = c.getSusid();
                }
            }
            timeSharingDao.save(stssalesvouchertab);
            timeSharingDao.save(st);
            for (int i = 0; i < stssalelist.size(); i++) {

                Stssalesvoucherdetailstab ss = (Stssalesvoucherdetailstab) stssalelist
                        .get(i);
                Edmcrowdkindpricetab edmcrowdkindpricetab = (Edmcrowdkindpricetab) timeSharingDao
                        .get(Edmcrowdkindpricetab.class,
                                ss.getIcrowdkindpriceid());
                timeSharingDao.save(ss);

                List comlist = ss.getComlist();

                for (int j = 0; j < comlist.size(); j++) {

                    Stscomticketsalesdetailstab stscom = (Stscomticketsalesdetailstab) comlist
                            .get(j);
                    timeSharingDao.save(stscom);

                }
            }

            for (int i = 0; i < zslist.size(); i++) {
                Stssoldticketsubtab zs = (Stssoldticketsubtab) zslist.get(i);
                zs.setIsvalid(new Long(-1));
                zs.setDtmakedate(nowtime);
                timeSharingDao.update(zs);
                StsschecktabId scid = new StsschecktabId();
                scid.setIsalesvoucherid(zs.getId().getIsalesvoucherid());
                scid.setIsalesvoucherdetailsid(zs.getId()
                        .getIsalesvoucherdetailsid());
                scid.setIticketstationid(zs.getId().getIticketstationid());
                scid.setSzsoldticketid(zs.getId().getSzsoldticketid());
                scid.setSzsoldticketsubid(zs.getId().getSzsoldticketsubid());
                Stsschecktab sc = (Stsschecktab) this.timeSharingDao.get(
                        Stsschecktab.class, scid);
                if (sc != null) {
                    sc.setIsvalid(new Long(-1));
                    sc.setDtmakedate(nowtime);
                    timeSharingDao.update(sc);
                }
            }
            List<StockOrderInfo> stocks = new ArrayList<StockOrderInfo>();
            String stockJson = "";
            for (int i = 0; i < slist.size(); i++) {
                Stssoldtickettab s3 = (Stssoldtickettab) slist.get(i);

                List zsdaillist = timeSharingDao
                        .find("from Stssoldticketsubtab where id.isalesvoucherid="
                                + isalesvoucherid
                                + " and id.iticketstationid="
                                + iticketstationid
                                + " and id.isalesvoucherdetailsid="
                                + s3.getId().getIsalesvoucherdetailsid()
                                + " and id.szsoldticketid="
                                + s3.getId().getSzsoldticketid()
                                + " and isvalid=1 order by iztickettypeid");
                if (zsdaillist == null || zsdaillist.size() == 0) {
                    s3.setByvalidity("01");// 全部退订
                    StockOrderInfo stockOrderInfo = new StockOrderInfo();
                    stockOrderInfo.setOrid(stssalesvouchertab.getSzsalesvoucherno());
                    stockOrderInfo.setProviderId(stssalesvouchertab.getIscenicid());
                    stockOrderInfo.setProductId(s3.getItickettypeid());
                    Stssalesvoucherdetailstab std = (Stssalesvoucherdetailstab) timeSharingDao.get(Stssalesvoucherdetailstab.class,
                            new StssalesvoucherdetailstabId(s3.getId().getIsalesvoucherdetailsid(),isalesvoucherid,iticketstationid));
                    stockOrderInfo.setPriceId(std.getIcrowdkindpriceid());
                    stockOrderInfo.setStockDate(s3.getDtstartdate());
                    stockOrderInfo.setNumb(-s3.getIplayerperticket());
                    stockOrderInfo.setUsid(stockUsid);
                    stocks.add(stockOrderInfo);
                }

                s3.setDtmakedate(nowtime);
                timeSharingDao.update(s3);
            }

            if (ystssalelist != null && ystssalelist.size() > 0) {
                for (int i = 0; i < ystssalelist.size(); i++) {
                    Stssalesvoucherdetailstab ystssalesvoucherdetailstab = (Stssalesvoucherdetailstab) ystssalelist
                            .get(i);
                    timeSharingDao.update(ystssalesvoucherdetailstab);
                }
            }

            // 服务商优惠 修改优惠明细
            if (yxsyhlist != null && yxsyhlist.size() > 0) {
                for (int h = 0; h < yxsyhlist.size(); h++) {
                    Stssalesvoucherdetailstab sts = (Stssalesvoucherdetailstab) yxsyhlist
                            .get(h);
                    timeSharingDao.update(sts);
                }
            }
            if (comtlist != null && comtlist.size() > 0) {
                for (int z = 0; z < comtlist.size(); z++) {
                    Stscomticketsalesdetailstab comt = (Stscomticketsalesdetailstab) comtlist
                            .get(z);
                    timeSharingDao.update(comt);
                }
            }

            // 2012-11-15 李经锐修改 增加 预制票退票后是否可再修改
            if (e.getIscenicid() != null && !e.getIscenicid().equals("")) {
                Hotelprovider hotelpder = (Hotelprovider) this.timeSharingDao.get(
                        Hotelprovider.class, e.getIscenicid());
                if (hotelpder != null) {
                    // 预制票可退票后销售
                    if (hotelpder.getNoted4() != null
                            && hotelpder.getNoted4().equals("1")) {
                        getWarehouseCheck(returnmodellist, e.getIscenicid(),
                                iemployeeid);
                    }

                    // IC卡入库销售
                    if (hotelpder.getInoteger5() != null
                            && hotelpder.getInoteger5() == 1) {
                        getICkupCheck(returnmodellist, iemployeeid);
                    }
                }
            }
            if(oldstssalesvouchertab.getSzsalesvoucherno().substring(8,11).equals("888") || oldstssalesvouchertab.getSzsalesvoucherno().substring(8,11).equals("999")){
                List<Companyscenic> csl = timeSharingDao.find("from Companyscenic c where c.id.iscenicid=? and c.cytonly='1'",
                        new Object[] {oldstssalesvouchertab.getIscenicid()});
                Galcompanyinfotab gal = (Galcompanyinfotab) timeSharingDao.get(Galcompanyinfotab.class, csl.get(0).getId().getIcompanyinfoid());
                System.out.println("tpmont:"+tpmont+",tpsx:"+tpsx);
                boolean b = true;//CYTClient.RefundOTOOrder(morder.getUsid(), gal.getSzcompanycode(), oldstssalesvouchertab.getSzsalesvoucherno(), szsalesvoucherno, String.valueOf(MathUtil.amplify2int(price, 2)), String.valueOf(returnmodellist.size()), String.valueOf(MathUtil.amplify2int(tpmont, 2)), String.valueOf(MathUtil.amplify2int(tpsx, 2)));
                if(b == false){
                    try {/*
                        System.out.println("更新已修改的预付款");
                        javax.xml.rpc.Service service = null;
                        java.net.URL endpointURL = new java.net.URL("http://"
                                + url
                                + "/services/centersaleService?wsdl");
                        CentersaleServiceSoapBindingStub ssl = new CentersaleServiceSoapBindingStub(
                                endpointURL, service);
                        ssl.setMaintainSession(true);
                        ssl.updatehfcptdorder(productcontrols,
                                oldstssalesvouchertab.getSzsalesvoucherno(),
                                stssalesvouchertab.getIscenicid(), tpmont, tpsx,
                                zfusid, szsalesvoucherno);

                    */} catch (Exception e2) {
                        throw e2;
                    }
                    throw new RuntimeException("易旅宝退订接口通知失败，无法退订");
                }
            }
            Sysparv5 sysp = getSysparv5("COMM", "0006");
            if(sysp == null){
                sysp = new Sysparv5();
                sysp.setIsvalue(1L);
            }
            //返还库存
            if (WebContant.GetKeyValue("IsCenterUrl").equals("1") && sysp.getIsvalue() == 1L) {
                try {/*
                    javax.xml.rpc.Service service = null;
                    java.net.URL endpointURL = new java.net.URL("http://"
                            + url
                            + "/services/centersaleService?wsdl");
                    CentersaleServiceSoapBindingStub ssl = new CentersaleServiceSoapBindingStub(
                            endpointURL, service);
                    ssl.setMaintainSession(true);
                    ssl.saveStock(stockJson, "false");
                */} catch (Exception e1) {
                    e1.printStackTrace();
                    IStockService stockService = (IStockService) SpringUtil.getBean("stockService");
                    stockService.saveStockDetails(stocks, false);
                }
            }else{
                IStockService stockService = (IStockService) SpringUtil.getBean("stockService");
                try{
                    stockService.saveStockDetails(stocks, false);
                }catch (Exception e1){
                    e1.printStackTrace();
                }
            }
            rs.addRow(new String[] { "true",
                    stssalesvouchertab.getId().getIsalesvoucherid().toString(),
                    String.valueOf(tpmont), String.valueOf(tpsx) });
            return rs;
        } catch (Exception e1) {
            try {/*
                System.out.println("更新已修改的预付款");
                javax.xml.rpc.Service service = null;
                java.net.URL endpointURL = new java.net.URL("http://"
                        + url
                        + "/services/centersaleService?wsdl");
                CentersaleServiceSoapBindingStub ssl = new CentersaleServiceSoapBindingStub(
                        endpointURL, service);
                ssl.setMaintainSession(true);
                ssl.updatehfcptdorder(productcontrols,
                        oldstssalesvouchertab.getSzsalesvoucherno(),
                        stssalesvouchertab.getIscenicid(), tpmont, tpsx,
                        zfusid, szsalesvoucherno);

            */} catch (Exception e2) {
                throw e2;
            }
            throw e1;

        }
    }

    public ResultBean getcancelproductcontrol(List plist) {
        StringBuffer sql = new StringBuffer();
        sql.append("select p.itickettypeid,p.tripid,p.stdata,p.bystate from productcontrol p  where p.controltype='03'  ");
        for (int i = 0; i < plist.size(); i++) {
            Productcontrol p = (Productcontrol) plist.get(i);
            if (i == 0) {
                sql.append(" and ( ( p.itickettypeid=" + p.getItickettypeid()
                        + "  and p.stdata='" + p.getStdata()
                        + "' and  p.tripid=" + p.getTripid() + " )  ");
            } else {
                sql.append(" or ( p.itickettypeid=" + p.getItickettypeid()
                        + "  and p.stdata='" + p.getStdata()
                        + "' and  p.tripid=" + p.getTripid() + " )  ");
            }
        }
        sql.append(" ) and (p.byisduty=1 or p.byisduty=0 ) and p.byisuse=1 order by p.itickettypeid,p.stdata");

        List<Map> list = new ArrayList();

        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql.toString());
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        ResultBean rs = MapToResultBean.toResultBean(list);
        return rs;
    }

    public ResultBean getStssalesvouchertab(Long isalesvoucherid,
                                            Long iticketstationid) throws IllegalAccessException,
            InvocationTargetException {
        ResultBean rs = new ResultBean();
        rs.setColumnCount(3);
        rs.setColumnNames(new String[] { "mont", "settlementid", "message" });
        double mont = 0;
        String settlementid = "";
        List slist = timeSharingDao
                .find("select new map(s.iaccountreceivable as iaccountreceivable,s.mhandcharge as mhandcharge,e.isettlementid as isettlementid,v5.pmva as settlementid) from Stssalesvouchertab s,Stssalessettlementtab e,Sysparv5 v5 where s.id.isalesvoucherid="
                        + isalesvoucherid
                        + " and s.id.iticketstationid="
                        + iticketstationid
                        + " and s.id.isalesvoucherid=e.id.isalesvoucherid and s.id.iticketstationid=e.id.iticketstationid and v5.id.pmky='ZFFS' and e.isettlementid=v5.id.pmcd");
        Stssalesvouchertab s = new Stssalesvouchertab();
        BeanUtils.populate(s, (Map) slist.get(0));
        mont = s.getIaccountreceivable() - s.getMhandcharge();// 应退款
        settlementid = s.getSettlementid();// 结算类别
        StringBuffer message = new StringBuffer();
        List detaillsit = timeSharingDao
                .find("select new map(s.id.isalesvoucherdetailsid as isalesvoucherdetailsid,s.icrowdkindpriceid as icrowdkindpriceid,s.szstartserial as szstartserial,e.sztickettypename as stritickettypeid,s.mactualsaleprice as mactualsaleprice,s.meventmoney as meventmoney,s.mhandcharge as mhandcharge,s.ideratenums as ideratenums,s.mderatemoney as mderatemoney) from Stssalesvoucherdetailstab s,Edmtickettypetab e where s.id.isalesvoucherid="
                        + isalesvoucherid
                        + " and s.id.iticketstationid="
                        + iticketstationid
                        + " and e.itickettypeid=s.itickettypeid order by istartid");
        // System.out.println(detaillsit.size());
        for (int i = 0; i < detaillsit.size(); i++) {
            Stssalesvoucherdetailstab sd = new Stssalesvoucherdetailstab();
            BeanUtils.populate(sd, (Map) detaillsit.get(i));
            Edmcrowdkindpricetab crow = (Edmcrowdkindpricetab) this.timeSharingDao
                    .get(Edmcrowdkindpricetab.class, sd.getIcrowdkindpriceid());
            Edpcrowdkindtab edp = (Edpcrowdkindtab) this.timeSharingDao.get(
                    Edpcrowdkindtab.class, crow.getIcrowdkindid());

            message.append(sd.getSzstartserial() + ","
                    + sd.getStritickettypeid() + "--"
                    + edp.getSzcrowdkindname() + ","
                    + sd.getMactualsaleprice().toString() + ","
                    + sd.getMeventmoney().toString() + ","
                    + sd.getMhandcharge() + "," + sd.getIderatenums() + ","
                    + sd.getMderatemoney() + "&");
            // System.out.println(message.toString());
            List clist = timeSharingDao
                    .find("select new map(e.sztickettypename as szztickettypename,s.dtstartdate as dtstartdate,s.dtenddate as dtenddate,s.isplitamount as isplitamount,s.msplitprice as msplitprice,s.msplitmoney as msplitmoney,s.mhandcharge as mhandcharge,s.tripid as tripid,s.ideratenums as ideratenums,s.mderatemoney as mderatemoney) from Stscomticketsalesdetailstab s ,Edmtickettypetab e where s.id.isalesvoucherid="
                            + isalesvoucherid
                            + " and s.id.iticketstationid="
                            + iticketstationid
                            + " and s.id.isalesvoucherdetailsid="
                            + sd.getIsalesvoucherdetailsid()
                            + " and e.itickettypeid=s.iztickettypeid");

            for (int j = 0; j < clist.size(); j++) {
                Stscomticketsalesdetailstab sts = new Stscomticketsalesdetailstab();
                BeanUtils.populate(sts, (Map) clist.get(j));

                if (j == 0) {
                    message.append(sts.getSzztickettypename() + ","
                            + sts.getDtstartdate() + "," + sts.getDtenddate()
                            + "," + sts.getMsplitprice().toString() + ","
                            + sts.getIsplitamount().toString() + ","
                            + sts.getMsplitmoney().toString() + ","
                            + sts.getMhandcharge() + "," + sts.getIderatenums()
                            + "," + sts.getMderatemoney());
                } else {
                    message.append("#" + sts.getSzztickettypename() + ","
                            + sts.getDtstartdate() + "," + sts.getDtenddate()
                            + "," + sts.getMsplitprice().toString() + ","
                            + sts.getIsplitamount().toString() + ","
                            + sts.getMsplitmoney().toString() + ","
                            + sts.getMhandcharge() + "," + sts.getIderatenums()
                            + "," + sts.getMderatemoney());
                }

            }
            if (i < detaillsit.size() - 1) {
                message.append("@");
            }
            // System.out.println(message.toString());
        }
        // System.out.println(message.toString());
        rs.addRow(new String[] { String.valueOf(mont), settlementid,
                message.toString() });
        return rs;

    }

    public ResultBean getprintmanage(Long iscenicid, Long ibusinessid) {
        String sql = " select p.ibusinessid,p.iscenicid ,p.printno,e.szscenicname,b.szbusinessname,v5.pmva as szprintno,p.ordernum from Printticketmanage p,Sysparv5 v5,Edmbusinesstab b,Esbscenicareatab e where p.iscenicid="
                + iscenicid
                + " and p.ibusinessid="
                + ibusinessid
                + " and  v5.pmky='PRSZ' and v5.pmcd=p.printno and p.iscenicid=e.iscenicid and p.ibusinessid=b.ibusinessid  order by p.ordernum ";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMap(sql);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        ResultBean rs = MapToResultBean.toResultBean(list);
        return rs;
    }

    public Esbticketstationtab getEsbticketstationtab(String szstationcode) {
        List list = timeSharingDao.findparams(
                "from Esbticketstationtab where szstationcode=? and byisuse=?",
                szstationcode, new Long(1));
        if (list != null && list.size() > 0) {
            Esbticketstationtab e = (Esbticketstationtab) list.get(0);
            return e;
        } else {
            return null;
        }
    }

    public List ticketreprint(Long iserialnum, Long iticketstationid) {
        String sql = " select * from (select e.szsoldticketid,e.isalesvoucherdetailsid,e.isalesvoucherid,e.iticketstationid,e.itickettypeid,szticketprintno,e.iserialnum,e.icrowdkindid,e.dtstartdate,e.dtenddate,e.iplayerperticket,ed.szcrowdkindname,edt.sztickettypename||'('||ed.szcrowdkindname||')' as sztickettypename,edt.bymaketicketway,v5.pmva as strmaketype,edt.bymediatype,v51.pmva as strmediatype,ebs.szbusinessname,e.mactualsaleprice,s.szsalesvoucherno,e.manyouno,e.myzj,c.corpname ,e.name1,e.zjno1,dy.lname as ornm,su.szinnername as szregionalname,ep.listingprice as listingprice,ef.szemployeename as szemployeename ,es.szstationname as szstationname from Stssoldtickettab e,Edpcrowdkindtab ed,Edmtickettypetab edt,Edmbusinesstab ebs,Stssalesvouchertab s left outer join custom dy on dy.usid=s.dyusid left outer join Galsourceregiontab su on su.iregionalid=s.iregionalid,Custom c,Sysparv5 v51,Sysparv5 v5,Edmcrowdkindpricetab ep,stssalesvoucherdetailstab sd,Esfemployeetab ef,Esbticketstationtab es where e.iserialnum="
                + iserialnum
                + " and e.iticketstationid="
                + iticketstationid
                + "  and e.isalesvoucherid=s.isalesvoucherid and e.iticketstationid=s.iticketstationid  and ed.icrowdkindid=e.icrowdkindid and edt.itickettypeid=e.itickettypeid and ebs.ibusinessid=e.ibusinessid and c.usid=s.usid and edt.bymaketicketway=v5.pmcd and v5.pmky='CPFS' and edt.bymediatype=v51.pmcd and v51.pmky='CKFS' and  e.isalesvoucherid=sd.isalesvoucherid and e.iticketstationid=sd.iticketstationid  and e.isalesvoucherdetailsid=sd.isalesvoucherdetailsid and  sd.icrowdkindpriceid=ep.icrowdkindpriceid  and ef.iemployeeid=s.ihandler and es.iticketstationid=s.iticketstationid  order  by e.isalesvoucherid,e.iserialnum ) tt where rownum=1";
        System.out.println(sql);
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMap(sql);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        Map map2 = list.get(0);
        String msql = "select nvl(count(*),0) as numb,s.iticketstationid as iticketstationid,esb.szstationcode as szstationcode from Stssalesvouchertab s,Esbticketstationtab esb where s.iticketstationid=esb.iticketstationid and s.bysalesvouchertype = '01' and substr(s.dtmakedate, 1, 10) = '"
                + Tools.getDays()
                + "' and s.iticketstationid="
                + map2.get("ITICKETSTATIONID").toString()
                + " and s.isalesvoucherid<="
                + map2.get("ISALESVOUCHERID").toString()
                + " group by s.iticketstationid ,esb.szstationcode ";
        StringBuffer tationcode = new StringBuffer();
        List<Map> tationList = new ArrayList();
        try {
            tationList = timeSharingDao.findBySqlToMap(msql);
        } catch (Exception e1) {
            e1.printStackTrace();
        }
        if (tationList != null && tationList.size() > 0) {
            Map map1 = tationList.get(0);
            tationcode.append(map1.get("SZSTATIONCODE").toString() + "-"
                    + map1.get("NUMB").toString());
        }
        Sysparv5 v5 = (Sysparv5) timeSharingDao.get(Sysparv5.class, new Sysparv5Id(
                "ZDCD", "01"));
        for (Map map : list) {
            Long isalesvoucherdetailsid = new Long(map.get(
                    "ISALESVOUCHERDETAILSID").toString());

            String sql1 = " select sts.iztickettypeid,sts.tripid,sts.dtbegindate as dtstartdate,sts.dtenddate as dtenddate,edt.sztickettypename,t.tripname,sds.msplitprice from Stssoldticketsubtab sts left outer join trip t on t.tripid=sts.tripid,Edmtickettypetab edt,Stscomticketsalesdetailstab sds where sts.isalesvoucherid="
                    + map.get("ISALESVOUCHERID").toString()
                    + " and sts.isalesvoucherdetailsid="
                    + map.get("ISALESVOUCHERDETAILSID").toString()
                    + " and sts.iticketstationid="
                    + map.get("ITICKETSTATIONID").toString()
                    + " and sts.szsoldticketid="
                    + map.get("SZSOLDTICKETID").toString()
                    + " and sts.iztickettypeid=edt.itickettypeid and sts.isvalid=1 and sts.isalesvoucherid=sds.isalesvoucherid and sts.iticketstationid=sds.iticketstationid and sts.isalesvoucherdetailsid=sds.isalesvoucherdetailsid  and sts.iztickettypeid=sds.iztickettypeid";
            List<Map> list1 = new ArrayList();

            try {
                list1 = timeSharingDao.findBySqlToMap(sql1);
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            String zdail = "";
            String iztickettypeid = "";
            String isvalid = "1";
            for (Map map1 : list1) {
                String szname = map1.get("SZTICKETTYPENAME").toString()
                        + map1.get("MSPLITPRICE").toString() + "元";
                try {
                    if (v5 == null) {

                        szname = map1.get("SZTICKETTYPENAME").toString()
                                + map1.get("MSPLITPRICE").toString() + "元";
                    } else {

                        int cdnumb = Integer.parseInt(v5.getPmva());
                        if (cdnumb < 1) {
                            szname = map1.get("SZTICKETTYPENAME").toString()
                                    + map1.get("MSPLITPRICE").toString() + "元";
                        } else {
                            if (map1.get("SZTICKETTYPENAME").toString()
                                    .length() > cdnumb) {
                                szname = map1.get("SZTICKETTYPENAME")
                                        .toString().substring(0, cdnumb)
                                        + map1.get("MSPLITPRICE").toString()
                                        + "元";
                            } else {
                                szname = map1.get("SZTICKETTYPENAME")
                                        .toString()
                                        + map1.get("MSPLITPRICE").toString()
                                        + "元";
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (!iztickettypeid.equals(map1.get("IZTICKETTYPEID")
                        .toString())) {
                    if (new Long(map1.get("TRIPID").toString()) > 0) {
                        String sql3 = "select  vn.venueidname,vp.szprogramname,vs.szvenueseatsname,va.ivenueareaname from seatsaletab s ,venue vn,Venueprogram vp,Venueseats vs,Venuearea va where s.isalesvoucherid="
                                + map.get("ISALESVOUCHERID").toString()
                                + " and s.iticketstationid="
                                + map.get("ITICKETSTATIONID").toString()
                                + "  and s.szsoldticketid="
                                + map.get("SZSOLDTICKETID").toString()
                                + " and isalesvoucherdetailsid="
                                + map.get("ISALESVOUCHERDETAILSID").toString()
                                + " and vn.ivenueid=s.ivenueid and s.iprogramid=vp.iprogramid and vs.ivenueid=s.ivenueid and vs.ivenueseatsid=s.iseatid and s.isvalid=1 and va.ivenueid=s.ivenueid and va.ivenueareaid=s.ivenueareaid";
                        List<Map> list3 = new ArrayList();
                        Map map3 = null;
                        try {
                            System.out.println(sql1);
                            list3 = timeSharingDao.findBySqlToMap(sql3);
                            if (list3 != null && list3.size() > 0) {
                                map3 = (Map) list3.get(0);
                                zdail = zdail
                                        + szname
                                        + "&"
                                        + map1.get("TRIPID").toString()
                                        + "&"
                                        + map1.get("TRIPNAME").toString()
                                        + "&"
                                        + map1.get("DTSTARTDATE").toString()
                                        + "&"
                                        + map1.get("DTENDDATE").toString()
                                        + "&"
                                        + map3.get("SZPROGRAMNAME").toString()
                                        + "&"
                                        + map3.get("VENUEIDNAME").toString()
                                        + "&"
                                        + map3.get("IVENUEAREANAME").toString()
                                        + map3.get("SZVENUESEATSNAME")
                                        .toString() + "@";
                            } else {
                                zdail = zdail + szname + "&"
                                        + map1.get("TRIPID").toString() + "&"
                                        + map1.get("TRIPNAME").toString() + "&"
                                        + map1.get("DTSTARTDATE").toString()
                                        + "&"
                                        + map1.get("DTENDDATE").toString()
                                        + "@";
                            }

                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                    } else {
                        zdail = zdail + map1.get("SZTICKETTYPENAME").toString()
                                + map1.get("MSPLITPRICE").toString() + "元"
                                + "&" + "0" + "&" + "" + "&"
                                + map1.get("DTSTARTDATE").toString() + "&"
                                + map1.get("DTENDDATE").toString() + "@";
                    }
                    iztickettypeid = map1.get("IZTICKETTYPEID").toString();
                }
            }
            if (!zdail.equals("")) {
                zdail = zdail.substring(0, zdail.length() - 1);
            } else {
                isvalid = "0";
            }
            map.put("ISVALID", isvalid);
            map.put("ZDAIL", zdail);
            map.put("TATIONCODE", tationcode);
            // System.out.println(map);
        }
        return list;
    }

    public Stssalesvouchertab queryStssalesvouchertab(Long isalesvoucherid,
                                                      Long iticketstationid) {
        Stssalesvouchertab s = (Stssalesvouchertab) timeSharingDao.get(
                Stssalesvouchertab.class, new StssalesvouchertabId(
                        isalesvoucherid, iticketstationid));
        return s;
    }

    public Edmcrowdkindpricetab getEdmcrowdkindpricetab(Long icrowdkindpriceid) {
        List<Map> list = timeSharingDao
                .find("select new map(ep.icrowdkindpriceid as icrowdkindpriceid,ep.mactualsaleprice as mactualsaleprice,ep.icrowdkindid as icrowdkindid,ep.ibusinessid as ibusinessid,ep.note1 as note1,ep.itickettypeid as itickettypeid,ek.szcrowdkindname as strcrowdkind,eb.szbusinessname as strbusiness,et.sztickettypename as strtickettype) from Edmcrowdkindpricetab ep,Edmtickettypetab et,Edmbusinesstab eb,Edpcrowdkindtab ek where ep.icrowdkindpriceid="
                        + icrowdkindpriceid
                        + " and  ep.itickettypeid=et.itickettypeid and ep.ibusinessid=eb.ibusinessid and ek.icrowdkindid=ep.icrowdkindid");
        Edmcrowdkindpricetab e = new Edmcrowdkindpricetab();
        try {
            BeanUtils.populate(e, (Map) list.get(0));
        } catch (IllegalAccessException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        } catch (InvocationTargetException e1) {
            // TODO Auto-generated catch block
            e1.printStackTrace();
        }
        return e;
    }

    public ResultBean savecancelt_order(String orid, Long iscenicid,
                                        Double mont, Long iemployeeid, String szsalesvoucherno,
                                        String message, Long isqt, Long forceemid,String url) throws Exception {
    	if(url==null || url.length()<1){
    		url=WebContant.GetKeyValue("CenterUrl");
    	}
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        IStockService stockService = (IStockService) SpringUtil.getBean("stockService");
        MOrder morder = (MOrder) timeSharingDao.get(MOrder.class, orid);

        Custom custom = (Custom) timeSharingDao.get(Custom.class, morder.getUsid());
        String groupno = searchJgfz(morder.getUsid(), iscenicid);
        List<StockOrderInfo> stocks = new ArrayList<StockOrderInfo>();
        String stockJson = "";
        String stockUsid = custom.getUsid();
        if(custom.getIbusinessid().longValue() == 2L && custom.getUstp().equals("02") && custom.getUsqx().startsWith("0111")){
            stockUsid = custom.getSusid();
        }else if(custom.getIbusinessid().longValue() == 3L && custom.getUstp().equals("02")){
            stockUsid = custom.getSusid();
        }
        Sysparv5 v5 = (Sysparv5) timeSharingDao.get(Sysparv5.class, new Sysparv5Id(
                "CETD", "01"));
        if (v5 != null && v5.getPmva().equals("0")) {
            // 不允许超额退订
            if (morder.getMont().doubleValue() < mont) {
                // 原金额小于退订后的总金额
                rs.addRow(new String[] { "false", "退订后总金额大于原订单金额，不允许退订" });
                return rs;
            }
        }
        if (morder.getIsjl() == 1) {
            rs.addRow(new String[] { "false", "奖励订单不允许修改订单" });
            return rs;
        } else {
            System.out.println("cancel2");
            String[] orderlists = message.split("@");
            List orderlistlist = new ArrayList();
            double smont = 0;
            double syhmont = 0;
            List zlist = new ArrayList();// 将所有数据按子产品,日期,趟次进行统计
            for (int i = 0; i < orderlists.length; i++) {

                String[] orderlist = orderlists[i].split("#");
                // orderlist[0]存放orderlist信息
                String[] ol = orderlist[0].split(",");

                TOrderlist torderlist = new TOrderlist();
                TOrderlistId tid = new TOrderlistId();
                torderlist.setItickettypeid(new Long(ol[0]));
                torderlist.setIcrowdkindpriceid(new Long(ol[1]));
                torderlist.setPric(new Double(ol[2]));
                torderlist.setNumb(new Long(ol[3]));
                torderlist.setYhnumb(new Long(0));
                torderlist.setYhamnt(new Double(0));
                torderlist.setIoffersschemeid(new Long(0));
                torderlist.setDtstartdate(ol[4]);
                torderlist.setDtenddate(ol[5]);
                torderlist.setAmnt(torderlist.getPric() * torderlist.getNumb());
                Edmcrowdkindpricetab ep = getEdmcrowdkindpricetab(torderlist
                        .getIcrowdkindpriceid());
                System.out.println("ep.getIbusinessid()"+ep.getIbusinessid());
                System.out.println("custom.getIbusinessid()"+custom.getIbusinessid());
                System.out.println("ep.getNote1()"+ep.getNote1());
                System.out.println("custom.groupno()"+custom.getIbusinessid());
                if (ep.getIbusinessid().longValue() != custom.getIbusinessid().longValue()
                        || !ep.getNote1().equals(groupno)) {
                    rs.addRow(new String[] { "false", "不能不属于 对应业务分组的价格 " });
                    return rs;
                }
                List edlist = timeSharingDao
                        .find(" from Edpofferschemetab where itickettypeid="
                                + ep.getItickettypeid() + " and ibusinessid="
                                + ep.getIbusinessid() + " and icrowdkindid="
                                + ep.getIcrowdkindid() + " and startdata<='"
                                + ol[4] + "' and enddata>='" + ol[4]
                                + "' and byisuse=1 and ioffertype=0 ");
                // 根据价格里面的业务，人群 ，产品 查询 对应的 事前人数优惠
                if (edlist != null && edlist.size() > 0) {
                    Edpofferschemetab edsc = (Edpofferschemetab) edlist.get(0);
                    if (torderlist.getNumb() >= edsc.getImultiples()) {
                        torderlist
                                .setIoffersschemeid(edsc.getIoffersschemeid());
                        torderlist.setYhnumb((torderlist.getNumb() / edsc
                                .getImultiples()) * edsc.getIoffernum());
                        torderlist.setYhamnt(torderlist.getYhnumb()
                                * torderlist.getPric());// 减免金额
                    }
                }

                List zpricelist = timeSharingDao
                        .find(" from Edmticketcomposepricetab where id.icrowdkindpriceid="
                                + torderlist.getIcrowdkindpriceid());
                torderlist.setSztickettypename(ep.getStrtickettype());
                torderlist.setIcrowdkindid(ep.getIcrowdkindid());
                smont = smont + torderlist.getAmnt() - torderlist.getYhamnt();
                syhmont = syhmont + torderlist.getYhamnt();
                String[] zls = orderlist[1].split("&");
                List zorderlistlist = new ArrayList();
                for (int j = 0; j < zls.length; j++) {

                    String[] zol = zls[j].split(",");
                    TZorderlist tzl = new TZorderlist();
                    TZorderlistId tzlid = new TZorderlistId();
                    tzl.setItickettypeid(new Long(ol[0]));
                    tzl.setIcrowdkindpriceid(new Long(ol[1]));
                    tzl.setIztickettypeid(new Long(zol[0]));
                    tzl.setIcrowdkindid(ep.getIcrowdkindid());
                    tzl.setZnumb(new Long(zol[1]));
                    for (int m = 0; m < zpricelist.size(); m++) {
                        Edmticketcomposepricetab zpr = (Edmticketcomposepricetab) zpricelist
                                .get(m);
                        if (zpr.getItickettypeid().longValue() == Long
                                .parseLong(zol[0])) {
                            tzl.setZpric(zpr.getMactualsaleprice());
                        }
                    }

                    tzl.setZamnt(tzl.getZpric() * tzl.getZnumb());
                    tzl.setZyhnumb(torderlist.getYhnumb());
                    tzl.setZyhamnt(torderlist.getYhnumb() * tzl.getZpric());
                    tzl.setTripid(new Long(zol[4]));
                    tzl.setDtstartdate(zol[2]);
                    tzl.setDtenddate(zol[3]);
                    tzl.setDtstartdate(tzl.getDtstartdate().substring(0, 10)
                            + " 00:00:00");
                    tzl.setDtenddate(tzl.getDtenddate().substring(0, 10)
                            + " 23:59:59");
                    List seatlist = new ArrayList();
                    if (zol.length > 5) {
                        tzl.setIvenueseatsid(new Long(zol[5]));
                        tzl.setIvenueid(new Long(zol[6]));
                        tzl.setIvenueareaid(new Long(zol[7]));
                        String seats = "";
                        if (zol.length > 8) {
                            seats = zol[8];
                        } else {
                            seats = "";
                        }
                        if (tzl.getIvenueseatsid() > 0) {
                            try {
                                List<Map> tlist = this.timeSharingDao
                                        .findBySqlToMap("select td.starttime,td.endtime,t.itripprdcontrolid from Tripprdcontroltab t,Tripprdcontroldetailtab td where t.iprogramid="
                                                + tzl.getIvenueseatsid()
                                                + " and t.ivenueid="
                                                + tzl.getIvenueid()
                                                + "  and  t.itripprdcontrolid=td.itripprdcontrolid and t.startdata<='"
                                                + tzl.getDtstartdate()
                                                .substring(0, 10)
                                                + "' and t.enddata>='"
                                                + tzl.getDtstartdate()
                                                .substring(0, 10)
                                                + "' and td.itripid= "
                                                + tzl.getTripid());
                                Map map = tlist.get(0);
                                tzl.setDtstartdate(tzl.getDtstartdate()
                                        .substring(0, 10)
                                        + " "
                                        + map.get("STARTTIME") + ":00");
                                tzl.setDtenddate(tzl.getDtenddate().substring(
                                        0, 10)
                                        + " " + map.get("ENDTIME") + ":59");
                                tzl.setIse(new Long(map
                                        .get("ITRIPPRDCONTROLID").toString()));
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                            String[] seatids = seats.split(">");

                            if (tzl.getZnumb().longValue() == 0) {
                                if (seats != null && !seats.equals("")) {
                                    rs.addRow(new String[] { "false",
                                            "剧院票数量与座位数不等" });
                                    return rs;
                                }
                            } else {
                                if (seatids.length != tzl.getZnumb()
                                        .longValue()) {
                                    rs.addRow(new String[] { "false",
                                            "剧院票数量与座位数不等" });
                                    return rs;
                                }

                                for (int q = 0; q < seatids.length; q++) {
                                    Seatordertab seatt = new Seatordertab();
                                    seatt.setIvenueid(tzl.getIvenueid());
                                    seatt.setIvenueareaid(tzl.getIvenueareaid());
                                    seatt.setItripprdcontrolid(tzl.getIse());
                                    seatt.setItripid(tzl.getTripid());
                                    seatt.setIseatid(new Long(seatids[q]));
                                    seatt.setIprogramid(tzl.getIvenueseatsid());
                                    seatt.setStartdate(tzl.getDtstartdate()
                                            .substring(0, 10));
                                    seatt.setIsvalid(1L);
                                    seatt.setDtmakedate(Tools.getDayTimes());
                                    seatlist.add(seatt);
                                }
                            }
                        }
                        System.out.println("场馆2");
                    } else {
                        tzl.setIvenueseatsid(new Long(zol[0]));
                        tzl.setIvenueid(new Long(zol[0]));
                        tzl.setIvenueareaid(new Long(zol[0]));
                        tzl.setIse(0L);
                    }
                    System.out.println("场馆3");
                    tzl.setSeatlist(seatlist);

                    System.out.println("场馆4");
                    boolean b = false;
                    for (int k = 0; k < zlist.size(); k++) {
                        TZorderlist tzl1 = (TZorderlist) zlist.get(k);

                        if (tzl1.getIztickettypeid().longValue() == tzl
                                .getIztickettypeid().longValue()
                                && tzl1.getDtstartdate().equals(
                                tzl.getDtstartdate())
                                && tzl1.getTripid().longValue() == tzl
                                .getTripid().longValue()
                                && tzl1.getIvenueid().longValue() == tzl
                                .getIvenueid().longValue()
                                && tzl1.getIvenueseatsid().longValue() == tzl
                                .getIvenueseatsid()
                                && tzl1.getIvenueareaid().longValue() == tzl
                                .getIvenueareaid()
                                && tzl1.getZpric().doubleValue() == tzl
                                .getZpric().doubleValue()) {
                            tzl1.setZnumb(tzl1.getZnumb() + tzl.getZnumb());
                            tzl1.setZamnt(tzl1.getZamnt() + tzl.getZamnt());
                            tzl1.setZyhnumb(tzl1.getZyhnumb()
                                    + tzl.getZyhnumb());
                            tzl1.setZyhamnt(tzl1.getZyhamnt()
                                    + tzl.getZyhamnt());
                            b = true;
                        }

                    }
                    if (!b) {
                        TZorderlist tzl1 = new TZorderlist();
                        try {
                            BeanUtils.copyProperties(tzl1, tzl);
                        } catch (IllegalAccessException e) {
                            e.printStackTrace();
                        } catch (InvocationTargetException e) {
                            e.printStackTrace();
                        }
                        zlist.add(tzl1);
                    }

                    zorderlistlist.add(tzl);
                }
                torderlist.setZorderlist(zorderlistlist);
                orderlistlist.add(torderlist);
                //组装库存信息
                StockOrderInfo stockOrderInfo = new StockOrderInfo();
                stockOrderInfo.setOrid(orid);
                stockOrderInfo.setProviderId(iscenicid);
                stockOrderInfo.setProductId(torderlist.getItickettypeid());
                stockOrderInfo.setPriceId(torderlist.getIcrowdkindpriceid());
                stockOrderInfo.setStockDate(torderlist.getDtstartdate());
                stockOrderInfo.setNumb(torderlist.getNumb());
                stockOrderInfo.setUsid(stockUsid);
                stocks.add(stockOrderInfo);
            }
            StockJson jsonObject = new StockJson();
            jsonObject.setStocks(stocks);
            stockJson = JSON.toJSONString(jsonObject);
            System.out.println("场馆5");

            // 读取原订单list信息
            List yzlist = new ArrayList();
            Long ydznum = 0L; // 网上预订成团数量
            Long zzxgnum=0L; // 预订总数量
            List yorderlistlist = timeSharingDao
                    .find("from TOrderlist t where t.id.orid='" + orid
                            + "' and t.id.iscenicid=" + iscenicid
                            + " order by orderlistid");
            for (int x = 0; x < orderlists.length; x++) {
                String[] orderlist = orderlists[x].split("#");
                // orderlist[0]存放orderlist信息
                String[] ol = orderlist[0].split(",");
                Long ticketid = new Long(ol[0].toString());
                Long crowdkindid = new Long(ol[1].toString());
                Long numb = new Long(ol[3].toString());

                Edmcrowdkindpricetab crowprice = (Edmcrowdkindpricetab) this.timeSharingDao
                        .get(Edmcrowdkindpricetab.class, crowdkindid);
                if (crowprice != null && crowprice.getInote3() != null
                        && crowprice.getInote3() == 1) {
                    ydznum += numb;
                }
                zzxgnum+=numb;
            }

            List list = timeSharingDao.find("from Esbprovicerq where ibusinessid="
                    + custom.getIbusinessid() + " and  iscenicid=" + iscenicid);

            Hotelprovider h = (Hotelprovider) this.timeSharingDao.get(
                    Hotelprovider.class, iscenicid);
            if (list != null && list.size() > 0) {
                Esbprovicerq esbprovicerq = (Esbprovicerq) list.get(0);
                if (esbprovicerq.getInt1() != null
                        && esbprovicerq.getInt1() > 0) {
                    Long kznum = esbprovicerq.getInt1();
                    if (ydznum < kznum) {
                        rs.addRow(new String[] { "false",
                                "您购买的票产品总数量要大于等于" + kznum });
                        return rs;
                    }
                }
            } else {
                if (h != null && h.getInoteger10() != null
                        && h.getInoteger10() > 0) {
                    Long kznum = h.getInoteger10();
                    if (ydznum < kznum) {
                        rs.addRow(new String[] { "false",
                                "您购买的票产品总数量要大于等于" + kznum });
                        return rs;
                    }
                }
            }
            Sysparv5 sysp = getSysparv5("COMM", "0006");
            if(sysp == null){
                sysp = new Sysparv5();
                sysp.setIsvalue(1L);
            }
            //判断库存数量
            if(WebContant.GetKeyValue("IsCenterUrl").equals("1") && sysp.getIsvalue() == 1L){
                try{/*
                    javax.xml.rpc.Service service = null;
                    java.net.URL endpointURL = new java.net.URL("http://"
                            + url
                            + "/services/centersaleService?wsdl");
                    CentersaleServiceSoapBindingStub ssl = new CentersaleServiceSoapBindingStub(
                            endpointURL, service);
                    ssl.setMaintainSession(true);
                    com.ectrip.ticket.centersale.client.ResultBean cano = ssl.saveStock(stockJson,"true");
                    if(cano.getResult(0,0).equals("false")){
                        rs.addRow(new String[] { "false",
                                cano.getResult(0,1) });
                        return rs;
                    }
                */}catch (Exception e){
                    try{
                        stockService.saveStockDetails(stocks,true);
                    }catch (Exception e1){
                        rs.addRow(new String[] { "false",e1.getMessage() });
                        return rs;
                    }
                }
            }else{
                try{
                    stockService.saveStockDetails(stocks,true);
                }catch (Exception e){
                    rs.addRow(new String[] { "false",e.getMessage() });
                    return rs;
                }
            }

            Long ysddnum = 0L; // 原始订单数量
            Double ysddmoney = 0D; // 原始总金额

            for (int i = 0; i < yorderlistlist.size(); i++) {
                TOrderlist torderlist = (TOrderlist) yorderlistlist.get(i);

                ysddnum = ysddnum + torderlist.getNumb();
                ysddmoney = ysddmoney + torderlist.getAmnt()
                        - torderlist.getYhamnt();

                List yzorderlistlist = timeSharingDao
                        .find("from TZorderlist t where t.id.orid='" + orid
                                + "' and t.id.iscenicid=" + iscenicid
                                + " and t.id.orderlistid="
                                + torderlist.getId().getOrderlistid());
                torderlist.setZorderlist(yzorderlistlist);

                for (int j = 0; j < yzorderlistlist.size(); j++) {
                    TZorderlist tz = (TZorderlist) yzorderlistlist.get(j);
                    if (tz.getIvenueseatsid() > 0) {
                        List seatlist = timeSharingDao
                                .find(" from Seatordertab where id.orid='"
                                        + tz.getId().getOrid()
                                        + "' and id.iscenicid="
                                        + tz.getId().getIscenicid()
                                        + " and id.orderlistid="
                                        + tz.getId().getOrderlistid()
                                        + " and id.zorderlistid="
                                        + tz.getId().getZorderlistid());
                        tz.setSeatlist(seatlist);
                    }
                    boolean b = false;
                    for (int k = 0; k < yzlist.size(); k++) {
                        TZorderlist tz1 = (TZorderlist) yzlist.get(k);
                        // 读取座位list

                        if (tz1.getIztickettypeid().longValue() == tz
                                .getIztickettypeid()
                                && tz1.getDtstartdate().equals(
                                tz.getDtstartdate())
                                && tz1.getTripid().longValue() == tz
                                .getTripid().longValue()
                                && tz1.getIvenueid().longValue() == tz
                                .getIvenueid().longValue()
                                && tz1.getIvenueseatsid().longValue() == tz
                                .getIvenueseatsid()
                                && tz1.getIvenueareaid().longValue() == tz
                                .getIvenueareaid().longValue()
                                && tz1.getZpric().doubleValue() == tz
                                .getZpric().doubleValue()) {
                            b = true;
                            tz1.setZnumb(tz1.getZnumb() + tz.getZnumb());
                            tz1.setZamnt(tz1.getZamnt() + tz.getZamnt());
                            tz1.setZyhnumb(tz1.getZyhnumb() + tz.getZyhnumb());
                            tz1.setZyhamnt(tz1.getZyhamnt() + tz.getZyhamnt());
                        }
                    }
                    if (!b) {

                        TZorderlist tzl1 = new TZorderlist();
                        try {
                            BeanUtils.copyProperties(tzl1, tz);
                        } catch (IllegalAccessException e) {
                            rs.addRow(new String[] { "false", "退订失败" });
                            return rs;
                        } catch (InvocationTargetException e) {
                            rs.addRow(new String[] { "false", "退订失败" });
                            return rs;
                        }

                        yzlist.add(tzl1);
                    }
                }

            }
            System.out.println("cancel9:");
            // 比较新订单子票数量与原订单数量,计算出退票和增票
            for (int i = 0; i < yzlist.size(); i++) {
                TZorderlist tz = (TZorderlist) yzlist.get(i);
                for (int j = 0; j < zlist.size(); j++) {
                    TZorderlist tz1 = (TZorderlist) zlist.get(j);
                    if (tz1.getIztickettypeid().longValue() == tz
                            .getIztickettypeid()
                            && tz1.getDtstartdate().equals(tz.getDtstartdate())
                            && tz1.getTripid().longValue() == tz.getTripid()
                            .longValue()
                            && tz1.getIvenueid().longValue() == tz
                            .getIvenueid().longValue()
                            && tz1.getIvenueseatsid().longValue() == tz
                            .getIvenueseatsid()
                            && tz1.getIvenueareaid().longValue() == tz
                            .getIvenueareaid().longValue()
                            && tz1.getZpric().doubleValue() == tz.getZpric()
                            .doubleValue()) {

                        tz.setZnumb(tz.getZnumb() - tz1.getZnumb());
                        tz.setZamnt(tz.getZamnt() - tz1.getZamnt());
                        tz.setZyhnumb(tz.getZyhnumb() - tz1.getZyhnumb());
                        tz.setZyhamnt(tz.getZyhamnt() - tz1.getZyhamnt());

                    }
                }
            }
            System.out.println("cancel10:");
            // 将新的子票存在,老的子票中没有的数据找出
            List alist = new ArrayList();
            for (int i = 0; i < zlist.size(); i++) {
                TZorderlist tz = (TZorderlist) zlist.get(i);
                boolean b = true;
                for (int j = 0; j < yzlist.size(); j++) {
                    TZorderlist tz1 = (TZorderlist) yzlist.get(j);
                    if (tz1.getIztickettypeid().longValue() == tz
                            .getIztickettypeid()
                            && tz1.getDtstartdate().equals(tz.getDtstartdate())
                            && tz1.getTripid().longValue() == tz.getTripid()
                            .longValue()
                            && tz1.getIvenueid().longValue() == tz
                            .getIvenueid().longValue()
                            && tz1.getIvenueseatsid().longValue() == tz
                            .getIvenueseatsid()
                            && tz1.getIvenueareaid().longValue() == tz
                            .getIvenueareaid().longValue()
                            && tz1.getZpric().doubleValue() == tz.getZpric()
                            .doubleValue()) {
                        b = false;
                    }
                }
                if (b) {
                    alist.add(tz);
                }
            }
            System.out.println("cancel11:");
            // 将新的子票作为增票加入到yzlist
            for (int i = 0; i < alist.size(); i++) {
                TZorderlist tz = (TZorderlist) alist.get(i);
                tz.setZnumb(tz.getZnumb() * -1);
                tz.setZamnt(tz.getZamnt() * -1);
                yzlist.add(tz);
            }
            // 根据子票计算退订手续费及费率
            List plist = new ArrayList();// 竹筏数量更新记录
            String nowtime = Tools.getDayTimes();
            double smhandcharge = 0;

            for (int i = 0; i < yzlist.size(); i++) {

                TZorderlist tz1 = (TZorderlist) yzlist.get(i);
                // 小于0 计算竹筏趟次的可售量

                if (tz1.getZnumb().longValue() < 0) {
                    if (tz1.getTripid() > 0 && tz1.getIvenueseatsid() == 0) {
                        // 根据plist里面的数据找出对应竹排趟次是否停排

                        List triplist = timeSharingDao
                                .find(" from Productcontrol where itickettypeid="
                                        + tz1.getIztickettypeid()
                                        + " and tripid="
                                        + tz1.getTripid()
                                        + " and stdata='"
                                        + tz1.getDtstartdate().substring(0, 10)
                                        + "'");
                        Productcontrol p = (Productcontrol) triplist.get(0);
                        if (p.getBystate().longValue() != 1) {
                            rs.addRow(new String[] { "false", "新增竹筏趟次已停排,不能销售" });
                            return rs;
                        } else {
                            if (p.getSalablenumber() - p.getSoldnumber() < (tz1
                                    .getZnumb() * -1)) {

                                rs.addRow(new String[] { "false",
                                        "新增竹筏趟次可售数量剩余数量小于销售数量" });
                                return rs;
                            } else {

                                p.setSoldednumber(tz1.getZnumb().longValue());
                                plist.add(p);

                            }
                        }
                    }
                } else if (tz1.getIvenueseatsid() > 0) {
                    List<Map> tlist = this.timeSharingDao
                            .findBySqlToMap("select td.starttime,td.endtime,t.itripprdcontrolid from Tripprdcontroltab t,Tripprdcontroldetailtab td where t.iprogramid="
                                    + tz1.getIvenueseatsid()
                                    + " and t.ivenueid="
                                    + tz1.getIvenueid()
                                    + "  and  t.itripprdcontrolid=td.itripprdcontrolid and t.startdata<='"
                                    + tz1.getDtstartdate().substring(0, 10)
                                    + "' and t.enddata>='"
                                    + tz1.getDtstartdate().substring(0, 10)
                                    + "' and td.itripid= "
                                    + tz1.getTripid()
                                    + " and  t.byisuse=1 and td.byisuse=1");
                    if (tlist == null || tlist.size() == 0) {
                        rs.addRow(new String[] { "false", "节目场次已取消不能添加" });
                        return rs;
                    }
                }
                System.out.println("cancel122:");
                // 大于0为退订数据
                if ((tz1.getZnumb().longValue() - tz1.getZyhnumb().longValue()) > 0) {
                    boolean shouxu = true;
                    long bystats = 1;
                    if (tz1.getTripid() > 0 && tz1.getIvenueseatsid() == 0) {
                        // 根据plist里面的数据找出对应竹排趟次是否停排
                        List triplist = timeSharingDao
                                .find(" from Productcontrol where itickettypeid="
                                        + tz1.getIztickettypeid()
                                        + " and tripid="
                                        + tz1.getTripid()
                                        + " and stdata='"
                                        + tz1.getDtstartdate().substring(0, 10)
                                        + "'");
                        Productcontrol p = (Productcontrol) triplist.get(0);
                        p.setSoldednumber(tz1.getZnumb().longValue());
                        plist.add(p);

                        bystats = p.getBystate();
                    } else if (tz1.getIvenueseatsid() > 0) {
                        List<Map> tlist = this.timeSharingDao
                                .findBySqlToMap("select td.starttime,td.endtime,t.itripprdcontrolid from Tripprdcontroltab t,Tripprdcontroldetailtab td where t.iprogramid="
                                        + tz1.getIvenueseatsid()
                                        + " and t.ivenueid="
                                        + tz1.getIvenueid()
                                        + "  and  t.itripprdcontrolid=td.itripprdcontrolid and t.startdata<='"
                                        + tz1.getDtstartdate().substring(0, 10)
                                        + "' and t.enddata>='"
                                        + tz1.getDtstartdate().substring(0, 10)
                                        + "' and td.itripid= "
                                        + tz1.getTripid()
                                        + " and  t.byisuse=1 and td.byisuse=1");
                        System.out.println("场馆7");
                        if (tlist == null || tlist.size() == 0) {
                            bystats = 0;
                        }
                    }
                    System.out.println("场馆8");
                    if (bystats == 1) {

                        List tdlist = timeSharingDao
                                .find(" from Ticketxgz where itickettypeid="
                                        + tz1.getIztickettypeid()
                                        + " and xyjs4=0 and isvalid=1");

                        if (tdlist.size() == 0) {
                            tz1.setTdfl(new Double(0));
                        } else {
                            Ticketxgz tcx = (Ticketxgz) tdlist.get(0);

                            if (tcx.getJsfs().equals("0001")) {
                                // 按小时计算
                                long hours = 0;
                                DateFormat df = new SimpleDateFormat(
                                        "yyyy-MM-dd HH:mm:ss");
                                String bztime = tz1.getDtenddate();
                                try {
                                    Date d1 = df.parse(nowtime);
                                    Date d2 = df.parse(bztime);
                                    long diff = d2.getTime() - d1.getTime();
                                    hours = diff / (1000 * 60 * 60);
                                } catch (ParseException e1) {
                                    e1.printStackTrace();
                                }

                                if (hours < 0) {
                                    if (WebContant.GetKeyValue("gqtd").equals(
                                            "0")) {
                                        rs.addRow(new String[] { "false",
                                                "过期票不允许出票前出票口退订" });
                                        return rs;
                                    } else {
                                        if (WebContant.GetKeyValue("gqtd")
                                                .equals("1")) {
                                            if (isqt == null
                                                    || isqt.longValue() == 0) {
                                                rs.addRow(new String[] {
                                                        "false1",
                                                        "过期票出票口退订,需授权" });
                                                return rs;
                                            }
                                        } else {
                                            tz1.setTdfl(tcx.getXyrate2());
                                        }
                                    }
                                } else {
                                    List fllist = timeSharingDao
                                            .find("from Changebackrate where gzid="
                                                    + tcx.getGzid()
                                                    + " and time>"
                                                    + hours
                                                    + " order by time");
                                    if (fllist == null || fllist.size() == 0) {
                                        tz1.setTdfl(new Double(0));
                                    } else {

                                        Changebackrate grate = (Changebackrate) fllist
                                                .get(0);
                                        // 将退订费率保存
                                        tz1.setTdfl(grate.getTdfl());
                                    }
                                }
                            } else if (tcx.getJsfs().equals("0002")) {
                                // 按天计算退订费率
                                long days = 0;
                                DateFormat df = new SimpleDateFormat(
                                        "yyyy-MM-dd HH:mm:ss");
                                String bztime = tz1.getDtenddate();
                                try {
                                    Date d1 = df.parse(nowtime);
                                    Date d2 = df.parse(bztime);
                                    long diff = d2.getTime() - d1.getTime();
                                    days = diff / (1000 * 60 * 60 * 24);
                                } catch (ParseException e1) {
                                    e1.printStackTrace();
                                }
                                if (days < 0) {
                                    // 将退订费率保存
                                    if (WebContant.GetKeyValue("gqtd").equals(
                                            "0")) {

                                        rs.addRow(new String[] { "false",
                                                "过期票不允许出票口退订" });

                                        return rs;
                                    } else {
                                        if (WebContant.GetKeyValue("gqtd")
                                                .equals("1")) {
                                            if (isqt == null
                                                    || isqt.longValue() == 0) {
                                                rs.addRow(new String[] {
                                                        "false1",
                                                        "过期票出票口退订,需授权" });
                                                return rs;
                                            }
                                        } else {
                                            tz1.setTdfl(tcx.getXyrate2());
                                        }
                                    }
                                } else {
                                    List fllist = timeSharingDao
                                            .find("from Changebackrate where gzid="
                                                    + tcx.getGzid()
                                                    + " and time>"
                                                    + days
                                                    + " order by time");
                                    if (fllist == null || fllist.size() == 0) {
                                        tz1.setTdfl(new Double(0));
                                    } else {
                                        Changebackrate grate = (Changebackrate) fllist
                                                .get(0);
                                        // 将退订费率保存
                                        tz1.setTdfl(grate.getTdfl());
                                    }
                                }
                            } else if (tcx.getJsfs().equals("0003")) {
                                // 常年
                                long days = 0;
                                DateFormat df = new SimpleDateFormat(
                                        "yyyy-MM-dd HH:mm:ss");
                                String bztime = tz1.getDtenddate();
                                try {
                                    Date d1 = df.parse(nowtime);
                                    Date d2 = df.parse(bztime);
                                    long diff = d2.getTime() - d1.getTime();
                                    days = diff / (1000 * 60 * 60 * 24);
                                } catch (ParseException e1) {
                                    e1.printStackTrace();
                                }
                                if (days < 0) {
                                    if (WebContant.GetKeyValue("gqtd").equals(
                                            "0")) {
                                        rs.addRow(new String[] { "false",
                                                "过期票不允许出票口退订" });
                                        return rs;
                                    } else {
                                        if (WebContant.GetKeyValue("gqtd")
                                                .equals("1")) {
                                            if (isqt == null
                                                    || isqt.longValue() == 0) {
                                                rs.addRow(new String[] {
                                                        "false1",
                                                        "过期票出票口退订,需授权" });
                                                return rs;
                                            }
                                        } else {
                                            tz1.setTdfl(tcx.getXyrate2());
                                        }

                                    }
                                } else {
                                    List fllist = timeSharingDao
                                            .find("from Changebackrate where gzid="
                                                    + tcx.getGzid());
                                    if (fllist != null && fllist.size() > 0) {
                                        Changebackrate grate = (Changebackrate) fllist
                                                .get(0);
                                        // 将退订费率保存
                                        // System.out.println("grate.getTdfl()="
                                        // +
                                        // grate.getTdfl());
                                        tz1.setTdfl(grate.getTdfl());
                                        // System.out.println("days=" + days);
                                    } else {
                                        tz1.setTdfl(new Double(0));
                                    }
                                }
                            } else {
                                tz1.setTdfl(new Double(0));
                            }
                        }
                    } else {

                        tz1.setTdfl(new Double(0));
                    }

                    if (tz1.getTdfl().doubleValue() == 0) {

                        tz1.setSqnumber(new Long(0));
                        tz1.setMhandcharge(new Double(0));
                    } else {

                        tz1.setTdfl(tz1.getTdfl());
                        tz1.setSqnumber(tz1.getZnumb() - tz1.getZyhnumb());

                        tz1.setMhandcharge(tz1.getTdfl()
                                * (tz1.getZamnt() - tz1.getZyhamnt()));

                        smhandcharge = smhandcharge + tz1.getMhandcharge();
                    }
                }

            }

            TOrder t = (TOrder) timeSharingDao.get(TOrder.class, new TOrderId(orid,
                    iscenicid));

            // 判断服务商优惠
            String edpsql = " from Edpofferschemetab where iscenicid="
                    + iscenicid + " and ibusinessid=" + t.getIbusinessid()
                    + " and startdata<='" + t.getDtstartdate()
                    + "' and enddata>='" + t.getDtstartdate()
                    + "' and byisuse=1 and ioffertype=1 ";
            List offerslist = this.timeSharingDao.find(edpsql);
            if (offerslist != null && offerslist.size() > 0) {
                Edpofferschemetab pscheme = (Edpofferschemetab) offerslist
                        .get(0);
                // 优惠的数量
                Long yhnum = (zzxgnum / pscheme.getImultiples())
                        * pscheme.getIoffernum();
                double yhmoney = 0;
                if (yhnum > 0) {

                    List yhpxList=new ArrayList();
                    for(int n = 0; n < orderlistlist.size(); n++){
                        TOrderlist tbss = (TOrderlist) orderlistlist.get(n);
                        yhpxList.add(tbss);
                    }

                    String yhlx = "0";// 获取优惠方式 0 -最高价 1-最低价
                    Hotelprovider hotel = (Hotelprovider) this.timeSharingDao.get(
                            Hotelprovider.class, iscenicid);
                    if (hotel != null && hotel.getInoteger8() != null) {
                        yhlx = hotel.getInoteger8().toString();
                    }

                    // 最高价优惠 排序
                    if (yhlx.equals("0")) {
                        Collections.sort(yhpxList,
                                new Comparator<TOrderlist>() {
                                    public int compare(TOrderlist o1,
                                                       TOrderlist o2) {
                                        double price1 = o1.getPric();
                                        double price2 = o2.getPric();
                                        if (price2 > price1) {
                                            return 1;
                                        } else if (price2 == price1) {
                                            return 0;
                                        } else {
                                            return -1;
                                        }
                                    }
                                });
                    }
                    // 最低价优惠 排序
                    if (yhlx.equals("1")) {
                        Collections.sort(yhpxList,
                                new Comparator<TOrderlist>() {
                                    public int compare(TOrderlist o1,
                                                       TOrderlist o2) {
                                        double price1 = o1.getPric();
                                        double price2 = o2.getPric();
                                        if (price1 > price2) {
                                            return 1;
                                        } else if (price1 == price2) {
                                            return 0;
                                        } else {
                                            return -1;
                                        }
                                    }
                                });
                    }

                    for (int j = 0; j < yhpxList.size(); j++) {
                        TOrderlist ts = (TOrderlist) yhpxList.get(j);
                        if (yhnum > 0) {
                            if(ts.getNumb()>0){
                                if (yhnum > ts.getNumb()) {
                                    ts.setYhamnt(ts.getNumb() * ts.getPric());
                                    ts.setYhnumb(ts.getNumb());

                                    yhmoney += ts.getNumb() * ts.getPric();
                                    yhnum -= ts.getNumb();

                                } else {
                                    ts.setYhamnt(yhnum * ts.getPric());
                                    ts.setYhnumb(yhnum);

                                    yhmoney += yhnum * ts.getPric();
                                    yhnum = 0L;

                                }
                            }

                        }
                    }
                    smont = smont + syhmont - yhmoney; // 修改后实际总金额（减去优惠金额）

                    syhmont = yhmoney;

                    for (int m = 0; m < yhpxList.size(); m++) {
                        TOrderlist tbs = (TOrderlist) yhpxList.get(m);

                        if(tbs.getYhnumb()>0){
                            for(int n = 0; n < orderlistlist.size(); n++){
                                TOrderlist tbss = (TOrderlist) orderlistlist.get(n);

                                if(tbs.getItickettypeid().longValue()==tbss.getItickettypeid().longValue()&&tbs.getIcrowdkindpriceid().longValue()==tbss.getIcrowdkindpriceid().longValue()){
                                    tbss.setYhamnt(tbs.getYhamnt());
                                    tbss.setYhnumb(tbs.getYhnumb());
                                }

                            }
                        }

                    }

                }

            }

            // 判断服务商退票规则
            String tphsql = " from Esbrefundrules rs where rs.iscenicid="
                    + iscenicid + "  and rs.ibusinessid="
                    + custom.getIbusinessid();
            List tplist = this.timeSharingDao.find(tphsql);
            if (tplist != null && tplist.size() > 0) {
                Esbrefundrules refund = (Esbrefundrules) tplist.get(0);

                if (refund != null && refund.getTptype().equals("1")) {// 根据金额
                    Double moneyjc = ysddmoney - smont; // 金额差=原始订单金额-修改后订单金额
                    if (moneyjc > 0) {
                        // 金额差除以原始订单金额为退票率 跟规则中的退票条件费率作对比 如果大于规则中的费率
                        // 那么要收手续费=退票金额*退票手续费
                        Double tptj = Double.parseDouble(String.format("%.2f",
                                moneyjc / ysddmoney));
                        if (tptj > refund.getTptj()) {
                            Double sxf = Math.rint(moneyjc * refund.getTdfl());// 手续费

                            smhandcharge = smhandcharge + sxf;
                        }
                    }

                } else { // 根据数量来判断是否需要手续费
                    Long numjc = ysddnum - zzxgnum; // 数量差=原始订单数量-修改后订单数量
                    if (numjc > 0) {
                        // 数量差除以原始订单数量为退票率 跟规则中的退票条件费率作对比 如果大于规则中的费率
                        // 那么要收手续费=退票金额*退票手续费
                        Double tptj = Double.parseDouble(String.format("%.2f",
                                numjc.doubleValue() / ysddnum.doubleValue()));
                        if (tptj > refund.getTptj()) {
                            Double moneyjc = ysddmoney - smont; // 金额差=原始订单金额-修改后订单金额
                            Double sxf = Math.rint(moneyjc * refund.getTdfl());// 手续费

                            smhandcharge = smhandcharge + sxf;
                        }
                    }
                }
            }

            System.out.println("场馆8");

            t.setYhamnt(syhmont);
            // 退订退款金额
            if (t.getDdzt().equals("11")) {
                rs.addRow(new String[] { "false", "订单状态已出票状态不允许修改" });
                return rs;

            }
            if (t.getIsjfjf() != null && t.getIsjfjf() == 1) {

                throw new RuntimeException("积分订单不允许修改");
            }

            String zfusid = morder.getZfusid();

            // 计算退订明细,将yorderlist作为基础,变化为退订明细
            System.out.println("场馆9");
            for (int i = 0; i < yorderlistlist.size(); i++) {
                TOrderlist yt = (TOrderlist) yorderlistlist.get(i);
                TOrderlist nt = (TOrderlist) orderlistlist.get(i);
                yt.setNumb(yt.getNumb() - nt.getNumb());
                yt.setYhnumb(yt.getYhnumb() - nt.getYhnumb());
                yt.setYhamnt(yt.getYhamnt() - nt.getYhamnt());
                yt.setAmnt(yt.getAmnt() - nt.getAmnt());
                yt.setMhandcharge(new Double(0));
                yt.setIoffersschemeid(nt.getIoffersschemeid());
                List yzorderlistlist = yt.getZorderlist();
                List tzorderlistlist = nt.getZorderlist();
                if ((yt.getNumb() - yt.getYhnumb()) > 0) {

                    for (int j = 0; j < yzorderlistlist.size(); j++) {

                        TZorderlist zt = (TZorderlist) yzorderlistlist.get(j);
                        for (int k = 0; k < yzlist.size(); k++) {

                            TZorderlist yzt = (TZorderlist) yzlist.get(k);
                            if (zt.getIztickettypeid().longValue() == yzt
                                    .getIztickettypeid()
                                    && zt.getDtstartdate().equals(
                                    yzt.getDtstartdate())
                                    && zt.getTripid().longValue() == yzt
                                    .getTripid().longValue()
                                    && zt.getZpric().doubleValue() == yzt
                                    .getZpric().doubleValue()) {

                                if (yzt.getTdfl().doubleValue() > 0) {
                                    if ((zt.getZnumb().longValue() - zt
                                            .getZyhnumb().longValue())
                                            - yzt.getSqnumber().longValue() >= 0) {
                                        zt.setTdfl(yzt.getTdfl());
                                        zt.setSqnumber(yzt.getSqnumber());
                                        zt.setMhandcharge(yzt.getMhandcharge());
                                        yt.setMhandcharge(yt.getMhandcharge()
                                                + zt.getMhandcharge());
                                        yzt.setSqnumber(new Long(0));
                                        yzt.setMhandcharge(new Double(0));
                                    } else {
                                        zt.setTdfl(yzt.getTdfl());
                                        zt.setSqnumber(zt.getZnumb()
                                                - zt.getZyhnumb());
                                        zt.setMhandcharge((zt.getZamnt() - zt
                                                .getZyhamnt()) * zt.getTdfl());
                                        yt.setMhandcharge(yt.getMhandcharge()
                                                + zt.getMhandcharge());
                                        yzt.setSqnumber(yzt.getSqnumber()
                                                - (zt.getZnumb() - zt
                                                .getZyhnumb()));
                                        yzt.setMhandcharge(yzt.getMhandcharge()
                                                - (zt.getZamnt() - zt
                                                .getZyhamnt())
                                                * zt.getTdfl());
                                    }
                                } else {
                                    zt.setTdfl(0D);
                                    zt.setSqnumber(0L);
                                    zt.setMhandcharge(0D);
                                    yt.setMhandcharge(0D);
                                    yzt.setSqnumber(0L);
                                    yzt.setMhandcharge(0D);
                                }

                            }
                        }
                    }
                }

                // 查看座位变化
                System.out.println("场馆10");
                for (int j = 0; j < yzorderlistlist.size(); j++) {
                    TZorderlist zt = (TZorderlist) yzorderlistlist.get(j);
                    List newseatlist = new ArrayList();
                    System.out.println("zt.getIvenueseatsid()="
                            + zt.getIvenueseatsid());
                    if (zt.getIvenueseatsid() > 0) {
                        List zseatlist = zt.getSeatlist();
                        System.out.println("zseatlist=" + zseatlist.size());
                        for (int k = 0; k < tzorderlistlist.size(); k++) {
                            TZorderlist znt = (TZorderlist) tzorderlistlist
                                    .get(k);
                            System.out
                                    .println("znt.getIztickettypeid().longValue()="
                                            + znt.getIztickettypeid()
                                            .longValue());
                            if (znt.getIztickettypeid().longValue() == zt
                                    .getIztickettypeid().longValue()) {
                                List znseatlist = znt.getSeatlist();
                                System.out.println("znseatlist="
                                        + znseatlist.size());
                                for (int a = 0; a < zseatlist.size(); a++) {
                                    Seatordertab s = (Seatordertab) zseatlist
                                            .get(a);
                                    boolean flag = true;
                                    for (int b = 0; b < znseatlist.size(); b++) {
                                        Seatordertab ns = (Seatordertab) znseatlist
                                                .get(b);
                                        if (ns.getIseatid().longValue() == s
                                                .getIseatid()) {
                                            flag = false;
                                        }
                                    }
                                    if (flag) {
                                        newseatlist.add(s);
                                    }
                                }
                                System.out.println("aaaaaaaaaaaaaaaa");
                                for (int a = 0; a < znseatlist.size(); a++) {
                                    Seatordertab s = (Seatordertab) znseatlist
                                            .get(a);
                                    boolean flag = true;
                                    for (int b = 0; b < zseatlist.size(); b++) {
                                        Seatordertab ns = (Seatordertab) zseatlist
                                                .get(b);
                                        if (ns.getIseatid().longValue() == s
                                                .getIseatid()) {
                                            flag = false;
                                        }
                                    }
                                    if (flag) {
                                        s.setIsvalid(-1L);
                                        newseatlist.add(s);
                                    }
                                }
                                System.out.println("newseatlistsize="
                                        + newseatlist.size());
                                System.out.println("bbbbbbbbbbbbbbbbbb");
                            }
                        }

                    }
                    zt.setSeatlist(newseatlist);
                }
            }
            System.out.println("场馆11");
            for (int i = yorderlistlist.size(); i < orderlistlist.size(); i++) {
                // 新orderlist里面的大于yorderlistlist.size()的数据为增加的数据

                TOrderlist nt = (TOrderlist) orderlistlist.get(i);
                TOrderlist yt = new TOrderlist();
                try {

                    BeanUtils.copyProperties(yt, nt);

                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (InvocationTargetException e) {
                    e.printStackTrace();
                }
                yt.setNumb(-1 * yt.getNumb());

                yt.setAmnt(-1 * yt.getAmnt());
                yt.setYhnumb(-1 * yt.getYhnumb());
                yt.setYhamnt(-1 * yt.getYhamnt());
                yt.setMhandcharge(new Double(0));
                List yzorderlistlist = nt.getZorderlist();
                List zlllist = new ArrayList();
                for (int j = 0; j < yzorderlistlist.size(); j++) {
                    TZorderlist nzt = (TZorderlist) yzorderlistlist.get(j);
                    TZorderlist yzt = new TZorderlist();
                    try {
                        BeanUtils.copyProperties(yzt, nzt);
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    } catch (InvocationTargetException e) {
                        e.printStackTrace();
                    }
                    yzt.setZnumb(-1 * yzt.getZnumb());
                    yzt.setZamnt(-1 * yzt.getZamnt());
                    yzt.setMhandcharge(new Double(0));
                    yzt.setTdfl(new Double(0));
                    yzt.setZyhnumb(-1 * yzt.getZyhnumb());
                    yzt.setZyhamnt(-1 * yzt.getZyhamnt());
                    yzt.setSqnumber(new Long(0));
                    List seatlist = nzt.getSeatlist();
                    if (seatlist != null && seatlist.size() > 0) {
                        for (int a = 0; a < seatlist.size(); a++) {
                            Seatordertab s = (Seatordertab) seatlist.get(a);
                            s.setIsvalid(-1L);

                        }
                        yzt.setSeatlist(seatlist);
                    }

                    zlllist.add(yzt);
                }
                yt.setZorderlist(zlllist);
                yorderlistlist.add(yt);
            }
            System.out.println("场馆12");
            double tkmont = t.getZfmont() - smont - smhandcharge;
            for (int i = 0; i < plist.size(); i++) {
                Productcontrol p = (Productcontrol) plist.get(i);
                Productcontrol p1 = (Productcontrol) timeSharingDao.get(
                        Productcontrol.class, p.getProductcontrolid());
                p1.setSoldnumber(p1.getSoldnumber() - p.getSoldednumber());
                timeSharingDao.update(p1);
            }
            // 2014-02-26 lijingrui修改 网上订单修改 是现场支付订单修改不需要判断预付款
            if (morder != null && morder.getDdzt().equals("02")) {

                // 2、添加退订单
                // 读取新订单号

                System.out.println("场馆13");
                MOrder m = new MOrder();
                m.setOrid(szsalesvoucherno);
                m.setOrda(nowtime.substring(0, 10));
                m.setOrti(nowtime.substring(10));
                m.setOrtp("02");
                m.setDdzt("06");
                m.setUsid(morder.getUsid());
                m.setZfusid(morder.getZfusid());
                m.setMont(MathUtil.subtract(t.getZfmont(),smont));
                m.setZfmont(MathUtil.subtract(t.getZfmont(),smont));
                m.setTpsx(smhandcharge);
                m.setTpmont(tkmont + smhandcharge);
                m.setTpdate(nowtime);
                m.setIsjl(new Long(0));
                m.setIsallcp(new Long(0));
                m.setTpfs("02");
                m.setSrid(morder.getOrid());
                m.setStdt(morder.getStdt());
                m.setIsc(iemployeeid);
                m.setNotef("01");
                m.setIse(forceemid);
                m.setZffs("00");
                timeSharingDao.save(m);

                Long cnumb = new Long(0);
                YOrder y = new YOrder();
                YOrderId yid = new YOrderId();
                yid.setOrid(szsalesvoucherno);
                yid.setIscenicid(iscenicid);
                y.setId(yid);
                y.setScenictype("01");
                y.setDdzt("06");
                y.setFempid(forceemid.toString());
                y.setUsid(morder.getUsid());
                y.setIbusinessid(t.getIbusinessid());
                y.setDtstartdate(t.getDtstartdate());
                y.setDtenddate(t.getDtenddate());
                y.setMont(t.getZfmont() - smont);
                y.setZfmont(t.getZfmont() - smont);
                y.setTpsx(smhandcharge);
                y.setTpmont(tkmont + smhandcharge);
                y.setOrnm(t.getOrnm());
                y.setOrzj(t.getOrzj());
                y.setOrhm(t.getOrhm());
                y.setDyusid(t.getDyusid());
                y.setTpdate(nowtime);
                y.setTpfs("02");
                y.setNotef("01");
                y.setIsc(iemployeeid);
                y.setIse(forceemid);// 授权用户ID
                timeSharingDao.save(y);
                System.out.println("场馆14");
                for (int i = 0; i < yorderlistlist.size(); i++) {
                    TOrderlist tl = (TOrderlist) yorderlistlist.get(i);
                    boolean istd = false;
                    if (tl.getNumb().longValue() == 0) {
                        List ztllist = tl.getZorderlist();
                        for (int j = 0; j < ztllist.size(); j++) {
                            TZorderlist ztl = (TZorderlist) ztllist.get(j);
                            List seatlist = ztl.getSeatlist();
                            if (seatlist.size() > 0) {
                                istd = true;
                            }
                        }
                    } else {
                        istd = true;
                    }
                    if (istd) {
                        YOrderlist yorderlist = new YOrderlist();
                        YOrderlistId ylid = new YOrderlistId();
                        ylid.setIscenicid(iscenicid);
                        ylid.setOrid(szsalesvoucherno);
                        ylid.setOrderlistid(new Long(i + 1));
                        yorderlist.setId(ylid);
                        yorderlist.setItickettypeid(tl.getItickettypeid());
                        yorderlist.setIcrowdkindid(tl.getIcrowdkindid());
                        yorderlist.setIcrowdkindpriceid(tl
                                .getIcrowdkindpriceid());
                        yorderlist.setDtstartdate(tl.getDtstartdate());
                        yorderlist.setDtenddate(tl.getDtenddate());
                        yorderlist.setNumb(tl.getNumb());
                        yorderlist.setPric(tl.getPric());
                        yorderlist.setAmnt(tl.getAmnt());
                        yorderlist.setYhnumb(tl.getYhnumb());
                        yorderlist.setYhamnt(tl.getYhamnt());
                        yorderlist.setIoffersschemeid(tl.getIoffersschemeid());
                        yorderlist.setMhandcharge(tl.getMhandcharge());
                        timeSharingDao.save(yorderlist);
                        List ztllist = tl.getZorderlist();

                        for (int j = 0; j < ztllist.size(); j++) {
                            TZorderlist ztl = (TZorderlist) ztllist.get(j);
                            YZorderlist yzl = new YZorderlist();
                            YZorderlistId yzid = new YZorderlistId();
                            yzid.setIscenicid(iscenicid);
                            yzid.setOrid(szsalesvoucherno);
                            yzid.setOrderlistid(new Long(i + 1));
                            yzid.setZorderlistid(new Long(j + 1));
                            yzl.setId(yzid);
                            yzl.setIcrowdkindid(ztl.getIcrowdkindid());
                            yzl.setIcrowdkindpriceid(ztl.getIcrowdkindpriceid());
                            yzl.setDtstartdate(ztl.getDtstartdate());
                            yzl.setDtenddate(ztl.getDtenddate());
                            yzl.setItickettypeid(ztl.getItickettypeid());
                            yzl.setIztickettypeid(ztl.getIztickettypeid());
                            yzl.setIvenueid(ztl.getIvenueid());
                            yzl.setIvenueareaid(ztl.getIvenueareaid());
                            yzl.setIvenueseatsid(ztl.getIvenueseatsid());
                            yzl.setTripid(ztl.getTripid());
                            yzl.setZnumb(tl.getNumb());
                            yzl.setZpric(ztl.getZpric());
                            yzl.setZamnt(tl.getNumb() * ztl.getZpric());
                            if (ztl.getMhandcharge() == null
                                    || ztl.getMhandcharge().equals("")) {
                                yzl.setMhandcharge(0D);
                            } else {
                                yzl.setMhandcharge(ztl.getMhandcharge());
                            }
                            if (ztl.getMhandcharge() == null
                                    || ztl.getMhandcharge().equals("")) {
                                yzl.setTdfl(0D);
                            } else {
                                yzl.setTdfl(ztl.getTdfl());
                            }

                            yzl.setZyhnumb(tl.getYhnumb());
                            yzl.setZyhamnt(tl.getYhnumb() * ztl.getZpric());
                            yzl.setSqnumber(ztl.getSqnumber());

                            timeSharingDao.save(yzl);
                            List seatlist = ztl.getSeatlist();
                            if (seatlist != null && seatlist.size() > 0) {
                                for (int a = 0; a < seatlist.size(); a++) {
                                    Seatordertab s = (Seatordertab) seatlist
                                            .get(a);
                                    Seatyordertab ys = new Seatyordertab();
                                    SeatyordertabId ysid = new SeatyordertabId();
                                    ysid.setOrderlistid(yzl.getId()
                                            .getOrderlistid());
                                    ysid.setOrid(yzl.getId().getOrid());
                                    ysid.setIscenicid(yzl.getId()
                                            .getIscenicid());
                                    ysid.setZorderlistid(yzl.getId()
                                            .getZorderlistid());
                                    ysid.setSeq(new Long(a + 1));
                                    ys.setId(ysid);
                                    ys.setIprogramid(s.getIprogramid());
                                    ys.setItripid(s.getItripid());
                                    ys.setItripprdcontrolid(s
                                            .getItripprdcontrolid());
                                    ys.setIvenueid(s.getIvenueid());
                                    ys.setIvenueareaid(s.getIvenueareaid());
                                    ys.setStartdate(s.getStartdate().substring(
                                            0, 10));
                                    ys.setDtmakedate(nowtime);
                                    ys.setIseatid(s.getIseatid());
                                    System.out.println("seatid="
                                            + s.getIseatid());
                                    ys.setIsvalid(s.getIsvalid());
                                    timeSharingDao.save(ys);
                                    if (s.getIsvalid() == 1) {
                                        // 退订删除座位状态数据
                                        SeatstatustabId ststid = new SeatstatustabId();
                                        ststid.setIvenueid(s.getIvenueid());
                                        ststid.setIvenueareaid(s
                                                .getIvenueareaid());
                                        ststid.setItripid(s.getItripid());
                                        ststid.setIseatid(s.getIseatid());
                                        ststid.setStartdate(s.getStartdate()
                                                .substring(0, 10));

                                        Seatstatustab stst = (Seatstatustab) timeSharingDao
                                                .get(Seatstatustab.class,
                                                        ststid);
                                        timeSharingDao.delete(stst);
                                    }
                                    if (s.getIsvalid() == -1) {
                                        // 新增座位状态数据
                                        Seatstatustab stst = new Seatstatustab();
                                        SeatstatustabId ststid = new SeatstatustabId();
                                        ststid.setIvenueid(s.getIvenueid());
                                        ststid.setIvenueareaid(s
                                                .getIvenueareaid());
                                        ststid.setItripid(s.getItripid());
                                        ststid.setIseatid(s.getIseatid());
                                        ststid.setStartdate(s.getStartdate()
                                                .substring(0, 10));
                                        stst.setId(ststid);
                                        stst.setStatus(1L);
                                        stst.setDtmakedate(Tools.getDayTimes());

                                        timeSharingDao.save(stst);
                                    }

                                }
                            }
                        }
                    }

                }
                System.out.println("cancel15:");
                // 3、更新TOrder TOrderlist TZorderlist数据
                // 2014-12-10 修改，优惠金额不对；
                t.setMont(smont + t.getYhamnt());
                t.setZfmont(smont);
                List seatorderlist = timeSharingDao
                        .find(" from Seatordertab s where s.id.orid='" + orid
                                + "' and s.id.iscenicid=" + iscenicid);
                if (seatorderlist != null && seatorderlist.size() > 0) {
                    for (int i = 0; i < seatorderlist.size(); i++) {
                        Seatordertab s = (Seatordertab) seatorderlist.get(i);
                        timeSharingDao.delete(s);
                    }
                }
                List yzorderlist = timeSharingDao
                        .find("from TZorderlist t where t.id.orid='" + orid
                                + "' and t.id.iscenicid=" + iscenicid);

                for (int i = 0; i < yzorderlist.size(); i++) {

                    TZorderlist tzlist = (TZorderlist) yzorderlist.get(i);

                    timeSharingDao.delete(tzlist);

                }

                List yorderlist = timeSharingDao
                        .find("from TOrderlist t where t.id.orid='" + orid
                                + "' and t.id.iscenicid='" + iscenicid + "'");
                for (int i = 0; i < yorderlist.size(); i++) {

                    TOrderlist tlist = (TOrderlist) yorderlist.get(i);
                    timeSharingDao.delete(tlist);
                }
                System.out.println("cancel18");
                for (int i = 0; i < orderlistlist.size(); i++) {

                    TOrderlist tlist = (TOrderlist) orderlistlist.get(i);
                    if (tlist.getNumb() > 0) {
                        TOrderlistId tid = new TOrderlistId();
                        tid.setIscenicid(iscenicid);
                        tid.setOrid(orid);
                        tid.setOrderlistid(new Long(i + 1));
                        tlist.setId(tid);
                        timeSharingDao.save(tlist);
                        List ztllist = tlist.getZorderlist();
                        for (int j = 0; j < ztllist.size(); j++) {
                            TZorderlist ztlist = (TZorderlist) ztllist.get(j);
                            TZorderlistId ztid = new TZorderlistId();
                            ztid.setIscenicid(iscenicid);
                            ztid.setOrid(orid);
                            ztid.setOrderlistid(new Long(i + 1));
                            ztid.setZorderlistid(new Long(j + 1));
                            ztlist.setId(ztid);
                            timeSharingDao.save(ztlist);
                            List seatlist = ztlist.getSeatlist();
                            if (seatlist != null && seatlist.size() > 0) {
                                for (int a = 0; a < seatlist.size(); a++) {
                                    Seatordertab s = (Seatordertab) seatlist
                                            .get(a);
                                    SeatordertabId sid = new SeatordertabId();
                                    sid.setIscenicid(iscenicid);
                                    sid.setOrid(orid);
                                    sid.setOrderlistid(ztid.getOrderlistid());
                                    sid.setZorderlistid(ztid.getZorderlistid());
                                    sid.setSeq(new Long(a + 1));

                                    s.setId(sid);
                                    s.setIsvalid(1L);
                                    timeSharingDao.save(s);
                                }
                            }
                        }
                    }
                }
                if (orderlistlist.size() == 0) {
                    t.setDdzt("11");
                }

                timeSharingDao.update(t);// 更新TOrder
                YOrder oy = (YOrder) timeSharingDao.get(YOrder.class, new YOrderId(
                        orid, iscenicid));
                if (oy.getTpmont() != null) {
                    oy.setTpmont(oy.getTpmont() + tkmont + y.getTpsx());
                } else {
                    oy.setTpmont(tkmont + y.getTpsx());
                }
                if (oy.getTpsx() != null) {
                    oy.setTpsx(oy.getTpsx() + y.getTpsx());
                } else {
                    oy.setTpsx(y.getTpsx());
                }
                oy.setIsf(new Long(1));
                if (orderlistlist.size() == 0) {
                    oy.setDdzt("11");
                }
                timeSharingDao.update(oy);
                if (morder.getTpmont() != null) {
                    morder.setTpmont(morder.getTpmont() + tkmont + m.getTpsx());
                } else {
                    morder.setTpmont(tkmont + m.getTpsx());
                }
                if (morder.getTpsx() != null) {
                    morder.setTpsx(morder.getTpsx() + m.getTpsx());
                } else {
                    morder.setTpsx(m.getTpsx());
                }
                morder.setIsf(new Long(1));
                List ylist = timeSharingDao.find("from YOrder where ddzt='02'");
                if (ylist.size() == 0) {
                    morder.setDdzt("11");
                }

                timeSharingDao.update(morder);

                boolean hqyt = CommonUtil.isHqyt();
                if(hqyt){
                    if(tkmont < 0){
                        throw new RuntimeException("修改后订单金额不能大于原始订单金额");
                    }
                    HqytClient client = new HqytClient();
                    RefundbillsRequest request = new RefundbillsRequest();
                    request.setId(Long.parseLong(morder.getNoteh()));
                    request.setRefundMoney(MathUtil.divide(tkmont,1,2,BigDecimal.ROUND_HALF_UP));
                    request.setRefundOrid(m.getOrid());
                    request.setReason("出票口出票前修改订单");
                    request.setMemo("退款金额:"+(tkmont+smhandcharge)+";手续费:"+smhandcharge);
                    try{
                        JSONRefundBill refundBill = client.refundbills(request);
                        if(refundBill != null){
                            morder.setNoteh(refundBill.getInvoice().getId().toString());
                            timeSharingDao.update(morder);
                        }else{
                            throw new RuntimeException("退订失败:申请退订失败");
                        }
                    }catch (Exception e){
                        throw new RuntimeException("退订失败:"+e.getMessage());
                    }
                }else{
                    //预付款判断与更新
                    if (tkmont < 0) {
                        // 判断预付款中是否有金额满足要求
                        double ye = CommonUtil.getUserMoney(zfusid);
                        if (ye + tkmont < 0) {
                            throw new RuntimeException("预付款余额不能支付修改后的金额,不能销售");
                        }
                    }
//                    IBalanceCenterDAO balancecenterDao = (IBalanceCenterDAO) SpringUtil.getBean("balancecenterDao");
                    String yfkfs = "02";
                    int types = 1;
                    Useryfk yfk = new Useryfk();

                    yfk.setSeq(getuseryfkMaxSeq("Useryfk", "seq") + 1);
                    yfk.setUsid(zfusid);// 用户
                    yfk.setBdate(Tools.getTodayString());
                    yfk.setOrderid(szsalesvoucherno);
                    yfk.setPoint(tkmont + smhandcharge);
                    yfk.setYfklb(types);
                    yfk.setYfksc(yfkfs); // 商户
                    yfk.setCztp(0);
                    Sysparv5Id sysid = new Sysparv5Id();
                    sysid.setPmcd(yfkfs);
                    sysid.setPmky("YFKS");
                    Sysparv5 sysparv5 = (Sysparv5) timeSharingDao.get(Sysparv5.class,
                            sysid);
                    if (sysparv5 != null) {
                        yfk.setNote(sysparv5.getPmva());
                        // 备注
                    }
                    yfk.setSzmemo("出票口出票前换票" + iemployeeid);
                    //系统不存在预付款功能，将起功能注释              
//                    balancecenterDao.useryfksave(yfk);
                    if (smhandcharge > 0) {
                        Useryfk sxyfk = new Useryfk();
                        sxyfk.setSeq(getuseryfkMaxSeq("Useryfk", "seq") + 1);
                        sxyfk.setUsid(zfusid);// 用户
                        sxyfk.setBdate(Tools.getTodayString());
                        sxyfk.setOrderid(szsalesvoucherno);
                        sxyfk.setPoint(smhandcharge);
                        sxyfk.setYfklb(-1);
                        sxyfk.setYfksc("17"); // 商户
                        sxyfk.setCztp(0);
                        sxyfk.setNote("退订扣手续费");// 备注
                        sxyfk.setSzmemo("退订扣手续费");
                        
//                        balancecenterDao.useryfksave(sxyfk);
                    }

                    // ** 平台预付款减少* */

                    List sysList = timeSharingDao
                            .find(" from Sysparv5 where id.pmky='SYFK' and id.pmcd='01'");
                    Sysparv5 sys = null;

                    sys = (Sysparv5) sysList.get(0);// 取平台帐号
                    Useryfk ptyfk = new Useryfk();
                    ptyfk.setSeq(getuseryfkMaxSeq("Useryfk", "seq") + 1);
                    ptyfk.setUsid(sys.getPmva());// 用户
                    ptyfk.setBdate(Tools.getTodayString());
                    ptyfk.setOrderid(szsalesvoucherno);
                    ptyfk.setPoint(tkmont + smhandcharge);
                    ptyfk.setYfklb(-1);
                    ptyfk.setYfksc(yfkfs); // 商户
                    ptyfk.setCztp(0);
                    ptyfk.setNote("平台退订");
//                    balancecenterDao.useryfksave(ptyfk);
                    if (smhandcharge > 0) {
                        Useryfk useryfkpd = new Useryfk();
                        useryfkpd.setBdate(Tools.getTodayString());
                        useryfkpd.setCztp(0);
                        useryfkpd.setNote(yfk.getUsid() + "客户退订手续费");
                        useryfkpd.setOrderid(yfk.getOrderid());
                        useryfkpd.setPoint(smhandcharge);
                        useryfkpd.setSeq(getuseryfkMaxSeq("Useryfk", "seq") + 1);
                        useryfkpd.setUsid(sys.getPmva());
                        useryfkpd.setYfklb(1);
                        useryfkpd.setYfksc("16");
//                        balancecenterDao.useryfksave(useryfkpd);
                    }

                    /*IOrderService  orderService =(IOrderService) SpringUtil.getBean("orderService");
                    UserYfkCheck yfkc = new UserYfkCheck( orderService );
                    try{
                        int rc_id = yfkc.ValideYfkPay(m.getOrid(), m.getTpmont(), 0);
                        if ( rc_id == -1)
                        {
                            throw new RuntimeException ("退预付款不成功！");
                        }
                    }catch(Exception e){
                        throw new RuntimeException(e.getMessage());
                    }*/
                }
            } else {
                List seatorderlist = timeSharingDao
                        .find(" from Seatordertab s where s.id.orid='" + orid
                                + "' and s.id.iscenicid=" + iscenicid);
                if (seatorderlist != null && seatorderlist.size() > 0) {
                    for (int i = 0; i < seatorderlist.size(); i++) {
                        Seatordertab s = (Seatordertab) seatorderlist.get(i);
                        timeSharingDao.delete(s);
                    }
                }
                List yzorderlist = timeSharingDao
                        .find("from TZorderlist t where t.id.orid='" + orid
                                + "' and t.id.iscenicid=" + iscenicid);

                for (int i = 0; i < yzorderlist.size(); i++) {

                    TZorderlist tzlist = (TZorderlist) yzorderlist.get(i);

                    timeSharingDao.delete(tzlist);

                }

                List yyzorderlist = timeSharingDao
                        .find("from YZorderlist t where t.id.orid='" + orid
                                + "' and t.id.iscenicid=" + iscenicid);

                for (int i = 0; i < yyzorderlist.size(); i++) {

                    YZorderlist tzlist = (YZorderlist) yyzorderlist.get(i);

                    timeSharingDao.delete(tzlist);

                }

                List yorderlist = timeSharingDao
                        .find("from TOrderlist t where t.id.orid='" + orid
                                + "' and t.id.iscenicid='" + iscenicid + "'");
                for (int i = 0; i < yorderlist.size(); i++) {

                    TOrderlist tlist = (TOrderlist) yorderlist.get(i);
                    timeSharingDao.delete(tlist);
                }
                List yyorderlist = timeSharingDao
                        .find("from YOrderlist t where t.id.orid='" + orid
                                + "' and t.id.iscenicid='" + iscenicid + "'");
                for (int i = 0; i < yyorderlist.size(); i++) {

                    YOrderlist tlist = (YOrderlist) yyorderlist.get(i);
                    timeSharingDao.delete(tlist);
                }

                System.out.println("cancel18");
                for (int i = 0; i < orderlistlist.size(); i++) {

                    TOrderlist tlist = (TOrderlist) orderlistlist.get(i);
                    if (tlist.getNumb() > 0) {
                        TOrderlistId tid = new TOrderlistId();
                        tid.setIscenicid(iscenicid);
                        tid.setOrid(orid);
                        tid.setOrderlistid(new Long(i + 1));
                        tlist.setId(tid);
                        Edmcrowdkindpricetab ep = (Edmcrowdkindpricetab) this.timeSharingDao
                                .get(Edmcrowdkindpricetab.class,
                                        tlist.getIcrowdkindpriceid());
                        if (ep.getInote2() != null && ep.getInote2() == 1) {
                            if (Tools.getDayNumb(tlist.getDtenddate(),
                                    ep.getEnddata()) < 1) {
                                tlist.setDtenddate(ep.getEnddata());
                            }
                        }
                        timeSharingDao.save(tlist);
                        YOrderlistId yid = new YOrderlistId();
                        yid.setIscenicid(iscenicid);
                        yid.setOrid(orid);
                        yid.setOrderlistid(new Long(i + 1));
                        YOrderlist ylist = new YOrderlist();
                        ylist.setId(yid);
                        ylist.setItickettypeid(tlist.getItickettypeid());
                        ylist.setIcrowdkindid(tlist.getIcrowdkindid());
                        ylist.setIcrowdkindpriceid(tlist.getIcrowdkindpriceid());
                        ylist.setDtstartdate(tlist.getDtstartdate());
                        ylist.setDtenddate(tlist.getDtenddate());
                        ylist.setNumb(tlist.getNumb());
                        ylist.setPric(tlist.getPric());
                        ylist.setAmnt(tlist.getAmnt());
                        ylist.setYhnumb(tlist.getYhnumb());
                        ylist.setYhamnt(tlist.getYhamnt());
                        timeSharingDao.save(ylist);
                        List ztllist = tlist.getZorderlist();
                        for (int j = 0; j < ztllist.size(); j++) {
                            TZorderlist ztlist = (TZorderlist) ztllist.get(j);
                            if (ztlist.getTripid() == null
                                    || ztlist.getTripid() == 0) {
                                if (ep.getInote2() != null
                                        && ep.getInote2() == 1) {
                                    if (Tools.getDayNumb(ztlist.getDtenddate()
                                            .substring(0, 10), ep.getEnddata()) < 1) {
                                        ztlist.setDtenddate(ep.getEnddata()
                                                + " 23:59:59");
                                    }
                                }
                            }
                            TZorderlistId ztid = new TZorderlistId();
                            ztid.setIscenicid(iscenicid);
                            ztid.setOrid(orid);
                            ztid.setOrderlistid(new Long(i + 1));
                            ztid.setZorderlistid(new Long(j + 1));
                            ztlist.setId(ztid);
                            timeSharingDao.save(ztlist);
                            YZorderlist yzl = new YZorderlist();
                            YZorderlistId yzid = new YZorderlistId();
                            yzid.setIscenicid(iscenicid);
                            yzid.setOrid(szsalesvoucherno);
                            yzid.setOrderlistid(new Long(i + 1));
                            yzid.setZorderlistid(new Long(j + 1));
                            yzl.setId(yzid);
                            yzl.setIcrowdkindid(ztlist.getIcrowdkindid());
                            yzl.setIcrowdkindpriceid(ztlist
                                    .getIcrowdkindpriceid());
                            yzl.setDtstartdate(ztlist.getDtstartdate());
                            yzl.setDtenddate(ztlist.getDtenddate());
                            yzl.setItickettypeid(ztlist.getItickettypeid());
                            yzl.setIztickettypeid(ztlist.getIztickettypeid());
                            yzl.setIvenueid(ztlist.getIvenueid());
                            yzl.setIvenueareaid(ztlist.getIvenueareaid());
                            yzl.setIvenueseatsid(ztlist.getIvenueseatsid());
                            yzl.setTripid(ztlist.getTripid());
                            yzl.setZnumb(ztlist.getZnumb());
                            yzl.setZpric(ztlist.getZpric());
                            yzl.setZamnt(ztlist.getZamnt());
                            yzl.setZyhnumb(ztlist.getZyhnumb());
                            yzl.setZyhamnt(ztlist.getZyhamnt());
                            timeSharingDao.save(yzl);
                            List seatlist = ztlist.getSeatlist();
                            if (seatlist != null && seatlist.size() > 0) {
                                for (int a = 0; a < seatlist.size(); a++) {
                                    Seatordertab s = (Seatordertab) seatlist
                                            .get(a);
                                    SeatordertabId sid = new SeatordertabId();
                                    sid.setIscenicid(iscenicid);
                                    sid.setOrid(orid);
                                    sid.setOrderlistid(ztid.getOrderlistid());
                                    sid.setZorderlistid(ztid.getZorderlistid());
                                    sid.setSeq(new Long(a + 1));

                                    s.setId(sid);
                                    s.setIsvalid(1L);
                                    timeSharingDao.save(s);
                                }
                            }
                        }
                    }
                }
                t.setMont(smont + t.getYhamnt());
                t.setZfmont(smont);
                timeSharingDao.update(t);// 更新TOrder
                YOrder oy = (YOrder) timeSharingDao.get(YOrder.class, new YOrderId(
                        orid, iscenicid));
                oy.setMont(smont);
                oy.setZfmont(smont);
                timeSharingDao.update(oy);
                morder.setMont(smont);
                morder.setZfmont(smont);
                timeSharingDao.update(morder);



            }

            rs.addRow(new String[] { "true", "退换成功" });

            return rs;
        }
    }

    /** 取用户的预付款余额 */
    public float getsumjifen(String usid) {
        // 计算当前余额
        Vipbalance vipbalance = (Vipbalance) timeSharingDao.get(Vipbalance.class,
                usid);

        if (vipbalance == null) {
            double ye = getInitsumjifen(usid);
            vipbalance = new Vipbalance();
            vipbalance.setUsid(usid);
            vipbalance.setAcctype("01");
            vipbalance.setPoint(ye);
            timeSharingDao.save(vipbalance);
        }
        // 默认查询出来的list里存放的是一个Object数组，但是在这里list里存放的不再是默认的Object数组了，而是Map集合了
        float rc_float = vipbalance.getPoint().floatValue();

        // 除去提现未审核的金额
        List list = timeSharingDao.find("from Yfktoxj where ddzt in ('97','04') and usid='"
                + usid + "'");
        if (list != null && list.size() > 0) {
            list = timeSharingDao
                    .find("select sum(mont) as mont from Yfktoxj where ddzt in ('97','04') and usid='"
                            + usid + "'");
            rc_float = rc_float
                    - (list != null && list.size() > 0 ? ((Double) list.get(0))
                    .floatValue() : new Float(0));
        }

        return rc_float;

    }

    /** 取用户的预付款余额 */
    public float getInitsumjifen(String usid) {
        String hql = " select new map( sum ( yfk.point * yfk.yfklb ) as sumjifen ) From Useryfk yfk  where yfk.usid =  '"
                + usid + "'";
        List list = timeSharingDao.find(hql);
        // 默认查询出来的list里存放的是一个Object数组，但是在这里list里存放的不再是默认的Object数组了，而是Map集合了
        float rc_float = 0;
        if (list.size() > 0) {
            // 一条记录里所有的字段值都是map里的一个元素,key是字符串0,1,2,3....，value是字段值
            // 如果将hql改为：String hql =
            // " select new map(name as username,passwd as password) from
            // Users";,那么key将不是字符串0,1,2...了，而是"username","password"了
            for (Iterator iterator2 = list.iterator(); iterator2.hasNext();) {
                HashMap map = (HashMap) iterator2.next();
                Double sumjifen = (Double) map.get("sumjifen"); // 取到退订单编号
                if (sumjifen == null) {
                    sumjifen = new Double(0D);
                } else {
                    rc_float = sumjifen.floatValue();
                }
            }
        } else {
            rc_float = 0;
        }
        return rc_float;
    }

    /**
     * 获取主键最大值 Describe:
     *
     * @auth:huangyuqi
     * @return return:int Date:2011-11-16
     */
    public int getuseryfkMaxSeq(String tablename, String column) {
        int seq = 0;
        String sql = "select max(h." + column + ") from " + tablename + " h";
        List seqList = timeSharingDao.find(sql);
        if (seqList.size() > 0) {
            if (seqList.get(0) == null) {
                seq = 0;
            } else {
                seq = Integer.parseInt(seqList.get(0) == null ? "0" : seqList
                        .get(0).toString());
            }
        }
        return seq;
    }

    public void hfUseryfk(String orid) {
        String sql = "from Useryfk where orderid='" + orid + "'";
        List list = timeSharingDao.find(sql);
        for (int i = 0; i < list.size(); i++) {
            Useryfk yfk = (Useryfk) list.get(0);
            Vipbalance vipbalance = (Vipbalance) timeSharingDao.get(
                    Vipbalance.class, yfk.getUsid());
            vipbalance.setPoint(vipbalance.getPoint() - yfk.getYfklb()
                    * yfk.getPoint());
            timeSharingDao.update(vipbalance);
            timeSharingDao.delete(yfk);

        }
    }

    /**
     * 预付款保存 Describe:
     *
     * @auth:huangyuqi
     * @param usid
     *            要改变预付款的用户
     * @param orid订单号
     * @param types预付款类别
     *            （1增加-1减少）
     * @param yfkfs预付款来源
     *            (01充值预付款02退订转预付款03消费预付款04预付款转现金05订单消费转预付款15积分转预付款)
     * @param mont金额
     * @param note备注
     *            return:void Date:2011-12-8
     */
    public void saveUseryfk(String usid, String orid, int types, String yfkfs,
                            Double mont, Double tpsx, String note) throws Exception {

//        IBalanceCenterDAO balancecenterDao = (IBalanceCenterDAO) SpringUtil.getBean("balancecenterDao");

        Useryfk yfk = new Useryfk();

        yfk.setSeq(getuseryfkMaxSeq("Useryfk", "seq") + 1);
        yfk.setUsid(usid);// 用户
        yfk.setBdate(Tools.getTodayString());
        yfk.setOrderid(orid);
        yfk.setPoint(mont + tpsx);
        yfk.setYfklb(types);
        yfk.setYfksc(yfkfs); // 商户
        yfk.setCztp(0);
        Sysparv5Id sysid = new Sysparv5Id();
        sysid.setPmcd(yfkfs);
        sysid.setPmky("YFKS");
        Sysparv5 sysparv5 = (Sysparv5) timeSharingDao.get(Sysparv5.class, sysid);
        if (sysparv5 != null) {
            yfk.setNote(sysparv5.getPmva());// 备注
        }
        yfk.setSzmemo(note);
//        balancecenterDao.useryfksave(yfk);
        timeSharingDao.save(yfk);
        if (tpsx.longValue() > 0) {
            Useryfk sxyfk = new Useryfk();
            sxyfk.setSeq(getuseryfkMaxSeq("Useryfk", "seq") + 1);
            sxyfk.setUsid(usid);// 用户
            sxyfk.setBdate(Tools.getTodayString());
            sxyfk.setOrderid(orid);
            sxyfk.setPoint(tpsx);
            sxyfk.setYfklb(-1);
            sxyfk.setYfksc("17"); // 商户
            sxyfk.setCztp(0);
            sxyfk.setNote("退订扣手续费");// 备注
            sxyfk.setSzmemo("退订扣手续费");
//            balancecenterDao.useryfksave(sxyfk);
            timeSharingDao.save(sxyfk);
        }
//        Vipbalance vipbalance = (Vipbalance) timeSharingDao.get(Vipbalance.class,
//                yfk.getUsid());
//        if (vipbalance == null) {
//            double ye = getInitsumjifen(yfk.getUsid());
//            vipbalance = new Vipbalance();
//            vipbalance.setUsid(yfk.getUsid());
//            vipbalance.setAcctype("01");
//            vipbalance.setPoint(ye);
//            timeSharingDao.save(vipbalance);
//        } else {
//            vipbalance.setPoint(vipbalance.getPoint() + mont);
//            timeSharingDao.update(vipbalance);
//        }

        /** 平台预付款减少* */
        List sysList = timeSharingDao
                .find(" from Sysparv5 where id.pmky='SYFK' and id.pmcd='01'");
        Sysparv5 sys = null;

        sys = (Sysparv5) sysList.get(0);// 取平台帐号
        Useryfk ptyfk = new Useryfk();
        ptyfk.setSeq(getuseryfkMaxSeq("Useryfk", "seq") + 1);
        ptyfk.setUsid(sys.getPmva());// 用户
        ptyfk.setBdate(Tools.getTodayString());
        ptyfk.setOrderid(orid);
        ptyfk.setPoint(mont + tpsx);
        ptyfk.setYfklb(-1);
        ptyfk.setYfksc(yfkfs); // 商户
        ptyfk.setCztp(0);
        ptyfk.setNote("平台退订");
//        balancecenterDao.useryfksave(ptyfk);
//        timeSharingDao.save(ptyfk);
        if (tpsx.longValue() > 0) {
            Useryfk useryfkpd = new Useryfk();
            useryfkpd.setBdate(Tools.getTodayString());
            useryfkpd.setCztp(0);
            useryfkpd.setNote(yfk.getUsid() + "客户退订手续费");
            useryfkpd.setOrderid(yfk.getOrderid());
            useryfkpd.setPoint(tpsx);
            useryfkpd.setSeq(getuseryfkMaxSeq("Useryfk", "seq") + 1);
            useryfkpd.setUsid(sys.getPmva());
            useryfkpd.setYfklb(1);
            useryfkpd.setYfksc("16");
//            balancecenterDao.useryfksave(useryfkpd);
//            timeSharingDao.save(useryfkpd);

        }
//        Vipbalance ptvipbalance = (Vipbalance) timeSharingDao.get(Vipbalance.class,
//                sys.getPmva());
//        if (ptvipbalance == null) {
//            double ye = getInitsumjifen(ptyfk.getUsid());
//            ptvipbalance = new Vipbalance();
//            ptvipbalance.setUsid(sys.getPmva());
//            ptvipbalance.setAcctype("02");
//            ptvipbalance.setPoint(ye);
//            timeSharingDao.save(ptvipbalance);
//        } else {
//            ptvipbalance.setPoint(ptvipbalance.getPoint() - mont);
//            timeSharingDao.update(ptvipbalance);
//        }

    }

    public ResultBean savecancelstopraftorder(String orid, Long iscenicid,
                                              String neworid, Long iemployeeid) throws Exception {

        MOrder morder = (MOrder) timeSharingDao.get(MOrder.class, orid);
        Custom custom = (Custom) timeSharingDao.get(Custom.class, morder.getUsid());
        String susid = "";
        if (custom.getUsqx().substring(0, 1).equals("1")) {
            // 分社主用户
            susid = custom.getUsid();
        } else {
            // 分社子用户
            susid = custom.getSusid();
        }
        String nowtime = Tools.getDayTimes();
        MOrder m = new MOrder();
        m.setOrid(neworid);
        m.setOrda(nowtime.substring(0, 10));
        m.setOrti(nowtime.substring(10));
        m.setOrtp("02");
        m.setDdzt("06");
        m.setUsid(morder.getUsid());
        m.setZfusid(morder.getZfusid());
        m.setTpsx(new Double(0));
        m.setTpdate(nowtime.substring(0, 10));
        m.setIsjl(new Long(0));
        m.setIsallcp(new Long(0));
        m.setTpfs("02");
        m.setSrid(morder.getOrid());
        m.setMont(new Double(0));
        m.setIsc(iemployeeid);
        m.setNotec(nowtime);
        m.setZfmont(new Double(0));
        m.setNotef("06");
        TOrder torder = (TOrder) timeSharingDao.get(TOrder.class, new TOrderId(
                orid, iscenicid));
        YOrder y = new YOrder();
        YOrderId yid = new YOrderId();
        yid.setOrid(neworid);
        yid.setIscenicid(iscenicid);
        y.setId(yid);
        y.setScenictype("01");
        y.setDdzt("06");
        y.setFempid(iemployeeid.toString());
        y.setUsid(morder.getUsid());
        y.setIbusinessid(torder.getIbusinessid());
        y.setDtstartdate(torder.getDtstartdate());
        y.setDtenddate(torder.getDtenddate());
        y.setOrnm(torder.getOrnm());
        y.setOrzj(torder.getOrzj());
        y.setOrhm(torder.getOrhm());
        y.setTpsx(new Double(0));
        y.setMont(new Double(0));
        y.setZfmont(new Double(0));
        y.setTpdate(nowtime);
        y.setTpfs("02");
        y.setIsc(iemployeeid);
        y.setNotef("06");
        List plist = new ArrayList();// 跟新已销售数量
        List deletelist = new ArrayList();// 需要删除的Torderlist中的数据
        List updatelist = new ArrayList();// 需要更新的Torderlist中的数据
        List deletezlist = new ArrayList();// 需要删除的TZorderlist中的数据
        List yorderlistlist = new ArrayList();// 新增yorderlist中的数据
        List orderlistlist = timeSharingDao.find("from TOrderlist where id.orid='"
                + orid + "' and id.iscenicid=" + iscenicid);
        for (int i = 0; i < orderlistlist.size(); i++) {
            TOrderlist tlist = (TOrderlist) orderlistlist.get(i);
            List zorderlistlist = timeSharingDao
                    .find("from TZorderlist where id.orid='" + orid
                            + "' and id.iscenicid=" + iscenicid
                            + " and id.orderlistid="
                            + tlist.getId().getOrderlistid());
            int tdnumb = 0;
            double szpric = 0;
            double szamnt = 0;
            List yzlistlist = new ArrayList();
            for (int j = 0; j < zorderlistlist.size(); j++) {

                TZorderlist zlist = (TZorderlist) zorderlistlist.get(j);
                if (zlist.getTripid() > 0) {
                    // 判断plist是否已经存在
                    boolean b = true;
                    for (int k = 0; k < plist.size(); k++) {
                        Productcontrol p = (Productcontrol) plist.get(k);
                        if (p.getTripid().longValue() == zlist.getTripid()
                                && p.getStdata()
                                .equals(zlist.getDtstartdate()
                                        .substring(0, 10))
                                && p.getItickettypeid().longValue() == zlist
                                .getIztickettypeid().longValue()) {
                            b = false;
                            tdnumb = tdnumb + 1;
                            p.setSoldnumber(p.getSoldnumber()
                                    + zlist.getZnumb());
                            YZorderlist yzl = new YZorderlist();
                            YZorderlistId yzid = new YZorderlistId();
                            yzid.setIscenicid(iscenicid);
                            yzid.setOrid(neworid);
                            yzid.setOrderlistid(zlist.getId().getOrderlistid());
                            yzid.setZorderlistid(zlist.getId()
                                    .getZorderlistid());
                            yzl.setId(yzid);
                            yzl.setIcrowdkindid(zlist.getIcrowdkindid());
                            yzl.setIcrowdkindpriceid(zlist
                                    .getIcrowdkindpriceid());
                            yzl.setDtstartdate(zlist.getDtstartdate());
                            yzl.setDtenddate(zlist.getDtenddate());
                            yzl.setItickettypeid(zlist.getItickettypeid());
                            yzl.setIztickettypeid(zlist.getIztickettypeid());
                            yzl.setIvenueid(zlist.getIvenueid());
                            yzl.setIvenueareaid(zlist.getIvenueareaid());
                            yzl.setIvenueseatsid(zlist.getIvenueseatsid());
                            yzl.setTripid(zlist.getTripid());
                            yzl.setZpric(zlist.getZpric());
                            yzl.setZamnt(zlist.getZamnt());
                            yzl.setZnumb(zlist.getZnumb());
                            yzl.setMhandcharge(new Double(0));
                            yzl.setTdfl(new Double(0));
                            yzl.setZyhnumb(new Long(0));
                            yzl.setZyhamnt(new Double(0));
                            yzl.setSqnumber(new Long(0));
                            yzlistlist.add(yzl);
                            tlist.setPric(tlist.getPric() - zlist.getZpric());
                            tlist.setAmnt(tlist.getAmnt() - zlist.getZamnt());
                            torder.setMont(torder.getMont() - zlist.getZamnt());
                            torder.setZfmont(torder.getZfmont()
                                    - zlist.getZamnt());
                            y.setMont(y.getMont() + zlist.getZamnt());
                            y.setZfmont(y.getZfmont() + zlist.getZamnt());
                            m.setMont(m.getMont() + zlist.getZamnt());
                            m.setZfmont(m.getZfmont() + zlist.getZamnt());
                            szpric = szpric + zlist.getZpric();
                            szamnt = szamnt + zlist.getZamnt();
                            deletezlist.add(zlist);
                        }
                    }
                    if (b) {
                        List pclist = timeSharingDao
                                .find("from Productcontrol where tripid="
                                        + zlist.getTripid()
                                        + " and stdata='"
                                        + zlist.getDtstartdate().substring(0,
                                        10) + "' and itickettypeid="
                                        + zlist.getIztickettypeid());

                        Productcontrol p = (Productcontrol) pclist.get(0);
                        if (p.getBystate() < 1) {
                            tdnumb = tdnumb + 1;
                            p.setSoldednumber(zlist.getZnumb());
                            plist.add(p);
                            YZorderlist yzl = new YZorderlist();
                            YZorderlistId yzid = new YZorderlistId();
                            yzid.setIscenicid(iscenicid);
                            yzid.setOrid(neworid);
                            yzid.setOrderlistid(zlist.getId().getOrderlistid());
                            yzid.setZorderlistid(zlist.getId()
                                    .getZorderlistid());
                            yzl.setId(yzid);
                            yzl.setIcrowdkindid(zlist.getIcrowdkindid());
                            yzl.setIcrowdkindpriceid(zlist
                                    .getIcrowdkindpriceid());
                            yzl.setDtstartdate(zlist.getDtstartdate());
                            yzl.setDtenddate(zlist.getDtenddate());
                            yzl.setItickettypeid(zlist.getItickettypeid());
                            yzl.setIztickettypeid(zlist.getIztickettypeid());
                            yzl.setIvenueid(zlist.getIvenueid());
                            yzl.setIvenueareaid(zlist.getIvenueareaid());
                            yzl.setIvenueseatsid(zlist.getIvenueseatsid());

                            yzl.setTripid(zlist.getTripid());

                            yzl.setZpric(zlist.getZpric());

                            yzl.setZamnt(zlist.getZamnt());

                            yzl.setZnumb(zlist.getZnumb());

                            yzl.setMhandcharge(new Double(0));
                            yzl.setTdfl(new Double(0));
                            yzl.setZyhnumb(new Long(0));
                            yzl.setZyhamnt(new Double(0));
                            yzl.setSqnumber(new Long(0));

                            yzlistlist.add(yzl);
                            tlist.setPric(tlist.getPric() - zlist.getZpric());
                            tlist.setAmnt(tlist.getAmnt() - zlist.getZamnt());
                            torder.setMont(torder.getMont() - zlist.getZamnt());
                            torder.setZfmont(torder.getZfmont()
                                    - zlist.getZamnt());

                            y.setMont(y.getMont() + zlist.getZamnt());
                            y.setZfmont(y.getZfmont() + zlist.getZamnt());
                            m.setMont(m.getMont() + zlist.getZamnt());
                            m.setZfmont(m.getZfmont() + zlist.getZamnt());
                            szpric = szpric + zlist.getZpric();
                            szamnt = szamnt + zlist.getZamnt();

                            deletezlist.add(zlist);
                        }

                    }
                }
            }

            if (tdnumb > 0) {
                if (tdnumb == zorderlistlist.size()) {
                    // 该票全部退订
                    deletelist.add(tlist);
                } else {
                    // 该票部分退订
                    updatelist.add(tlist);
                }

                YOrderlist yorderlist = new YOrderlist();
                YOrderlistId ylid = new YOrderlistId();
                ylid.setIscenicid(iscenicid);
                ylid.setOrid(neworid);
                ylid.setOrderlistid(tlist.getId().getOrderlistid());

                yorderlist.setId(ylid);
                yorderlist.setItickettypeid(tlist.getItickettypeid());

                yorderlist.setIcrowdkindid(tlist.getIcrowdkindid());
                yorderlist.setIcrowdkindpriceid(tlist.getIcrowdkindpriceid());

                yorderlist.setDtstartdate(tlist.getDtstartdate());
                yorderlist.setDtenddate(tlist.getDtenddate());
                yorderlist.setNumb(tlist.getNumb());
                yorderlist.setPric(szpric);
                yorderlist.setAmnt(szamnt);
                yorderlist.setYhnumb(new Long(0));
                yorderlist.setYhamnt(new Double(0));
                yorderlist.setMhandcharge(new Double(0));

                yorderlist.setYzorderlistlist(yzlistlist);

                yorderlistlist.add(yorderlist);
            }

        }

        if (plist.size() == 0) {
            ResultBean rs = new ResultBean();
            rs.setColumnCount(2);
            rs.setColumnNames(new String[] { "returnstats", "message" });
            rs.addRow(new String[] { "false", "没有停排竹筏不用退订" });
            return rs;
        }

        for (int i = 0; i < plist.size(); i++) {
            Productcontrol p = (Productcontrol) plist.get(i);
            Productcontrol p1 = (Productcontrol) timeSharingDao.get(
                    Productcontrol.class, p.getProductcontrolid());
            p1.setSoldnumber(p1.getSoldnumber() - p.getSoldednumber());
            timeSharingDao.update(p1);
        }

        for (int i = 0; i < deletezlist.size(); i++) {
            TZorderlist t = (TZorderlist) deletezlist.get(i);
            timeSharingDao.delete(t);
        }

        for (int i = 0; i < deletelist.size(); i++) {
            TOrderlist t = (TOrderlist) deletelist.get(i);
            timeSharingDao.delete(t);
        }

        for (int i = 0; i < updatelist.size(); i++) {
            TOrderlist t = (TOrderlist) updatelist.get(i);
            timeSharingDao.update(t);
        }

        if (morder.getTpmont() != null) {
            morder.setTpmont(morder.getTpmont() + m.getZfmont());
        } else {
            morder.setTpmont(m.getZfmont());
        }

        timeSharingDao.update(morder);
        YOrder yorder = (YOrder) timeSharingDao.get(YOrder.class, new YOrderId(
                orid, iscenicid));
        if (yorder.getTpmont() != null) {
            yorder.setTpmont(yorder.getTpmont() + m.getZfmont());
        } else {
            yorder.setTpmont(m.getZfmont());
        }

        timeSharingDao.update(yorder);
        timeSharingDao.update(torder);
        timeSharingDao.save(m);

        saveUseryfk(morder.getZfusid(), neworid, 1, "02", m.getZfmont(),
                new Double(0), "竹筏停排退订出票" + iemployeeid);
        timeSharingDao.save(y);

        for (int i = 0; i < yorderlistlist.size(); i++) {
            YOrderlist yo = (YOrderlist) yorderlistlist.get(i);
            timeSharingDao.save(yo);
            List yzlistlist = yo.getYzorderlistlist();
            for (int j = 0; j < yzlistlist.size(); j++) {
                YZorderlist yzo = (YZorderlist) yzlistlist.get(j);
                timeSharingDao.save(yzo);
            }
        }
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        rs.addRow(new String[] { "true", "竹筏停排退订成功" });

        return rs;
    }

    public ResultBean getStssalesvouchertablist(Long iemployeeid, String stdt,
                                                String eddt) {
        String sql = "select s.szsalesvoucherno,s.isalesvoucherid,s.iticketstationid,s.bysalesvouchertype,s.iaccountreceivable,s.dtmakedate,c1.corpname,c2.lname,s.bispay,s.bypostrecord,s.bysalesvouchertype,v5.pmva||case bypostrecord when 1 then '冲正' end strpzlb from Stssalesvouchertab s left join custom c1 on c1.usid=s.usid left join custom c2 on c2.usid=s.usid,sysparv5 v5  where s.ihandler=? and substr(s.dtmakedate,1,10)>=? and substr(s.dtmakedate,1,10)<=? and s.bysalesvouchertype in ('01','02','04') and v5.pmky='PZLB' and v5.pmcd=s.bysalesvouchertype order by s.dtmakedate desc";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql, iemployeeid,
                    stdt, eddt);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return MapToResultBean.toResultBean(list);
    }

    public ResultBean resoldticketlist(Long isalesvoucherid,
                                       Long iticketstationid, String ornm, String szregionalname,
                                       String corpname) {

        String sql = " select s.usid,e.szsoldticketid,e.isalesvoucherdetailsid,e.isalesvoucherid,e.iticketstationid,e.itickettypeid,e.szticketprintno,e.iserialnum,e.icrowdkindid,e.dtstartdate,e.dtenddate,e.iplayerperticket,ed.szcrowdkindname,edt.sztickettypename||'('||ed.szcrowdkindname||')' as sztickettypename,ebs.szbusinessname,e.mactualsaleprice,s.szsalesvoucherno,edt.bymaketicketway,v5.pmva as strmaketype,edt.bymediatype,v51.pmva as strmediatype,e.myzj,e.manyouno,e.name1,e.zjno1,sd.icrowdkindpriceid as icrowdkindpriceid,ep.ipeoplenumrange as ipeoplenumrange,c.corpname as corpname,dy.lname as ornm,su.szinnername as szregionalname,ep.listingprice as listingprice,ef.szemployeename as szemployeename ,es.szstationname as szstationname,ep.inote1 as inote1  from Stssoldtickettab e,Edpcrowdkindtab ed,Edmtickettypetab edt,Edmbusinesstab ebs,Stssalesvouchertab s left outer join custom dy on dy.usid=s.dyusid left outer join Galsourceregiontab su on su.iregionalid=s.iregionalid,stssalesvoucherdetailstab sd,Edmcrowdkindpricetab ep,Sysparv5 v5,Custom c,Sysparv5 v51,Esfemployeetab ef,Esbticketstationtab es where e.isalesvoucherid="
                + isalesvoucherid
                + " and e.iticketstationid="
                + iticketstationid
                + " and e.isalesvoucherid=s.isalesvoucherid and e.iticketstationid=s.iticketstationid  and ed.icrowdkindid=e.icrowdkindid and edt.itickettypeid=e.itickettypeid and ebs.ibusinessid=e.ibusinessid and edt.bymaketicketway in ('00','01') and edt.bymaketicketway=v5.pmcd and v5.pmky='CPFS'  and edt.bymediatype=v51.pmcd and v51.pmky='CKFS' and sd.isalesvoucherdetailsid=e.isalesvoucherdetailsid and sd.isalesvoucherid=e.isalesvoucherid and sd.iticketstationid=e.iticketstationid and sd.icrowdkindpriceid=ep.icrowdkindpriceid and s.usid=c.usid   and ef.iemployeeid=s.ihandler and es.iticketstationid=s.iticketstationid  order by e.iserialnum";

        List<Map> list = new ArrayList();
        try {
            System.out.println(sql);
            list = timeSharingDao.findBySqlToMapnocolsesession(sql);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        String msql = "select nvl(count(*),0) as numb,s.iticketstationid as iticketstationid,esb.szstationcode as szstationcode from Stssalesvouchertab s,Esbticketstationtab esb where s.iticketstationid=esb.iticketstationid and s.bysalesvouchertype = '01' and substr(s.dtmakedate, 1, 10) = '"
                + Tools.getDays()
                + "' and s.iticketstationid="
                + iticketstationid
                + " and s.isalesvoucherid<="
                + isalesvoucherid
                + " group by s.iticketstationid ,esb.szstationcode ";
        StringBuffer tationcode = new StringBuffer();
        List<Map> tationList = new ArrayList();
        try {
            tationList = timeSharingDao.findBySqlToMapnocolsesession(msql);
        } catch (Exception e1) {
            e1.printStackTrace();
        }
        if (tationList != null && tationList.size() > 0) {
            Map map1 = tationList.get(0);
            tationcode.append(map1.get("SZSTATIONCODE").toString() + "-"
                    + map1.get("NUMB").toString());
        }
        Sysparv5 v5 = (Sysparv5) timeSharingDao.get(Sysparv5.class, new Sysparv5Id(
                "ZDCD", "01"));
        for (Map map : list) {
            Long isalesvoucherdetailsid = new Long(map.get(
                    "ISALESVOUCHERDETAILSID").toString());
            String sql1 = " select sts.iztickettypeid,sts.tripid,sts.dtbegindate as dtstartdate,sts.dtenddate as dtenddate,edt.sztickettypename,t.tripname,sds.msplitprice from Stssoldticketsubtab sts left outer join trip t on t.tripid=sts.tripid,Edmtickettypetab edt,Stscomticketsalesdetailstab sds where sts.isalesvoucherid="
                    + map.get("ISALESVOUCHERID").toString()
                    + " and sts.isalesvoucherdetailsid="
                    + map.get("ISALESVOUCHERDETAILSID").toString()
                    + " and sts.iticketstationid="
                    + map.get("ITICKETSTATIONID").toString()
                    + " and sts.szsoldticketid="
                    + map.get("SZSOLDTICKETID").toString()
                    + " and sts.iztickettypeid=edt.itickettypeid and sts.isvalid=1 and sts.isalesvoucherid=sds.isalesvoucherid and sts.iticketstationid=sds.iticketstationid and sts.isalesvoucherdetailsid=sds.isalesvoucherdetailsid  and sts.iztickettypeid=sds.iztickettypeid";
            List<Map> list1 = new ArrayList();

            try {
                System.out.println(sql1);
                list1 = timeSharingDao.findBySqlToMap(sql1);
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            String zdail = "";
            String iztickettypeid = "";
            String products = "";
            String isvalid = "1";
            for (Map map1 : list1) {
                String szname = map1.get("SZTICKETTYPENAME").toString()
                        + map1.get("MSPLITPRICE").toString() + "元";
                try {
                    if (v5 == null) {

                        szname = map1.get("SZTICKETTYPENAME").toString()
                                + map1.get("MSPLITPRICE").toString() + "元";
                    } else {

                        int cdnumb = Integer.parseInt(v5.getPmva());
                        if (cdnumb < 1) {
                            szname = map1.get("SZTICKETTYPENAME").toString()
                                    + map1.get("MSPLITPRICE").toString() + "元";
                        } else {
                            if (map1.get("SZTICKETTYPENAME").toString()
                                    .length() > cdnumb) {
                                szname = map1.get("SZTICKETTYPENAME")
                                        .toString().substring(0, cdnumb)
                                        + map1.get("MSPLITPRICE").toString()
                                        + "元";
                            } else {
                                szname = map1.get("SZTICKETTYPENAME")
                                        .toString()
                                        + map1.get("MSPLITPRICE").toString()
                                        + "元";
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (!iztickettypeid.equals(map1.get("IZTICKETTYPEID")
                        .toString())) {
                    if (new Long(map1.get("TRIPID").toString()) > 0) {
                        // 读取对应的场馆和节目
                        String sql3 = "select  vn.venueidname,vp.szprogramname,vs.szvenueseatsname,va.ivenueareaname from seatsaletab s ,venue vn,Venueprogram vp,Venueseats vs,Venuearea va where s.isalesvoucherid="
                                + map.get("ISALESVOUCHERID").toString()
                                + " and s.iticketstationid="
                                + map.get("ITICKETSTATIONID").toString()
                                + "  and s.szsoldticketid="
                                + map.get("SZSOLDTICKETID").toString()
                                + " and isalesvoucherdetailsid="
                                + map.get("ISALESVOUCHERDETAILSID").toString()
                                + " and vn.ivenueid=s.ivenueid and s.iprogramid=vp.iprogramid and   vs.ivenueid=s.ivenueid and vs.ivenueseatsid=s.iseatid and s.isvalid=1 and s.ivenueareaid=va.ivenueareaid and s.ivenueid=va.ivenueid";
                        List<Map> list3 = new ArrayList();
                        Map map3 = null;
                        try {

                            list3 = timeSharingDao.findBySqlToMap(sql3);
                            if (list3 != null && list3.size() > 0) {
                                map3 = (Map) list3.get(0);
                                zdail = zdail
                                        + szname
                                        + "&"
                                        + map1.get("TRIPID").toString()
                                        + "&"
                                        + map1.get("TRIPNAME").toString()
                                        + "&"
                                        + map1.get("DTSTARTDATE").toString()
                                        + "&"
                                        + map1.get("DTENDDATE").toString()
                                        + "&"
                                        + map3.get("SZPROGRAMNAME").toString()
                                        + "&"
                                        + map3.get("VENUEIDNAME").toString()
                                        + "&"
                                        + map3.get("IVENUEAREANAME").toString()
                                        + map3.get("SZVENUESEATSNAME")
                                        .toString() + "@";
                            } else {
                                zdail = zdail + szname + "&"
                                        + map1.get("TRIPID").toString() + "&"
                                        + map1.get("TRIPNAME").toString() + "&"
                                        + map1.get("DTSTARTDATE").toString()
                                        + "&"
                                        + map1.get("DTENDDATE").toString()
                                        + "@";
                            }

                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                    } else {
                        zdail = zdail + map1.get("SZTICKETTYPENAME").toString()
                                + map1.get("MSPLITPRICE").toString() + "元"
                                + "&" + "0" + "&" + "" + "&"
                                + map1.get("DTSTARTDATE").toString() + "&"
                                + map1.get("DTENDDATE").toString() + "@";
                    }
                    iztickettypeid = map1.get("IZTICKETTYPEID").toString();
                    products = products + map1.get("IZTICKETTYPEID").toString()
                            + ":";
                }
            }
            if (!zdail.equals("")) {
                zdail = zdail.substring(0, zdail.length() - 1);
            } else {
                isvalid = "0";
            }
            if (products != null && !products.equals("")) {
                products = products.substring(0, products.length() - 1);
            }

            map.put("PRODUCTS", products);
            map.put("ISVALID", isvalid);
            map.put("ZDAIL", zdail);
            if (!ornm.equals("")) {
                map.put("ORNM", ornm);
            }
            if (!szregionalname.equals("")) {
                map.put("SZREGIONALNAME", szregionalname);
            }
            if (!corpname.equals("")) {
                map.put("CORPNAME", corpname);
            }

            map.put("TATIONCODE", tationcode);
            //修改票号信息，加上自定义数据
            Long ticketId = Long.parseLong(map.get("ITICKETTYPEID").toString());
            String szticketprintno = map.get("SZTICKETPRINTNO").toString();
            Edmtickettypetab ticket = (Edmtickettypetab) timeSharingDao.get(Edmtickettypetab.class,ticketId);
            String orid = map.get("SZSALESVOUCHERNO").toString();
            Hotelprovider hp = (Hotelprovider) timeSharingDao.get(Hotelprovider.class,ticket.getIscenicid());
            szticketprintno = changeSzprintNo(szticketprintno,orid,map.get("USID").toString(),ticket);
            map.put("SZTICKETPRINTNO",szticketprintno);
        }
        return MapToResultBean.toResultBean(list);
    }
    @Transactional(propagation=Propagation.REQUIRED,isolation = Isolation.READ_COMMITTED,rollbackFor=Exception.class)
    public Long savezhuceticketwin(Esbticketwintab etw) {
        if (etw.getIticketwinid() == 0) {
            Long maxid = timeSharingDao.getMaxPk("iticketwinid", "Esbticketwintab");
            etw.setIticketwinid(maxid + 1);
        }
        timeSharingDao.save(etw);
        return etw.getIticketwinid();
    }

    public Esbticketwintab getEsbticketwintabBymac(Long iscenicid, String mac) {
        mac = mac.toUpperCase();
        List list = timeSharingDao.findparams(
                "from Esbticketwintab where iscenicid=? and szipaddress=?",
                iscenicid, mac);
        if (list == null || list.size() == 0) {
            return null;
        } else {
            Esbticketwintab e = (Esbticketwintab) list.get(0);
            return e;
        }
    }

    public int changepassword(String userid, String oldpassword,
                              String newpassword) {
        int rc_id = 0;
        Esfemployeetab employee = null;
        List emplist = timeSharingDao.find("from Esfemployeetab where empid='"
                + userid + "'");
        employee = (Esfemployeetab) emplist.get(0);
        Encrypt encrypt = new Encrypt();
        oldpassword = encrypt.passwordEncrypt(oldpassword);
        if (oldpassword.equals(employee.getSzpassword())) {
            newpassword = encrypt.passwordEncrypt(newpassword);
            employee.setSzpassword(newpassword);
            timeSharingDao.update(employee);
            rc_id = 1;
        } else {
            rc_id = -1;
        }

        return rc_id;
    }

    /**
     * 取服务器上是FTP配置程序
     */
    public ResultBean getFtp(String iticketstationid) {
        ResultBean rs = new ResultBean();
        rs.setColumnCount(3);
        rs.setColumnNames(new String[] { "url", "dukou", "usid", "password" });
        List zwlist = timeSharingDao
                .find("from Sysparv5 v5 where v5.id.pmky='FTTP' and v5.id.pmcd='"
                        + iticketstationid + "' ");
        Sysparv5 v5 = null;
        if (zwlist == null || zwlist.size() == 0) {
            rs.addRow(new String[] { "0", "0", "0", "0" });// 没有对应闸机
        } else {
            for (int i = 0; i < zwlist.size(); i++) {
                v5 = (Sysparv5) zwlist.get(i);
                rs.addRow(new String[] { v5.getPmva(), v5.getPmvb(),
                        v5.getPmvc(), v5.getPmvd() });// 没有对应闸机
            }
        }
        return rs;
    }

    public ResultBean getForce() {
    	LOGGER.info("开始获取退票原因");
        ResultBean rs = new ResultBean();
        try {
			rs.setColumnCount(1);
			rs.setColumnNames(new String[] { "force" });
			List zwlist = timeSharingDao.find(" from Ospforcedrefundsettab");
			if (zwlist == null || zwlist.size() == 0) {
			    rs.addRow(new String[] { "涨水停排" });// 没有对应闸机
			} else {
			    for (int i = 0; i < zwlist.size(); i++) {
			        Ospforcedrefundsettab o = (Ospforcedrefundsettab) zwlist.get(i);
			        rs.addRow(new String[] { o.getSzforcedrefundname() });
			    }
			}
		} catch (Exception e) {
			LOGGER.info("获取退票原因接口异常："+StringUtil.toString_02(e));
		}
        return rs;
    }

    /**
     * 根据票号读取订单信息及该票的检票信息 Describe:
     *
     * @see ISaleCenterService#getTicketmesssage(String)
     * @param szticketprintno
     * @return
     * @author yuanchengjun Date:2011-11-22
     */
    public ResultBean getcheckTicketmesssage(String szticketprintno,String url) {
    	if(url==null || url.length()<1){
    		url=WebContant.GetKeyValue("CenterUrl");
    	}
        // 读取售出门票表信息
        List<Map> stslist = new ArrayList();
        // 2012-10-25 修改 李经锐 加
        // 售票时间，售票人（售票人的姓名）,包含子票（包含的有效子票,退了的不含），检票方式（如一票多人），有效天数，出票方式（如现场激活）字段显示
        try {
            Pattern p = Pattern.compile("^[0-9]+$");
            boolean b = p.matcher(szticketprintno.substring(1)).matches();
            if (b) {
                List elist = timeSharingDao
                        .find(" from Esbticketstationtab where szstationcode='"
                                + szticketprintno.substring(0, 1) + "'");
                if (elist == null || elist.size() == 0) {
                    szticketprintno = szticketprintno.toUpperCase();
                    stslist = timeSharingDao
                            .findBySqlToMap("select s.szsoldticketid,s.isalesvoucherdetailsid,s.szticketprintno,s.isalesvoucherid,s.iticketstationid,s.dtstartdate,s.dtenddate,e.sztickettypename,st.szsalesvoucherno,st.usid,c.corpname,c.lname,st.ihandler,e.iscenicid,em.szemployeename,s.byvalidity,s.iserialnum,dy.lname as daoyou,ga.szinnername,st.dtmakedate,case e.byusage when 0 then '一票一人'  when 1 then '一票多人' else '' end as byusage,e.validityday,e.bymaketicketway,sys1.pmva as maketicketway from Stssoldtickettab s,Edmtickettypetab e,Sysparv5 sys1,Stssalesvouchertab st left outer join custom dy on dy.usid=st.dyusid left outer join Galsourceregiontab ga on ga.iregionalid=st.iregionalid,Employee em,custom c where s.szticketprintno='"
                                    + szticketprintno
                                    + "' and s.itickettypeid=e.itickettypeid and st.isalesvoucherid=s.isalesvoucherid and st.iticketstationid=s.iticketstationid and em.iemployeeid=st.ihandler and c.usid=st.usid and sys1.pmky='CPFS'and sys1.pmcd=e.bymaketicketway order by s.dtmakedate desc");

                } else {
                    Esbticketstationtab esbticketstationtab = (Esbticketstationtab) elist
                            .get(0);
                    stslist = timeSharingDao
                            .findBySqlToMap("select s.szsoldticketid,s.isalesvoucherdetailsid,s.szticketprintno,s.isalesvoucherid,s.iticketstationid,s.dtstartdate,s.dtenddate,e.sztickettypename,st.szsalesvoucherno,st.usid,c.corpname,c.lname,st.ihandler,e.iscenicid,em.szemployeename,s.byvalidity,s.iserialnum,dy.lname  as daoyou,ga.szinnername,st.dtmakedate,case e.byusage when 0 then '一票一人'  when 1 then '一票多人' else '' end as byusage,e.validityday,e.bymaketicketway,sys1.pmva as maketicketway from Stssoldtickettab s,Edmtickettypetab e,Sysparv5 sys1,Stssalesvouchertab st left outer join custom dy on dy.usid=st.dyusid left outer join Galsourceregiontab ga on ga.iregionalid=st.iregionalid,Employee em,custom c where s.iserialnum="
                                    + szticketprintno.substring(1)
                                    + " and s.iticketstationid="
                                    + esbticketstationtab.getIticketstationid()
                                    + " and s.itickettypeid=e.itickettypeid and st.isalesvoucherid=s.isalesvoucherid and st.iticketstationid=s.iticketstationid and em.iemployeeid=st.ihandler and c.usid=st.usid and sys1.pmky='CPFS'and sys1.pmcd=e.bymaketicketway order by s.dtmakedate desc");
                    if (stslist == null || stslist.size() == 0) {
                        szticketprintno = szticketprintno.toUpperCase();
                        stslist = timeSharingDao
                                .findBySqlToMap("select s.szsoldticketid,s.isalesvoucherdetailsid,s.szticketprintno,s.isalesvoucherid,s.iticketstationid,s.dtstartdate,s.dtenddate,e.sztickettypename,st.szsalesvoucherno,st.usid,c.corpname,c.lname,st.ihandler,e.iscenicid,em.szemployeename,s.byvalidity,s.iserialnum,dy.lname as daoyou,ga.szinnername,st.dtmakedate,case e.byusage when 0 then '一票一人'  when 1 then '一票多人' else '' end as byusage,e.validityday,e.bymaketicketway,sys1.pmva as maketicketway from Stssoldtickettab s,Edmtickettypetab e,Sysparv5 sys1,Stssalesvouchertab st left outer join custom dy on dy.usid=st.dyusid left outer join Galsourceregiontab ga on ga.iregionalid=st.iregionalid,Employee em,custom c where s.szticketprintno='"
                                        + szticketprintno
                                        + "' and s.itickettypeid=e.itickettypeid and st.isalesvoucherid=s.isalesvoucherid and st.iticketstationid=s.iticketstationid and em.iemployeeid=st.ihandler and c.usid=st.usid and sys1.pmky='CPFS'and sys1.pmcd=e.bymaketicketway order by s.dtmakedate desc");

                    }
                }
            } else {
                szticketprintno = szticketprintno.toUpperCase();
                stslist = timeSharingDao
                        .findBySqlToMap("select s.szsoldticketid,s.isalesvoucherdetailsid,s.szticketprintno,s.isalesvoucherid,s.iticketstationid,s.dtstartdate,s.dtenddate,e.sztickettypename,st.szsalesvoucherno,st.usid,c.corpname,c.lname,st.ihandler,e.iscenicid,em.szemployeename,s.byvalidity,s.iserialnum,dy.lname as daoyou,ga.szinnername,st.dtmakedate,case e.byusage when 0 then '一票一人'  when 1 then '一票多人' else '' end as byusage,e.validityday,e.bymaketicketway,sys1.pmva as maketicketway from Stssoldtickettab s,Edmtickettypetab e,Sysparv5 sys1,Stssalesvouchertab st left outer join custom dy on dy.usid=st.dyusid left outer join Galsourceregiontab ga on ga.iregionalid=st.iregionalid,Employee em,custom c where s.szticketprintno='"
                                + szticketprintno
                                + "' and s.itickettypeid=e.itickettypeid and st.isalesvoucherid=s.isalesvoucherid and st.iticketstationid=s.iticketstationid and em.iemployeeid=st.ihandler and c.usid=st.usid and sys1.pmky='CPFS'and sys1.pmcd=e.bymaketicketway order by s.dtmakedate desc");
            }

        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        if (stslist == null || stslist.size() == 0) {
            return null;
        }
        for (Map map : stslist) {
            // 读取售出门票子表信息
            Long szsoldticketid = new Long(map.get("SZSOLDTICKETID").toString());
            Long isalesvoucherdetailsid = new Long(map.get(
                    "ISALESVOUCHERDETAILSID").toString());
            Long isalesvoucherid = new Long(map.get("ISALESVOUCHERID")
                    .toString());
            Long iticketstationid = new Long(map.get("ITICKETSTATIONID")
                    .toString());
            String szsalesvoucherno = map.get("SZSALESVOUCHERNO").toString();
            Long iscenicid = new Long(map.get("ISCENICID").toString());
            String daoyou = "";

            if (szsalesvoucherno.substring(8, 11).equals("000")) {
                if (WebContant.GetKeyValue("IsCenterUrl").equals("1")) {
                    try {
                    	Client client = JaxWsDynamicClientFactoryUtil.getCfxClientInstance(url, ServerNameConst.SALESERVICE);
        				Object[] objects = client.invoke("getT_orderbyorid", szsalesvoucherno, iscenicid);
        				ResultBean cano = (ResultBean) objects[0];
                        /*com.ectrip.ticket.centersale.client.ResultBean cano = ssl
                                .getT_orderbyorid(szsalesvoucherno, iscenicid);*/
                        for (int i = 0; i < cano.getRowsCount(); i++) {
                            daoyou = cano.getResult(i, "ORNM");
                        }
                        map.put("DAOYOU", daoyou);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    ResultBean cano = getT_orderbyorid(szsalesvoucherno,
                            iscenicid);
                    for (int i = 0; i < cano.getRowsCount(); i++) {
                        daoyou = cano.getResult(i, "ORNM");
                    }
                    map.put("DAOYOU", daoyou);
                }
            }
            List<Map> triplist = new ArrayList();
            try {
                triplist = timeSharingDao
                        .findBySqlToMap("select trip.tripname,s.dtbegindate from Stssoldticketsubtab s,Trip trip where s.iticketstationid="
                                + iticketstationid
                                + " and s.isalesvoucherid="
                                + isalesvoucherid
                                + " and s.szsoldticketid="
                                + szsoldticketid
                                + " and s.isalesvoucherdetailsid="
                                + isalesvoucherdetailsid
                                + " and s.tripid=trip.tripid and s.tripid>0 ");
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            if (triplist == null || triplist.size() == 0) {
                map.put("TRIPNAME", "");
                map.put("TRIPTIME", "");
            } else {
                for (Map map2 : triplist) {
                    map.put("TRIPNAME", map2.get("TRIPNAME"));
                    map.put("TRIPTIME", map2.get("DTBEGINDATE"));
                }
            }

            List<Map> vaildlist = new ArrayList();
            try {
                vaildlist = timeSharingDao
                        .findBySqlToMap("select edm.itickettypeid,edm.sztickettypename from Stssoldticketsubtab s,Edmtickettypetab edm where s.iticketstationid="
                                + iticketstationid
                                + " and s.isalesvoucherid="
                                + isalesvoucherid
                                + " and s.szsoldticketid="
                                + szsoldticketid
                                + " and s.isalesvoucherdetailsid="
                                + isalesvoucherdetailsid
                                + "  and s.iztickettypeid=edm.itickettypeid");
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            StringBuffer sbf = new StringBuffer();
            for (Map map5 : vaildlist) {
                sbf.append(map5.get("SZTICKETTYPENAME") + ",");
            }
            map.put("ZSZTICKETTYPENAME", sbf.toString());

            List<Map> zstslist = new ArrayList();
            try {
                zstslist = timeSharingDao
                        .findBySqlToMap("select g.szgardengatename,s.dtmakedate,s.zfseq  from Ticketchecklist s,Esbgardengatetab g where s.iticketstationid="
                                + iticketstationid
                                + " and s.isalesvoucherid="
                                + isalesvoucherid
                                + " and s.szsoldticketid="
                                + szsoldticketid
                                + " and s.isalesvoucherdetailsid="
                                + isalesvoucherdetailsid
                                + " and s.igardengateid=g.igardengateid and s.iscenicid=g.iscenicid order by s.dtmakedate　desc");
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            String zfseq = "";
            StringBuffer zdail = new StringBuffer();
            for (Map map1 : zstslist) {
                zdail.append(map1.get("SZGARDENGATENAME") + "&"
                        + map1.get("DTMAKEDATE") + "&" + map1.get("ZFSEQ")
                        + "#");
                if (map1.get("ZFSEQ") != null) {
                    zfseq = (String) map1.get("ZFSEQ");
                }
            }
            map.put("ZFSEQ", zfseq);
            String zdail1 = zdail.toString();
            if (!zdail1.equals("")) {
                zdail1 = zdail1.substring(0, zdail1.length() - 1);
            }
            map.put("ZDAIL", zdail1);
        }
        return MapToResultBean.toResultBean(stslist);
    }

    public String getoridbyticketprintno(String szticketprintno) {
        List<Map> stslist = new ArrayList();

        try {

            szticketprintno = szticketprintno.toUpperCase();
            stslist = timeSharingDao
                    .findBySqlToMap("select s.szsoldticketid,s.isalesvoucherdetailsid,s.szticketprintno,s.isalesvoucherid,s.iticketstationid,st.szsalesvoucherno,s.iserialnum from Stssoldtickettab s,Stssalesvouchertab st where s.szticketprintno='"
                            + szticketprintno
                            + "' and st.isalesvoucherid=s.isalesvoucherid and st.iticketstationid=s.iticketstationid order by s.dtmakedate desc");
            if (stslist == null || stslist.size() == 0) {
                List elist = timeSharingDao
                        .find(" from Esbticketstationtab where szstationcode='"
                                + szticketprintno.substring(0, 1) + "'");
                Esbticketstationtab esbticketstationtab = (Esbticketstationtab) elist
                        .get(0);
                stslist = timeSharingDao
                        .findBySqlToMap("select s.szsoldticketid,s.isalesvoucherdetailsid,s.szticketprintno,s.isalesvoucherid,s.iticketstationid,st.szsalesvoucherno,s.iserialnum from Stssoldtickettab s,Stssalesvouchertab st  where s.iserialnum="
                                + szticketprintno.substring(1)
                                + " and s.iticketstationid="
                                + esbticketstationtab.getIticketstationid()
                                + " and st.isalesvoucherid=s.isalesvoucherid and st.iticketstationid=s.iticketstationid order by s.dtmakedate desc");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        if (stslist == null || stslist.size() == 0) {
            return null;
        } else {
            Map map = stslist.get(0);
            return map.get("SZSALESVOUCHERNO").toString();
        }
    }

    public int updateprintbyprintno(String szsalesvoucherno,
                                    String szticketprintno, String printtype, Long iemployeeid,String newprintno) {
        List<Map> stslist = new ArrayList();
        if (printtype.equals("01") || printtype.equals("02")) {
            stslist = timeSharingDao
                    .find(" from Ticketprintlist where szticketprintno='"
                            + szticketprintno + "' and printtype='"
                            + printtype + "' and iemployeeid=" + iemployeeid
                            + " order by printid desc");
            if (stslist == null || stslist.size() == 0) {
                Ticketprintlist t = new Ticketprintlist();
                t.setIemployeeid(iemployeeid);
                t.setSzsalesvoucherno(szsalesvoucherno);
                t.setPrinttype(printtype);
                t.setSzticketprintno(szticketprintno);
                t.setNewszticketprintno(newprintno);
                t.setPrinttime(Tools.getNowString());
                t.setIsok(new Long(1));
                try {
                    Long printid = timeSharingDao.getSequenceId("PRINT_ID");
                    t.setPrintid(printid);
//                    timeSharingDao.save(t);
                    timeSharingService.save(t);
                } catch (Exception e1) {
                    e1.printStackTrace();
                }
                return 1;
            } else {
                Ticketprintlist t = (Ticketprintlist) stslist.get(0);
                t.setIsok(new Long(1));
                timeSharingDao.save(t);
                return 1;
            }
        } else {

            Ticketprintlist t = new Ticketprintlist();
            t.setIemployeeid(iemployeeid);
            t.setSzsalesvoucherno(szsalesvoucherno);
            t.setPrinttype(printtype);
            t.setSzticketprintno(szticketprintno);
            t.setNewszticketprintno(newprintno);
            t.setPrinttime(Tools.getNowString());
            t.setIsok(new Long(1));
            try {
                Long printid = timeSharingDao.getSequenceId("PRINT_ID");
                t.setPrintid(printid);
                timeSharingDao.save(t);
            } catch (Exception e1) {
                e1.printStackTrace();
            }

            //更新票号
            if(!StringUtils.isBlank(newprintno) && !newprintno.equals(szticketprintno)){
                List list = timeSharingDao.find("from Stssoldtickettab where szticketprintno = '"+szticketprintno+"' ");
                if(list != null && !list.isEmpty()){
                    Stssoldtickettab stss = (Stssoldtickettab) list.get(0);
                    stss.setSzticketprintno(newprintno);
                    timeSharingDao.update(stss);
                }
            }
            return 1;
        }

    }

    public ResultBean getsysparcs(String pmky, String pmcd) {
        List<Map> stslist = new ArrayList();

        try {
            if (pmky.toUpperCase().equals("ZFFS")) {
                stslist = timeSharingDao
                        .findBySqlToMap("select * from Sysparv5 where pmky='"
                                + pmky.toUpperCase() + "' and isb=1");
            } else {
                stslist = timeSharingDao
                        .findBySqlToMap("select * from Sysparv5 where pmky='"
                                + pmky.toUpperCase() + "' and pmcd in ('"
                                + pmcd + "')");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(stslist);
    }

    public ResultBean getsysparcs(String pmky) {
        List<Map> stslist = new ArrayList();
        try {
            stslist = timeSharingDao
                    .findBySqlToMap("select * from Sysparv5 where pmky='"
                            + pmky.toUpperCase() + "' and pmcd!='****'");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(stslist);
    }

    public ResultBean querynotprint(Long iemployeeid,String url) {
    	if(url==null || url.length()<1){
    		url=WebContant.GetKeyValue("CenterUrl");
    	}
        List<Map> stslist = new ArrayList();

        stslist = timeSharingDao
                .find(" from Ticketprintlist where  iemployeeid="
                        + iemployeeid
                        + " and  ( printtype='01' or printtype='02')  order by printid desc");
        if (stslist == null || stslist.size() == 0) {
            return null;
        } else {
            Ticketprintlist t = (Ticketprintlist) stslist.get(0);
            if (t.getIsok() == 1) {
                return null;
            } else {
                List l1 = timeSharingDao
                        .find("from Stssalesvouchertab where szsalesvoucherno='"
                                + t.getSzsalesvoucherno() + "'");
                Stssalesvouchertab s = (Stssalesvouchertab) l1.get(0);
                String ornm = "";
                String szregionalname = "";
                String corpname = "";
                if (t.getSzsalesvoucherno().substring(8, 11).equals("000")) {
                    // 网络订单
                    try {/*
                        javax.xml.rpc.Service service = null;
                        java.net.URL endpointURL = new java.net.URL("http://"
                                + url
                                + "/services/centersaleService?wsdl");
                        CentersaleServiceSoapBindingStub ssl = new CentersaleServiceSoapBindingStub(
                                endpointURL, service);
                        ssl.setMaintainSession(true);
                        com.ectrip.ticket.centersale.client.ResultBean cano = ssl
                                .getT_orderbyorid(t.getSzsalesvoucherno(),
                                        s.getIscenicid());
                        if (cano.getRowsCount() > 0) {
                            ornm = cano.getResult(0, "ORNM");
                            szregionalname = cano
                                    .getResult(0, "SZREGIONALNAME");
                            corpname = cano.getResult(0, "CORPNAME");
                        } else {
                            ornm = "";
                            szregionalname = "";
                            corpname = "";
                        }
                    */} catch (Exception e1) {
                        ornm = "";
                        szregionalname = "";
                        corpname = "";
                    }
                }
                if (t.getPrinttype().equals("01")) {
                    // 未完成出票订单打印

                    String sql = " select e.szsoldticketid,e.isalesvoucherdetailsid,e.isalesvoucherid,e.iticketstationid,e.itickettypeid,e.szticketprintno,e.iserialnum,e.icrowdkindid,e.dtstartdate,e.dtenddate,e.iplayerperticket,ed.szcrowdkindname,edt.sztickettypename||'('||ed.szcrowdkindname||')' as sztickettypename,ebs.szbusinessname,e.mactualsaleprice,s.szsalesvoucherno,tp.isok from Stssoldtickettab e,Edpcrowdkindtab ed,Edmtickettypetab edt,Edmbusinesstab ebs,Stssalesvouchertab s,Ticketprintlist tp where e.isalesvoucherid="
                            + s.getId().getIsalesvoucherid()
                            + " and e.iticketstationid="
                            + s.getId().getIticketstationid()
                            + " and e.isalesvoucherid=s.isalesvoucherid and e.iticketstationid=s.iticketstationid  and ed.icrowdkindid=e.icrowdkindid and edt.itickettypeid=e.itickettypeid and ebs.ibusinessid=e.ibusinessid and tp.szsalesvoucherno=s.szsalesvoucherno and tp.szticketprintno=e.szticketprintno and tp.printtype='01' and tp.isok=0 order by e.iserialnum";

                    List<Map> list = new ArrayList();
                    try {
                        list = timeSharingDao.findBySqlToMapnocolsesession(sql);
                    } catch (Exception e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }

                    for (Map map : list) {
                        Long isalesvoucherdetailsid = new Long(map.get(
                                "ISALESVOUCHERDETAILSID").toString());
                        String sql1 = " select sts.iztickettypeid,sts.tripid,sts.dtbegindate as dtstartdate,sts.dtenddate as dtenddate,edt.sztickettypename,t.tripname from Stssoldticketsubtab sts left outer join trip t on t.tripid=sts.tripid,Edmtickettypetab edt where isalesvoucherid="
                                + map.get("ISALESVOUCHERID").toString()
                                + " and isalesvoucherdetailsid="
                                + map.get("ISALESVOUCHERDETAILSID").toString()
                                + " and iticketstationid="
                                + map.get("ITICKETSTATIONID").toString()
                                + " and szsoldticketid="
                                + map.get("SZSOLDTICKETID").toString()
                                + " and sts.iztickettypeid=edt.itickettypeid and sts.isvalid=1";
                        List<Map> list1 = new ArrayList();

                        try {
                            list1 = timeSharingDao.findBySqlToMap(sql1);
                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        String zdail = "";
                        String iztickettypeid = "";
                        for (Map map1 : list1) {
                            if (!iztickettypeid.equals(map1.get(
                                    "IZTICKETTYPEID").toString())) {
                                if (new Long(map1.get("TRIPID").toString()) > 0) {

                                    zdail = zdail
                                            + map1.get("SZTICKETTYPENAME")
                                            .toString()
                                            + "&"
                                            + map1.get("TRIPID").toString()
                                            + "&"
                                            + map1.get("TRIPNAME").toString()
                                            + "&"
                                            + map1.get("DTSTARTDATE")
                                            .toString() + "&"
                                            + map1.get("DTENDDATE").toString()
                                            + "@";
                                } else {
                                    zdail = zdail
                                            + map1.get("SZTICKETTYPENAME")
                                            .toString()
                                            + "&"
                                            + "0"
                                            + "&"
                                            + ""
                                            + "&"
                                            + map1.get("DTSTARTDATE")
                                            .toString() + "&"
                                            + map1.get("DTENDDATE").toString()
                                            + "@";
                                }
                                iztickettypeid = map1.get("IZTICKETTYPEID")
                                        .toString();
                            }
                        }
                        if (!zdail.equals("")) {
                            zdail = zdail.substring(0, zdail.length() - 1);
                        }
                        map.put("ZDAIL", zdail);
                        map.put("ORNM", ornm);
                        map.put("SZREGIONALNAME", szregionalname);
                        map.put("CORPNAME", corpname);
                    }
                    return MapToResultBean.toResultBean(list);

                } else {
                    // 未完成退票订单打印
					/*
					 * Stssalesvouchertab ys = (Stssalesvouchertab)
					 * timeSharingDao.get( Stssalesvouchertab.class, new
					 * StssalesvouchertabId(s.getIssalesvoucherid(),
					 * ys.getIsticketstationid()));
					 */
                    List list2 = new ArrayList();
                    String sql = "select e.szsoldticketid,e.isalesvoucherdetailsid,e.isalesvoucherid,e.iticketstationid,e.itickettypeid,szticketprintno,e.iserialnum,e.icrowdkindid,e.dtstartdate,e.dtenddate,e.iplayerperticket,ed.szcrowdkindname,edt.sztickettypename||'('||ed.szcrowdkindname||')' as sztickettypename,ebs.szbusinessname,e.mactualsaleprice,tp.isok from Stssoldtickettab e, Edpcrowdkindtab ed,Edmtickettypetab edt,Edmbusinesstab ebs,Ticketprintlist tp where e.isalesvoucherid="
                            + s.getIssalesvoucherid()
                            + " and e.iticketstationid="
                            + s.getIsticketstationid()
                            + " and ed.icrowdkindid=e.icrowdkindid and edt.itickettypeid=e.itickettypeid and ebs.ibusinessid=e.ibusinessid and   szticketprintno in (select szstartserial from Stssalesvoucherdetailstab sz where sz.isalesvoucherid="
                            + s.getId().getIsalesvoucherid()
                            + " and sz.iticketstationid="
                            + s.getId().getIticketstationid()
                            + ") and tp.szsalesvoucherno='"
                            + s.getSzsalesvoucherno()
                            + "' and tp.printtypr='02' and tp.szticketprintno=e.szticketprintno  and tp.isok=0 order by e.iserialnum";
                    List<Map> list = new ArrayList();
                    try {
                        list = timeSharingDao.findBySqlToMap(sql);
                    } catch (Exception e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }

                    for (Map map : list) {
                        Long isalesvoucherdetailsid = new Long(map.get(
                                "ISALESVOUCHERDETAILSID").toString());
                        String sql1 = " select sts.iztickettypeid,sts.tripid,sts.dtbegindate as dtstartdate,sts.dtenddate as dtenddate,edt.sztickettypename,t.tripname from Stssoldticketsubtab sts left outer join trip t on t.tripid=sts.tripid,Edmtickettypetab edt where isalesvoucherid="
                                + map.get("ISALESVOUCHERID").toString()
                                + " and isalesvoucherdetailsid="
                                + map.get("ISALESVOUCHERDETAILSID").toString()
                                + " and iticketstationid="
                                + map.get("ITICKETSTATIONID").toString()
                                + " and szsoldticketid="
                                + map.get("SZSOLDTICKETID").toString()
                                + " and sts.iztickettypeid=edt.itickettypeid and sts.isvalid=1";
                        List<Map> list1 = new ArrayList();
                        try {
                            list1 = timeSharingDao.findBySqlToMap(sql1);
                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        String zdail = "";
                        String iztickettypeid = "";

                        if (list1 != null && list1.size() > 0) {
                            for (Map map1 : list1) {
                                if (!iztickettypeid.equals(map1.get(
                                        "IZTICKETTYPEID").toString())) {
                                    if (new Long(map1.get("TRIPID").toString()) > 0) {
                                        zdail = zdail
                                                + map1.get("SZTICKETTYPENAME")
                                                .toString()
                                                + "&"
                                                + map1.get("TRIPID").toString()
                                                + "&"
                                                + map1.get("TRIPNAME")
                                                .toString()
                                                + "&"
                                                + map1.get("DTSTARTDATE")
                                                .toString()
                                                + "&"
                                                + map1.get("DTENDDATE")
                                                .toString() + "@";
                                    } else {
                                        zdail = zdail
                                                + map1.get("SZTICKETTYPENAME")
                                                .toString()
                                                + "&"
                                                + "0"
                                                + "&"
                                                + ""
                                                + "&"
                                                + map1.get("DTSTARTDATE")
                                                .toString()
                                                + "&"
                                                + map1.get("DTENDDATE")
                                                .toString() + "@";
                                    }
                                    iztickettypeid = map1.get("IZTICKETTYPEID")
                                            .toString();
                                }
                            }
                            if (!zdail.equals("")) {
                                zdail = zdail.substring(0, zdail.length() - 1);
                            }
                            map.put("ZDAIL", zdail);
                            map.put("PRINTTYPE", "02");// 表示退票打印
                            list2.add(map);
                        }
                    }
                    return MapToResultBean.toResultBean(list);
                }

            }
        }

    }

    /**
     * 备用，已经放弃
     *
     * @param salesvouchers
     *            凭证MODEL主表
     * @param salesvoucherdetails
     *            凭证明细表
     * @param comticketsalesdetails
     *            检票明细
     * @param maxid
     *            最大编号
     * @param szsalesvoucherno
     *            凭证号
     * @return
     * @throws SQLException
     */
    @Deprecated
    public ResultBean saveorder405(String salesvouchers,
                                   String salesvoucherdetails, String comticketsalesdetails,
                                   Long maxid, String szsalesvoucherno) throws SQLException {
        // 开始保存订单
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        // 解出Stssalesvouchertab

        String[] salesvoucher = salesvouchers.split("&");
        Long iscenicid = new Long(salesvoucher[0]);
        Long iticketwinid = new Long(salesvoucher[1]);
        Long ibusinessid = new Long(salesvoucher[2]);
        Long iemployeeid = new Long(salesvoucher[3]);// 出票员
        Double iaccountreceivable = new Double(salesvoucher[5]);
        Double iacceptmoney = new Double(salesvoucher[4]);
        if (iacceptmoney < iaccountreceivable) {
            rs.addRow(new String[] { "false", "实收款应该大于等于应收金额" });
            return rs;
        }
        Double igivechange = new Double(salesvoucher[6]);
        String usid = salesvoucher[7];
        Long forceemid = new Long(salesvoucher[8]);
        String pzlb = salesvoucher[9];// 默认 ０１ 销售 ０４ 补入
        String zffs = "00";
        if (salesvoucher.length >= 11) {
            zffs = salesvoucher[10];// 支付方式
        }
        Stssalesvouchertab s = new Stssalesvouchertab();
        Esbscenicareatab scenic = (Esbscenicareatab) timeSharingDao.get(
                Esbscenicareatab.class, iscenicid);
        s.setIscenicid(iscenicid);
        s.setIticketwinid(iticketwinid);
        s.setIbusinessid(ibusinessid);
        s.setIhandler(iemployeeid);
        s.setIpayeer(iemployeeid);
        s.setImaker(forceemid);
        s.setIauditor(iemployeeid);
        s.setIaccountreceivable(iaccountreceivable);
        s.setIacceptmoney(iacceptmoney);
        s.setIgivechange(igivechange);

        String today = Tools.getDays();
        String daytime = Tools.getDayTimes();
        s.setIyear(new Long(today.substring(0, 4)));
        s.setImonth(new Long(today.substring(5, 7)));
        s.setIday(new Long(today.substring(8, 10)));
        s.setDtmakedate(daytime);
        s.setDtauditdate(today);
        s.setUsid(usid);
        s.setDyusid("daoyou");
        s.setBisintegral(new Long(0));
        s.setByprintinvoice(new Long(0));
        s.setBysplitway(new Long(2));
        s.setBisreturn(new Long(1));
        s.setBysalesvouchertype(pzlb);
        s.setBypostrecord(new Long(0));
        s.setBysalesvoucherstate(new Long(1));
        s.setBispay(new Long(0));
        s.setBispayee(new Long(0));
        Esbticketwintab e = (Esbticketwintab) timeSharingDao.get(
                Esbticketwintab.class, s.getIticketwinid());
        StssalesvouchertabId id = new StssalesvouchertabId();
        id.setIticketstationid(e.getIticketstationid());
        id.setIsalesvoucherid(maxid);
        s.setId(id);
        Esbticketstationtab esbticketstation = (Esbticketstationtab) timeSharingDao
                .get(Esbticketstationtab.class, e.getIticketstationid());

        s.setSzsalesvoucherno(szsalesvoucherno);
        // 目前结算只有一种方式 （现金）直接生成结算数据
        Stssalessettlementtab st = new Stssalessettlementtab();
        StssalessettlementtabId sid = new StssalessettlementtabId();
        sid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
        sid.setIticketstationid(s.getId().getIticketstationid());
        sid.setIsalessettlementid(new Long(1));
        st.setId(sid);
        st.setSettlementdata(today);
        st.setSettlementtime(daytime.substring(11));
        st.setIsettlementid(zffs);
        st.setMsettlementmoney(iacceptmoney);
        st.setIversion(new Long(1));
        st.setDtmakedate(daytime);

        List detaillist = new ArrayList();
        List cdetaillist = new ArrayList();
        String[] salesvoucherdetail = salesvoucherdetails.split(":");
        double smont = 0;
        Long szsoldticketid = new Long(1);
        for (int i = 0; i < salesvoucherdetail.length; i++) {
            String isalesvoucherdetail = salesvoucherdetail[i];
            String[] detail = isalesvoucherdetail.split("&");
            long isalesvoucherdetailsid = new Long(detail[0]);
            Long icrowdkindpriceid = new Long(detail[1]);
            Long itickettypeid = new Long(detail[2]);
            Long iticketnum = new Long(detail[3]);
            String dtstartdate = detail[4];
            String dtenddate = detail[5];
            String bymaketicketway = "00";
            String bymediatype = "00";
            String szticketprintno = "";
            Long piserialnum = new Long(0);
            if (detail.length > 6) {
                bymaketicketway = detail[6];
                bymediatype = detail[7];
            }
            if (bymaketicketway.equals("01")) {
                szticketprintno = detail[8];
                // piserialnum = new Long(szticketprintno.substring(6, 12));
            }
            Edmcrowdkindpricetab edmcrowdkindpricetab = (Edmcrowdkindpricetab) timeSharingDao
                    .get(Edmcrowdkindpricetab.class, icrowdkindpriceid);
            Double mactualsaleprice = edmcrowdkindpricetab
                    .getMactualsaleprice();
            Double meventmoney = new Double(mactualsaleprice.doubleValue()
                    * iticketnum.doubleValue());
            smont = smont + meventmoney;
            Stssalesvoucherdetailstab sd = new Stssalesvoucherdetailstab();
            StssalesvoucherdetailstabId sdid = new StssalesvoucherdetailstabId();
            sdid.setIsalesvoucherdetailsid(isalesvoucherdetailsid);
            sdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
            sdid.setIticketstationid(s.getId().getIticketstationid());
            sd.setId(sdid);
            sd.setIticketwinid(s.getIticketwinid());
            sd.setIcrowdkindpriceid(icrowdkindpriceid);
            sd.setItickettypeid(itickettypeid);
            sd.setIplayerperticket(new Long(1));// 人/张
            sd.setIticketnum(iticketnum);// 张数
            sd.setIticketplayer(iticketnum);// 人次
            sd.setDtstartdate(dtstartdate);
            sd.setDtenddate(dtenddate);
            sd.setIstartid(new Long(0));
            sd.setIendid(new Long(0));
            sd.setSzstartserial("0");
            sd.setSzendserial("0");
            sd.setIoffersschemeid(new Long(0));
            sd.setIamount(iticketnum);
            sd.setIpresentnums(new Long(0));
            sd.setIderatenums(new Long(0));
            sd.setIfactnum(new Long(0));
            sd.setIuseablenessnum(iticketnum);// 使用数量
            sd.setMactualsaleprice(mactualsaleprice);// 实际售价
            sd.setMeventmoney(meventmoney);// 实际发生金额
            sd.setMderatemoney(new Double(0));// 减免金额
            sd.setMpresentmoney(new Double(0));// 赠送金额
            sd.setMnominalfee(new Double(0));// 工本费
            sd.setMdeposit(new Double(0));
            sd.setMhandcharge(new Double(0));
            sd.setByconsumetype("00");
            sd.setIconsumenum(new Double(0));
            sd.setMtotalamount(meventmoney);
            sd.setItotalnumber(iticketnum);
            sd.setItotalminutes(new Long(0));
            sd.setByisout(new Long(1));
            sd.setDtmakedate(Tools.getDayTimes());
            sd.setIversion(new Long(0));
            detaillist.add(sd);

            Edmtickettypetab eticket = (Edmtickettypetab) timeSharingDao.get(
                    Edmtickettypetab.class, itickettypeid);
            // 添加售出门票表

            for (int j = 1; j <= sd.getIticketnum().intValue(); j++) {
                Stssoldtickettab stsv = new Stssoldtickettab();
                StssoldtickettabId stsvid = new StssoldtickettabId();
                stsvid.setIsalesvoucherid(sd.getId().getIsalesvoucherid());
                stsvid.setIticketstationid(sd.getId().getIticketstationid());
                stsvid.setIsalesvoucherdetailsid(sd.getId()
                        .getIsalesvoucherdetailsid());
                stsvid.setSzsoldticketid(szsoldticketid);
                szsoldticketid = szsoldticketid + 1;
                stsv.setId(stsvid);
                stsv.setIscenicid(s.getIscenicid());
                stsv.setIcrowdkindid(edmcrowdkindpricetab.getIcrowdkindid());
                stsv.setItickettypeid(sd.getItickettypeid());
                stsv.setUsid(s.getUsid());
                stsv.setIbusinessid(s.getIbusinessid());
                stsv.setDyusid(s.getDyusid());
                stsv.setIplayerperticket(sd.getIplayerperticket());// 人次数
                stsv.setDtstartdate(sd.getDtstartdate());
                stsv.setDtenddate(sd.getDtenddate());
                stsv.setMhandcharge(new Double(0));
                stsv.setByvalidity("00");
                stsv.setDtmakedate(daytime);
                stsv.setBymaketicketway(bymaketicketway);
                if (bymaketicketway.equals("00")) {
                    // 现场打印门票
                    // 条码if
                    List<Map> iserialnumlist = new ArrayList();
                    try {
                        iserialnumlist = timeSharingDao
                                .findBySqlToMapnocolsesession("select ticketid_sequence.nextval  from dual");
                    } catch (Exception e1) {
                        // TODO Auto-generated catch block
                        e1.printStackTrace();
                    }
                    Long iserialnum = new Long(
                            (((Map) iserialnumlist.get(0)).get("NEXTVAL"))
                                    .toString());
                    stsv.setIserialnum(iserialnum);
                    String newmaxorno = Tools.ConvertTo36Text(iserialnum, 0);
                    StringBuffer printno = new StringBuffer();
                    printno.append(esbticketstation.getSzstationcode());
                    printno.append(scenic.getSzsceniccode());
                    printno.append(eticket.getSztickettypecode());
                    if (newmaxorno.length() < 6) {
                        for (int b = 0; b < 6 - newmaxorno.length(); b++) {
                            printno.append("0");
                        }
                    }

                    printno.append(newmaxorno);
                    String szprintno = Tools.ticketMakeMd5(printno.toString());
                    stsv.setSzticketprintno(szprintno);
                } else if (bymaketicketway.equals("01")) {
                    String[] sperialnum = szticketprintno.split("[|]");
                    String szprintnocode = sperialnum[j - 1];
                    String tsql = " from Edmticketnoruletab rule where rule.byisuse=1 and rule.iscenicid="
                            + iscenicid;
                    List lst = this.timeSharingDao.find(tsql);
                    if (lst != null && lst.size() > 0) {
                        Edmticketnoruletab ticketrule = (Edmticketnoruletab) lst
                                .get(0);
                        // 2012-10-24修改 李经锐
                        String lsh = szprintnocode.substring(
                                ticketrule.getIntons2()
                                        + ticketrule.getItickettypecodepos(),
                                ticketrule.getIntons2()
                                        + ticketrule.getItickettypecodepos()
                                        + ticketrule.getIserialnolen());
                        stsv.setIserialnum(Tools.Text36ToConvert(lsh));// 流水号
                    }
                    stsv.setSzticketprintno(sperialnum[j - 1]);

                }
                stsv.setMremainmoney(new Double(0));
                stsv.setMpresentmoney(new Double(0));
                stsv.setMactualsaleprice(sd.getMactualsaleprice());
                stsv.setIpresentnum(new Long(0));
                stsv.setIremainnum(new Long(1));// 剩余数量
                stsv.setMnominalfee(new Double(0));
                stsv.setMdeposit(new Double(0));
                stsv.setByticketpurpose("00");
                stsv.setBisrefundbalance(new Long(1));
                stsv.setByactivation("02");
                cdetaillist.add(stsv);

            }
        }
        if (iaccountreceivable != smont) {
            rs.addRow(new String[] { "false",
                    "明细金额之和" + smont + "与总金额" + iaccountreceivable + "不等" });
            return rs;
        }
        // System.out.println("解出子订单结算明细list：Stssalesvoucherdetailstab");
        String[] comticketsalesdetail = comticketsalesdetails.split(":");
        List zdetaillist = new ArrayList();
        List cdzetaillist = new ArrayList();
        long n = 0;
        Long ss = new Long(0);
        Long oisplitamount = new Long(0);
        long yisalsvoucherdetailid = 0;
        for (int i = 0; i < comticketsalesdetail.length; i++) {

            String[] zdetail = comticketsalesdetail[i].split("&");
            Stscomticketsalesdetailstab zstd = new Stscomticketsalesdetailstab();
            StscomticketsalesdetailstabId zstdid = new StscomticketsalesdetailstabId();
            Long isalesvoucherdetailsid = new Long(zdetail[0]);
            Long icrowdkindpriceid = new Long(zdetail[1]);
            Edmcrowdkindpricetab edprice = (Edmcrowdkindpricetab) timeSharingDao
                    .get(Edmcrowdkindpricetab.class, icrowdkindpriceid);
            Long itickettypeid = new Long(zdetail[2]);
            Long iztickettypeid = new Long(zdetail[3]);
            Long isplitamount = new Long(zdetail[4]);
            Long tripid = new Long(zdetail[5]);
            Long ivenueareaid = new Long(zdetail[6]);
            Long ivenueseatsid = new Long(zdetail[7]);
            String dtstartdate = zdetail[8];
            String dtenddate = zdetail[9];
            zstdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
            zstdid.setIticketstationid(s.getId().getIticketstationid());
            zstdid.setIsalesvoucherdetailsid(isalesvoucherdetailsid);
            zstd.setIcrowdkindpriceid(icrowdkindpriceid);
            zstd.setItickettypeid(itickettypeid);
            zstd.setIztickettypeid(iztickettypeid);
            zstd.setMhandcharge(new Double(0));
            zstd.setDtmakedate(daytime);
            Prdtripvenuemanage p = null;
            if (tripid.longValue() > 0) {
                List plist = timeSharingDao
                        .find(" from Prdtripvenuemanage where tripid=" + tripid
                                + " and itickettypeid=" + iztickettypeid
                                + " and startdata<='" + dtstartdate
                                + "' and enddata>='" + dtstartdate + "'");
                p = (Prdtripvenuemanage) plist.get(0);
                zstd.setTripid(tripid);
                zstd.setDtstartdate(dtstartdate + " " + p.getStarttime()
                        + ":00");
                zstd.setDtenddate(dtstartdate + " " + p.getEndtime() + ":00");
                // 判断竹筏时间是否过期
                Calendar now = Calendar.getInstance(TimeZone
                        .getTimeZone("GMT+08:00"));
                SimpleDateFormat df = new SimpleDateFormat(
                        "yyyy-MM-dd HH:mm:ss");
                try {
                    Date d2 = df.parse(zstd.getDtenddate());
                    Calendar endcalendar = Calendar.getInstance();
                    endcalendar.setTime(d2);
                    // 补入不用判断竹筏是否过期
                    if (pzlb.equals("01")) {
                        if (now.after(endcalendar)) {
                            rs.addRow(new String[] { "false", "竹筏趟次过期，不能销售" });
                            return rs;
                        }
                    }
                } catch (ParseException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }

                if (ivenueareaid == 0) {
                    zstd.setIvenueareaid(p.getIvenueareaid());
                    zstd.setIvenueid(p.getIvenueid());
                } else {
                    zstd.setIvenueareaid(ivenueareaid);
                    zstd.setIvenueid(p.getIvenueid());
                }
                zstd.setIvenueseatsid(ivenueseatsid);
            } else {
                zstd.setTripid(tripid);
                zstd.setIvenueareaid(new Long(0));
                zstd.setIvenueid(new Long(0));
                zstd.setIvenueseatsid(new Long(0));
                zstd.setDtstartdate(dtstartdate + " 00:00:00");
                zstd.setDtenddate(dtenddate + " 23:59:59");
            }
            zstd.setIversion(new Long(0));
            List list = timeSharingDao
                    .find(" from Edmticketcomposepricetab where id.icrowdkindpriceid="
                            + icrowdkindpriceid
                            + " and itickettypeid='"
                            + iztickettypeid + "'");
            if (list == null || list.size() == 0) {
                rs.addRow(new String[] { "false",
                        "票价编号为" + icrowdkindpriceid + "无子票价格" });
                return rs;
            } else {
                Edmticketcomposepricetab edt = (Edmticketcomposepricetab) list
                        .get(0);
                zstdid.setIcomticketsalesdetailsid(edt.getId()
                        .getIticketcomposepriceid());
                zstd.setId(zstdid);
                zstd.setIsplitamount(isplitamount * edt.getNumb());
                zstd.setMsplitprice(edt.getMactualsaleprice());
                zstd.setMsplitmoney(edt.getMactualsaleprice() * edt.getNumb()
                        * isplitamount);
                zdetaillist.add(zstd);
                List opwwlist = timeSharingDao
                        .find(" from Opwwicketsettab where itickettypeid="
                                + itickettypeid + " and izticktypeid="
                                + iztickettypeid);
                if (yisalsvoucherdetailid == 0) {
                    yisalsvoucherdetailid = isalesvoucherdetailsid.longValue();
                    oisplitamount = isplitamount;
                } else {
                    if (yisalsvoucherdetailid != isalesvoucherdetailsid
                            .longValue()) {
                        ss = ss + oisplitamount;
                        oisplitamount = isplitamount;
                        yisalsvoucherdetailid = isalesvoucherdetailsid
                                .longValue();
                    }
                }
                if (opwwlist.size() == 0) {
                    Edmtickettypetab edticket = (Edmtickettypetab) timeSharingDao
                            .get(Edmtickettypetab.class, itickettypeid);
                    rs.addRow(new String[] { "false",
                            edticket.getSztickettypecode() + "的检票园门数据不全" });
                    return rs;
                }
                for (int k = 0; k < opwwlist.size(); k++) {
                    Opwwicketsettab opww = (Opwwicketsettab) opwwlist.get(k);
                    for (int m = 1; m <= isplitamount; m++) {
                        Stssoldticketsubtab stss = new Stssoldticketsubtab();
                        StssoldticketsubtabId stssid = new StssoldticketsubtabId();
                        stssid.setIticketstationid(s.getId()
                                .getIticketstationid());
                        stssid.setSzsoldticketid(new Long(ss + m));
                        stssid.setSzsoldticketsubid(new Long(n + 1));
                        n = n + 1;
                        stssid.setIsalesvoucherid(s.getId()
                                .getIsalesvoucherid());
                        stssid.setIsalesvoucherdetailsid(isalesvoucherdetailsid);
                        stss.setId(stssid);
                        stss.setIgardengateid(opww.getIgardengateid());
                        stss.setIscenicid(s.getIscenicid());
                        stss.setItickettypeid(itickettypeid);
                        stss.setIztickettypeid(iztickettypeid);
                        stss.setBychecktype(new Long(0));
                        stss.setByconsumemode(opww.getByconsumemode());
                        stss.setIpasstimes(opww.getIlimittotaltimes());
                        stss.setIpassedtimes(new Long(0));
                        stss.setMsingletimes(opww.getMsingletimes());
                        stss.setMlimitconsume(new Double(0));
                        stss.setMsingleconsume(new Double(0));
                        stss.setMconsumed(new Double(0));
                        stss.setByisout(new Long(1));
                        stss.setIsvalid(new Long(1));
                        stss.setDtmakedate(daytime);
                        stss.setBylastcheckdir(new Long(0));
                        stss.setIcrowdkindid(edprice.getIcrowdkindid());
                        stss.setTripid(tripid);
                        if (tripid.longValue() > 0) {
                            stss.setDtbegindate(dtstartdate + " "
                                    + p.getStarttime() + ":00");
                            stss.setDtenddate(dtenddate + " " + p.getEndtime()
                                    + ":00");
                        } else {
                            stss.setDtbegindate(dtstartdate + " " + "00:00:00");
                            stss.setDtenddate(dtenddate + " " + "23:59:59");
                        }
                        cdzetaillist.add(stss);
                    }
                }

            }
        }
        timeSharingDao.save(s);
        timeSharingDao.save(st);
        for (int i = 0; i < detaillist.size(); i++) {
            Stssalesvoucherdetailstab sd = (Stssalesvoucherdetailstab) detaillist
                    .get(i);
            timeSharingDao.save(sd);
        }
        Sysparv5 sv5 = (Sysparv5) timeSharingDao.get(Sysparv5.class,
                new Sysparv5Id("PRCS", "01"));
        String printcs = "0";
        if (sv5 != null) {
            printcs = sv5.getPmva();
        }
        for (int i = 0; i < cdetaillist.size(); i++) {
            Stssoldtickettab stsv = (Stssoldtickettab) cdetaillist.get(i);
            timeSharingDao.save(stsv);
            if (stsv.getBymaketicketway().equals("00")) {
                if (pzlb.equals("01")) {
                    if (printcs.equals("1")) {
                        Ticketprintlist t = new Ticketprintlist();
                        t.setSzsalesvoucherno(s.getSzsalesvoucherno());
                        t.setIemployeeid(iemployeeid);
                        t.setPrinttype("01");
                        t.setSzticketprintno(stsv.getSzticketprintno());
                        t.setPrinttime(daytime);
                        t.setIsok(new Long(0));
                        try {
                            Long printid = timeSharingDao.getSequenceId("PRINT_ID");
                            t.setPrintid(printid);
                            timeSharingDao.save(t);
                        } catch (Exception e1) {
                            // TODO Auto-generated catch block
                            e1.printStackTrace();
                            System.out.println(e1.getMessage());
                        }
                    }
                }
            }
        }
        for (int i = 0; i < zdetaillist.size(); i++) {
            Stscomticketsalesdetailstab zstd = (Stscomticketsalesdetailstab) zdetaillist
                    .get(i);
            timeSharingDao.save(zstd);
        }
        for (int i = 0; i < cdzetaillist.size(); i++) {
            Stssoldticketsubtab stss = (Stssoldticketsubtab) cdzetaillist
                    .get(i);
            timeSharingDao.save(stss);
        }

        // 预制票 售票时 操作个人结存明细信息
        boolean des = addPersonaldetails(iemployeeid, salesvoucherdetail);
        if (des) {
            rs.addRow(new String[] { "false", "售票员手中没此预售的票号或者售出票号与售票员手中票号冲突" });
            return rs;
        }

        rs.addRow(new String[] { "true",
                s.getId().getIsalesvoucherid().toString() });
        return rs;
    }

    public Edmtickettypetab getEdmtickettypetab(Long itickettypeid) {
        Edmtickettypetab e = (Edmtickettypetab) timeSharingDao.get(
                Edmtickettypetab.class, itickettypeid);
        return e;
    }

    /**
     * 最新订单保存方法
     */
    @Deprecated
    public ResultBean savetorder405(T_order t_order, List listorder,
                                    List listzorder, Long iemployeeid, Long iticketwinid, Long maxid)
            throws Exception {

        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        try {
            Stssalesvouchertab s = new Stssalesvouchertab();
            Esbscenicareatab scenic = (Esbscenicareatab) timeSharingDao.get(
                    Esbscenicareatab.class, new Long(t_order.getIscenicid()));
            s.setIscenicid(new Long(t_order.getIscenicid()));
            s.setIticketwinid(iticketwinid);
            s.setIbusinessid(new Long(t_order.getIbusinessid()));
            s.setIhandler(iemployeeid);
            s.setIpayeer(iemployeeid);
            s.setImaker(iemployeeid);
            s.setIauditor(iemployeeid);
            s.setIaccountreceivable(new Double(t_order.getZfmont()));// 实收
            s.setIacceptmoney(new Double(t_order.getZfmont()));// 应收
            s.setIgivechange(new Double(0));// 找零
            s.setSzsalesvoucherno(t_order.getOrid());
            String today = Tools.getDays();
            String daytime = Tools.getDayTimes();
            s.setIyear(new Long(today.substring(0, 4)));
            s.setImonth(new Long(today.substring(5, 7)));
            s.setIday(new Long(today.substring(8, 10)));
            s.setDtmakedate(daytime);
            s.setDtauditdate(t_order.getDtstartdate());
            s.setUsid(t_order.getUsid());
            s.setBisintegral(new Long(0));
            s.setByprintinvoice(new Long(0));
            s.setBysplitway(new Long(2));
            s.setBisreturn(new Long(1));
            s.setBysalesvouchertype("01");
            s.setBypostrecord(new Long(0));
            s.setBysalesvoucherstate(new Long(1));
            s.setBispay(new Long(0));
            s.setBispayee(new Long(0));
            s.setSztravelbillno(t_order.getSztravelbillno());
            s.setIregionalid(new Long(t_order.getIregionalid()));
            if (t_order.getDyusid() == null || t_order.getDyusid().equals("")) {
                s.setDyusid("daoyou");
            } else {
                s.setDyusid(t_order.getDyusid());
            }
            s.setTdlx(t_order.getTdlx());
            Esbticketwintab e = (Esbticketwintab) timeSharingDao.get(
                    Esbticketwintab.class, s.getIticketwinid());
            StssalesvouchertabId id = new StssalesvouchertabId();
            id.setIticketstationid(e.getIticketstationid());
            s.setId(id);

            s.getId().setIsalesvoucherid(maxid);
            // timeSharingDao.save(s);
            Stssalessettlementtab st = new Stssalessettlementtab();
            StssalessettlementtabId sid = new StssalessettlementtabId();
            sid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
            sid.setIticketstationid(s.getId().getIticketstationid());
            sid.setIsalessettlementid(new Long(1));
            st.setId(sid);
            st.setSettlementdata(today);
            st.setSettlementtime(daytime.substring(11));
            st.setDtmakedate(daytime);
            if (t_order.getDdzt().equals("02")) {
                st.setIsettlementid("01");
            } else {
                st.setIsettlementid("00");
            }
            st.setMsettlementmoney(new Double(t_order.getZfmont()));
            st.setIversion(new Long(1));
            Esbticketstationtab esbticketstation = (Esbticketstationtab) timeSharingDao
                    .get(Esbticketstationtab.class, e.getIticketstationid());

            // timeSharingDao.save(st);
            List detaillist = new ArrayList();
            List cdetaillist = new ArrayList();
            Long szsoldticketid = new Long(1);
            for (int i = 0; i < listorder.size(); i++) {
                T_orderlist tlist = (T_orderlist) listorder.get(i);
                Stssalesvoucherdetailstab sd = new Stssalesvoucherdetailstab();
                StssalesvoucherdetailstabId sdid = new StssalesvoucherdetailstabId();
                sdid.setIsalesvoucherdetailsid(new Long(tlist.getOrderlistid()));
                sdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
                sdid.setIticketstationid(s.getId().getIticketstationid());
                sd.setId(sdid);
                sd.setIticketwinid(s.getIticketwinid());
                sd.setIcrowdkindpriceid(new Long(tlist.getIcrowdkindpriceid()));
                sd.setItickettypeid(new Long(tlist.getItickettypeid()));
                sd.setIplayerperticket(new Long(1));// 人/张
                sd.setIticketnum(new Long(tlist.getNumb()));// 张数
                sd.setIticketplayer(new Long(tlist.getNumb()));// 人次
                sd.setDtstartdate(tlist.getDtstartdate());
                sd.setDtenddate(tlist.getDtenddate());
                sd.setIstartid(new Long(0));
                sd.setIendid(new Long(0));
                sd.setSzstartserial("0");
                sd.setSzendserial("0");
                sd.setIoffersschemeid(new Long(0));
                sd.setIamount(new Long(tlist.getNumb()));
                sd.setIpresentnums(new Long(0));
                sd.setIderatenums(new Long(0));
                sd.setIfactnum(new Long(0));
                sd.setIuseablenessnum(new Long(tlist.getNumb()));// 使用数量
                sd.setMactualsaleprice(new Double(tlist.getPric()));// 实际售价
                sd.setMeventmoney(new Double(tlist.getAmnt()));// 实际发生金额
                sd.setMderatemoney(new Double(0));// 减免金额
                sd.setMpresentmoney(new Double(0));// 赠送金额
                sd.setMnominalfee(new Double(0));// 工本费
                sd.setMdeposit(new Double(0));
                sd.setMhandcharge(new Double(0));
                sd.setByconsumetype("00");
                sd.setIconsumenum(new Double(0));
                sd.setMtotalamount(new Double(tlist.getAmnt()));
                sd.setItotalnumber(new Long(tlist.getNumb()));
                sd.setItotalminutes(new Long(0));
                sd.setByisout(new Long(0));
                sd.setDtmakedate(Tools.getDayTimes());
                sd.setIversion(new Long(0));
                detaillist.add(sd);
                // timeSharingDao.save(sd);
                Edmtickettypetab eticket = (Edmtickettypetab) timeSharingDao.get(
                        Edmtickettypetab.class,
                        new Long(tlist.getItickettypeid()));
                // 添加售出门票表

                for (int j = 1; j <= sd.getIticketnum().intValue(); j++) {
                    Stssoldtickettab stsv = new Stssoldtickettab();
                    StssoldtickettabId stsvid = new StssoldtickettabId();
                    stsvid.setIsalesvoucherid(sd.getId().getIsalesvoucherid());
                    stsvid.setIticketstationid(sd.getId().getIticketstationid());
                    stsvid.setIsalesvoucherdetailsid(sd.getId()
                            .getIsalesvoucherdetailsid());
                    stsvid.setSzsoldticketid(szsoldticketid);
                    szsoldticketid = szsoldticketid + 1;
                    stsv.setId(stsvid);
                    stsv.setIscenicid(s.getIscenicid());
                    stsv.setIcrowdkindid(new Long(tlist.getIcrowdkindid()));
                    stsv.setItickettypeid(sd.getItickettypeid());
                    stsv.setUsid(s.getUsid());
                    stsv.setIbusinessid(s.getIbusinessid());
                    stsv.setDyusid(s.getDyusid());
                    stsv.setIplayerperticket(sd.getIplayerperticket());// 人次数
                    stsv.setDtstartdate(sd.getDtstartdate());
                    stsv.setDtenddate(sd.getDtenddate());
                    stsv.setMhandcharge(new Double(0));
                    stsv.setDtmakedate(daytime);
                    stsv.setByvalidity("00");
                    stsv.setBymaketicketway(tlist.getBymaketicketway());

                    // 2012-09-06修改 判断现场激活和介质类型 李经锐
                    if (tlist.getBymaketicketway().equals("00")
                            || (tlist.getBymaketicketway().equals("01")
                            && !eticket.getBymediatype().equals("00") && !eticket
                            .getBymediatype().equals("01"))) {
                        List<Map> iserialnumlist = new ArrayList();
                        try {
                            iserialnumlist = timeSharingDao
                                    .findBySqlToMapnocolsesession("select ticketid_sequence.nextval  from dual");
                        } catch (Exception e1) {
                            // TODO Auto-generated catch block
                            e1.printStackTrace();
                        }
                        Long iserialnum = new Long(
                                (((Map) iserialnumlist.get(0)).get("NEXTVAL"))
                                        .toString());
                        stsv.setIserialnum(iserialnum);
                        String newmaxorno = Tools
                                .ConvertTo36Text(iserialnum, 0);
                        StringBuffer printno = new StringBuffer();
                        printno.append(esbticketstation.getSzstationcode());
                        printno.append(scenic.getSzsceniccode());
                        printno.append(eticket.getSztickettypecode());
                        if (newmaxorno.length() < 6) {
                            for (int b = 0; b < 6 - newmaxorno.length(); b++) {
                                printno.append("0");
                            }
                        }
                        printno.append(newmaxorno);
                        String szprintno = Tools.ticketMakeMd5(printno
                                .toString());
                        stsv.setSzticketprintno(szprintno);
                    } else {
                        String szticketprintno = tlist.getSzticketprintno();
                        String[] iserial = szticketprintno.split("&");
                        String tsql = " from Edmticketnoruletab rule where rule.byisuse=1 and rule.iscenicid="
                                + s.getIscenicid();
                        List lst = this.timeSharingDao.find(tsql);
                        if (lst != null && lst.size() > 0) {
                            Edmticketnoruletab ticketrule = (Edmticketnoruletab) lst
                                    .get(0);
                            // 2012-10-24修改 李经锐
                            String lsh = iserial[j - 1].substring(
                                    ticketrule.getIntons2()
                                            + ticketrule
                                            .getItickettypecodepos(),
                                    ticketrule.getIntons2()
                                            + ticketrule
                                            .getItickettypecodepos()
                                            + ticketrule.getIserialnolen());
                            if (ticketrule.getIntons1() != null
                                    && ticketrule.getIntons1() == 1) {
                                stsv.setIserialnum(Long.parseLong(lsh));// 流水号
                            } else {
                                stsv.setIserialnum(Tools.Text36ToConvert(lsh));// 流水号
                            }

                        } else {
                            String lsh = iserial[j - 1].substring(6, 12);
                            stsv.setIserialnum(Tools.Text36ToConvert(lsh));// 流水号
                        }

                        // Long piserialnum = new
                        // Long(szticketprintno.substring(6, 12));
                        // Long spiserialnum = piserialnum + j - 1;
                        // stsv.setIserialnum(spiserialnum);
                        // StringBuffer printno = new StringBuffer();
                        // printno.append(szticketprintno.substring(0, 6));
                        // String szprintno = spiserialnum.toString();
                        //
                        // if (szprintno.length() < 6) {
                        // for (int b = 0; b < 6 - szprintno.length(); b++) {
                        // printno.append("0");
                        // }
                        // }
                        // printno.append(szprintno);
                        // printno.append(szticketprintno.substring(12, 14));

                        // stsv.setSzticketprintno(printno.toString());
                        stsv.setSzticketprintno(iserial[j - 1]);
                    }
                    stsv.setMremainmoney(new Double(0));
                    stsv.setMpresentmoney(new Double(0));
                    stsv.setMactualsaleprice(sd.getMactualsaleprice());
                    stsv.setIpresentnum(new Long(0));
                    stsv.setIremainnum(new Long(1));// 剩余数量
                    stsv.setMnominalfee(new Double(0));
                    stsv.setMdeposit(new Double(0));
                    stsv.setByticketpurpose("00");
                    stsv.setBisrefundbalance(new Long(1));
                    stsv.setByactivation("02");
                    cdetaillist.add(stsv);

                }
            }
            szsoldticketid = new Long(0);
            List zdetaillist = new ArrayList();
            List cdzetaillist = new ArrayList();
            int n = 1;
            long orderlistid = 0;
            long onumb = 0;
            for (int i = 0; i < listzorder.size(); i++) {

                T_zorderlist zlist = (T_zorderlist) listzorder.get(i);
                Edmtickettypetab edticket = (Edmtickettypetab) timeSharingDao.get(
                        Edmtickettypetab.class,
                        new Long(zlist.getItickettypeid()));

                Stscomticketsalesdetailstab zstd = new Stscomticketsalesdetailstab();
                StscomticketsalesdetailstabId zstdid = new StscomticketsalesdetailstabId();
                zstdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
                zstdid.setIticketstationid(s.getId().getIticketstationid());
                zstdid.setIsalesvoucherdetailsid(new Long(zlist
                        .getOrderlistid()));
                zstdid.setIcomticketsalesdetailsid(new Long(zlist
                        .getZorderlistid()));
                zstd.setIcrowdkindpriceid(new Long(zlist.getIcrowdkindpriceid()));
                zstd.setItickettypeid(new Long(zlist.getItickettypeid()));
                zstd.setIztickettypeid(new Long(zlist.getIztickettypeid()));
                zstd.setTripid(new Long(zlist.getTripid()));
                zstd.setMhandcharge(new Double(0));
                zstd.setDtmakedate(daytime);
                zstd.setIvenueareaid(new Long(0));
                zstd.setIvenueid(new Long(0));
                zstd.setIvenueseatsid(new Long(0));
                if (zlist.getDtstartdate().length() > 10) {
                    zstd.setDtstartdate(zlist.getDtstartdate());
                    zstd.setDtenddate(zlist.getDtenddate());
                } else {
                    zstd.setDtstartdate(zlist.getDtstartdate() + "00:00:00");
                    zstd.setDtenddate(zlist.getDtenddate() + "23:59:59");
                }
                if (Tools.getDayTimes().compareTo(zstd.getDtenddate()) > 0) {
                    if (zstd.getTripid() > 0) {
                        Trip trip = (Trip) timeSharingDao.get(Trip.class,
                                zstd.getTripid());
                        rs.addRow(new String[] {
                                "false",
                                "产品" + edticket.getSztickettypename() + "的竹筏的"
                                        + trip.getTripname() + "已结束" });

                    } else {
                        rs.addRow(new String[] { "false",
                                "产品号" + edticket.getSztickettypename() + "已过期" });
                    }
                    return rs;
                }

                zstd.setIversion(new Long(0));
                zstd.setIsplitamount(new Long(zlist.getZnumb()));
                zstd.setMsplitprice(new Double(zlist.getZpric()));
                zstd.setMsplitmoney(new Double(zlist.getZamnt()));
                zstd.setId(zstdid);
                zdetaillist.add(zstd);

                if (orderlistid == 0) {
                    orderlistid = new Long(zlist.getOrderlistid());
                    onumb = Long.parseLong(zlist.getZnumb());
                } else {
                    if (orderlistid != new Long(zlist.getOrderlistid())
                            .longValue()) {
                        szsoldticketid = szsoldticketid + onumb;
                        onumb = Long.parseLong(zlist.getZnumb());
                        orderlistid = new Long(zlist.getOrderlistid());
                    }
                }

                List opwwlist = timeSharingDao
                        .find(" from Opwwicketsettab where itickettypeid="
                                + zlist.getItickettypeid()
                                + " and izticktypeid="
                                + zlist.getIztickettypeid());
                if (opwwlist.size() == 0) {
                    rs.addRow(new String[] {
                            "false",
                            "产品" + edticket.getSztickettypename()
                                    + "没有检票园门，不能出票" });
                    return rs;
                }
                for (int k = 0; k < opwwlist.size(); k++) {

                    Opwwicketsettab opww = (Opwwicketsettab) opwwlist.get(k);
                    for (int m = 1; m <= new Long(zlist.getZnumb()); m++) {
                        Stssoldticketsubtab stss = new Stssoldticketsubtab();
                        StssoldticketsubtabId stssid = new StssoldticketsubtabId();
                        stssid.setIticketstationid(s.getId()
                                .getIticketstationid());
                        stssid.setSzsoldticketid(szsoldticketid + m);
                        stssid.setSzsoldticketsubid(new Long(n));
                        n = n + 1;
                        stssid.setIsalesvoucherid(s.getId()
                                .getIsalesvoucherid());
                        stssid.setIsalesvoucherdetailsid(new Long(zlist
                                .getOrderlistid()));
                        stss.setId(stssid);
                        stss.setIgardengateid(opww.getIgardengateid());
                        stss.setIscenicid(s.getIscenicid());
                        stss.setItickettypeid(new Long(zlist.getItickettypeid()));
                        stss.setIztickettypeid(new Long(zlist
                                .getIztickettypeid()));
                        stss.setBychecktype(new Long(0));
                        stss.setByconsumemode(opww.getByconsumemode());
                        stss.setIpasstimes(opww.getIlimittotaltimes());
                        stss.setIpassedtimes(new Long(0));
                        stss.setMsingletimes(opww.getMsingletimes());
                        stss.setMlimitconsume(new Double(0));
                        stss.setMsingleconsume(new Double(0));
                        stss.setMconsumed(new Double(0));
                        stss.setByisout(new Long(1));
                        stss.setIsvalid(new Long(1));
                        stss.setDtmakedate(daytime);
                        stss.setBylastcheckdir(new Long(0));
                        stss.setIcrowdkindid(new Long(zlist.getIcrowdkindid()));
                        stss.setTripid(new Long(zlist.getTripid()));
                        if (zlist.getDtstartdate().length() > 10) {
                            stss.setDtbegindate(zlist.getDtstartdate());
                            stss.setDtenddate(zlist.getDtenddate());
                        } else {
                            stss.setDtbegindate(zlist.getDtstartdate()
                                    + "00:00:00");
                            stss.setDtenddate(zlist.getDtenddate() + "23:59:59");
                        }
                        cdzetaillist.add(stss);
                        // timeSharingDao.save(stss);

                    }

                }

            }
            timeSharingDao.save(s);
            timeSharingDao.save(st);
            for (int i = 0; i < detaillist.size(); i++) {
                Stssalesvoucherdetailstab sd = (Stssalesvoucherdetailstab) detaillist
                        .get(i);
                timeSharingDao.save(sd);
            }
            Sysparv5 sv5 = (Sysparv5) timeSharingDao.get(Sysparv5.class,
                    new Sysparv5Id("PRCS", "01"));
            String printcs = "0";
            if (sv5 != null) {
                printcs = sv5.getPmva();
            }
            for (int i = 0; i < cdetaillist.size(); i++) {
                Stssoldtickettab stsv = (Stssoldtickettab) cdetaillist.get(i);
                timeSharingDao.save(stsv);
                if (stsv.getBymaketicketway().equals("00")) {
                    if (printcs.equals("1")) {
                        Ticketprintlist t = new Ticketprintlist();
                        // timeSharingDao.save(stsv);
                        t.setIemployeeid(iemployeeid);
                        t.setSzsalesvoucherno(s.getSzsalesvoucherno());
                        t.setPrinttype("01");
                        t.setSzticketprintno(stsv.getSzticketprintno());
                        t.setPrinttime(daytime);
                        t.setIsok(new Long(0));
                        Long printid = timeSharingDao.getSequenceId("PRINT_ID");
                        t.setPrintid(printid);
                    }
                }
            }
            for (int i = 0; i < zdetaillist.size(); i++) {
                Stscomticketsalesdetailstab zstd = (Stscomticketsalesdetailstab) zdetaillist
                        .get(i);
                timeSharingDao.save(zstd);
            }
            for (int i = 0; i < cdzetaillist.size(); i++) {
                Stssoldticketsubtab stss = (Stssoldticketsubtab) cdzetaillist
                        .get(i);
                timeSharingDao.save(stss);
            }

            // lijingrui修改 2012-08-30 订单中含有预制票 操作个人结存明细表
            for (int i = 0; i < listorder.size(); i++) {
                T_orderlist tlist = (T_orderlist) listorder.get(i);
                Edmtickettypetab edmticket = (Edmtickettypetab) this.timeSharingDao
                        .get(Edmtickettypetab.class,
                                Long.parseLong(tlist.getItickettypeid()));
                if (tlist.getBymaketicketway().equals("01")) {
                    if (edmticket.getBymediatype().equals("00")
                            || edmticket.getBymediatype().equals("01")) {
                        String szticketprintno = tlist.getSzticketprintno();
                        String[] iserial = szticketprintno.split("&");
                        boolean sf = checkEditIompersonHouse(s.getIhandler(),
                                iserial, s.getIscenicid(),
                                Long.parseLong(tlist.getItickettypeid()),
                                Long.parseLong(tlist.getNumb()));
                        if (sf) {
                            rs.addRow(new String[] { "false",
                                    "售票员手中没售出票号或者售出票号与售票员手中票号冲突" });
                            return rs;
                        }

                    } else {
                        String psql = " from Kcpersonalticketdetailstab per where per.itickettypeid="
                                + Long.parseLong(tlist.getItickettypeid())
                                + " and per.ireceiverid=" + s.getIhandler();
                        List kcList = this.timeSharingDao.findTopNumb(psql, 1);
                        if (kcList != null && kcList.size() > 0) {
                            Kcpersonalticketdetailstab person = (Kcpersonalticketdetailstab) kcList
                                    .get(0);
                            if (person.getIamount() > Long.parseLong(tlist
                                    .getNumb())) {
                                person.setIamount(person.getIamount()
                                        - Long.parseLong(tlist.getNumb()));
                                this.timeSharingDao.update(person);
                            } else if (person.getIamount() == Long
                                    .parseLong(tlist.getNumb())) {
                                this.timeSharingDao.delete(person);
                            } else {
                                rs.addRow(new String[] {
                                        "false",
                                        "现场激活感应卡"
                                                + edmticket
                                                .getSztickettypename()
                                                + "数量不足" });
                            }

                        }

                    }
                }
            }

            rs.addRow(new String[] { "true",
                    s.getId().getIsalesvoucherid().toString() });

        } catch (Exception e) {

            System.out.println("主键出错");
            throw new RuntimeException("运行出错，主键冲突");
        }
        return rs;

    }

    /**
     * *根据服务商,趟次和日期,接待用户usid读取该服务商产品的趟次预留量数据 Describe: p.byisuse=1 数量控制已经启用
     *
     * @param iscenicid
     * @param tripid
     * @param usid
     * @param stdt
     *
     * @return
     * @author yuanchengjun Date:2011-10-27
     */
    public ResultBean getReservecontrol(Long itickettypeid, String usid,
                                        String stdt, Long tripid) {

        if (stdt == null) {
            stdt = Tools.getDay();
        }

        String sql = "select r.usid,r.reservednumber,r.reservedsalenumber from productcontrol p,Reservecontrol r where    stdata='"
                + stdt
                + "' and p.tripid="
                + tripid
                + " and   itickettypeid='"
                + itickettypeid
                + "' and p.controltype='03'  and p.productcontrolid=r.productcontrolid and r.ibusinessid=3 and usid='"
                + usid + "'";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(list);
    }

    /**
     * 根据产品，趟次ＩＤ 日期读取竹筏排班的时间 Describe:
     *
     * @auth:yuanchengjun
     * @param itickettypeid
     * @param tripid
     * @param stdt
     * @return return:ResultBean Date:2012-4-6
     */
    public ResultBean getPrdtripvenuemanage(Long itickettypeid, Long tripid,
                                            String stdt) {

        String sql = "select starttime as starttime,endtime as endtime,iadvanceminute as iadvanceminute,ilagminute as ilagminute,ivenueareaid as ivenueareaid,ivenueid as ivenueid from Prdtripvenuemanage where tripid="
                + tripid
                + " and itickettypeid="
                + itickettypeid
                + " and startdata<='" + stdt + "' and enddata>='" + stdt + "'";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(list);
    }

    public void UpdateCheckcount(String messages) {
        String[] ceheckcounts = messages.split("#");
        int b = 0;
        String today = Tools.getTodayString();
        if (countList.getStdt() == null || countList.getStdt().equals("")) {
            countList.setStdt(today);
            countList.setInsertnumb(1);
        } else {
            if (!countList.getStdt().equals(today)) {
                b = 1;
                countList.setStdt(today);
                countList.setInsertnumb(1);
            }
            countList.setInsertnumb(countList.getInsertnumb() + 1);
            if (countList.getInsertnumb() % 100 == 0) {
                b = 2;
            }
        }
        if (b == 1) {
            List coulist = countList.getCoulist();
            for (int i = 0; i < coulist.size(); i++) {
                Checkcount c = (Checkcount) coulist.get(i);
                List ls = this.timeSharingDao.find(" from Checkcount where stdt='"
                        + c.getStdt() + "' and igardengateid="
                        + c.getIgardengateid() + " and iscenicid="
                        + c.getIscenicid());
                if (ls != null && ls.size() > 0) {
                    Checkcount c1 = (Checkcount) ls.get(0);
                    c1.setNumb(c.getNumb());
                    c1.setCnumb(c.getCnumb());
                    this.timeSharingDao.update(c1);
                } else {
                    Long seq = this.timeSharingDao.getMaxPk("seq", "Checkcount");
                    c.setSeq(seq + 1);
                    this.timeSharingDao.save(c);
                }
            }

        }
        List coulist = new ArrayList();

        for (int i = 0; i < ceheckcounts.length; i++) {
            String[] cl = ceheckcounts[i].split(",");
            Checkcount c = new Checkcount();
            c.setIgardengateid(new Long(cl[0]));
            c.setCnumb(new Long(cl[1]));
            c.setNumb(new Long(cl[2]));
            c.setIscenicid(new Long(cl[3]));
            c.setStdt(cl[4]);
            coulist.add(c);

            if (b == 2) {
                List ls = this.timeSharingDao.find(" from Checkcount where stdt='"
                        + c.getStdt() + "' and igardengateid="
                        + c.getIgardengateid() + " and iscenicid="
                        + c.getIscenicid());
                if (ls != null && ls.size() > 0) {
                    Checkcount c1 = (Checkcount) ls.get(0);
                    c1.setNumb(c.getNumb());
                    c1.setCnumb(c.getCnumb());
                    this.timeSharingDao.update(c1);
                } else {
                    Long seq = this.timeSharingDao.getMaxPk("seq", "Checkcount");
                    c.setSeq(seq + 1);
                    this.timeSharingDao.save(c);
                }

            }
        }
        countList.setCoulist(coulist);

    }

    public void UpdateRaftcheck(String messages) {
        String[] raftchecks = messages.split(",");
        Long seq = new Long(raftchecks[0]);
        Raftcheck c = (Raftcheck) this.timeSharingDao.get(Raftcheck.class, seq);
        if (c == null) {
            c = new Raftcheck();
            c.setSeq(seq);
            c.setTripid(new Long(raftchecks[1]));
            c.setZfdate(raftchecks[2]);
            c.setNumb(new Long(raftchecks[3]));
            this.timeSharingDao.save(c);

        } else {
            c.setTripid(new Long(raftchecks[1]));
            c.setZfdate(raftchecks[2]);
            c.setNumb(new Long(raftchecks[3]));
            this.timeSharingDao.update(c);
        }
    }

    public ResultBean UpdateChangecheckticket(String messages) {
        String[] checkt = messages.split(",");
        // 更新改签出数据
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "values" });

        Long iztickettypeid = new Long(checkt[0]);
        String date = checkt[1];

        // 根据日期和时间查询对应的竹筏趟次
        String ndate = date.substring(0, 10);

        String times = date.substring(11, 16);

        List pvlist = this.timeSharingDao
                .find(" from Prdtripvenuemanage where  itickettypeid="
                        + iztickettypeid + " and startdata<='" + ndate
                        + "' and enddata>='" + ndate + "' and starttime<='"
                        + times + "' and endtime>='" + times + "'");
        Prdtripvenuemanage p = null;
        if (pvlist == null || pvlist.size() == 0) {
            // 该段时间没有趟次
            rs.addRow(new String[] { "-2" });
            rs.addRow(new String[] { "该段时间没有趟次" });
            return rs;
        } else {
            p = (Prdtripvenuemanage) pvlist.get(0);
        }

        List nplist = this.timeSharingDao.find("from Productcontrol where stdata='"
                + ndate + "' and tripid=" + p.getTripid());
        Productcontrol np = (Productcontrol) nplist.get(0);
        if (np.getSalablenumber().longValue() == np.getSoldnumber().longValue()) {
            rs.addRow(new String[] { "-1" });
            rs.addRow(new String[] { "该趟次可售量已售完" });
            return rs;
        } else {
            np.setSoldnumber(np.getSoldnumber() + 1);
            if (np.getChangeinnumber() == null) {
                np.setChangeinnumber(new Long(1));
            } else {
                np.setChangeinnumber(np.getChangeinnumber() + 1);
            }
            this.timeSharingDao.update(np);

            String ydate = checkt[2];
            Long ytripid = new Long(checkt[3]);

            List plist = this.timeSharingDao
                    .find("from Productcontrol where stdata='" + ydate
                            + "' and tripid=" + ytripid);
            Productcontrol yp = (Productcontrol) plist.get(0);
            yp.setSoldnumber(yp.getSoldnumber() - 1);
            if (yp.getChangeoutnumber() == null) {
                yp.setChangeoutnumber(new Long(1));
            } else {
                yp.setChangeoutnumber(yp.getChangeoutnumber() + 1);
            }
            // yp.setChangeoutnumber(yp.getChangeoutnumber() + 1);
            this.timeSharingDao.update(yp);
            rs.addRow(new String[] { p.getTripid().toString() });
            rs.addRow(new String[] { p.getStarttime() });
            rs.addRow(new String[] { p.getEndtime() });
            return rs;
        }
    }

    public ResultBean updatehfcptdorder(String productcontrols, String orid,
                                        Long iscenicid, double tpmont, double tpsx, String zfusid,
                                        String neworid) {
        ResultBean rs = new ResultBean();
        try {
            rs.setColumnCount(2);
            rs.setColumnNames(new String[] { "returnstats", "message" });
            String returnstats = "";
            String message = "";
            if (productcontrols != null && !productcontrols.equals("")) {
                String[] productcontrol = productcontrols.split(":");
                List plist = new ArrayList();
                for (int i = 0; i < productcontrol.length; i++) {
                    String[] control = productcontrol[i].split("&");
                    Long itickettypeid = new Long(control[0]);
                    String controltype = control[1];
                    Long tripid = new Long(control[2]);
                    String stdata = control[3];
                    Long soldnumber = new Long(control[4]);
                    Productcontrol p = new Productcontrol();
                    p.setItickettypeid(itickettypeid);
                    p.setControltype(controltype);
                    p.setTripid(tripid);
                    p.setStdata(stdata);
                    p.setSoldnumber(soldnumber);
                    String hsql = " from Productcontrol where itickettypeid="
                            + p.getItickettypeid() + " and tripid="
                            + p.getTripid() + " and stdata='" + p.getStdata()
                            + "' and controltype='03'";
                    List pplist = timeSharingDao.find(hsql);
                    if (pplist != null && pplist.size() > 0) {
                        Productcontrol p1 = (Productcontrol) pplist.get(0);
                        p1.setSoldnumber(p1.getSoldnumber() + p.getSoldnumber());
                        timeSharingDao.update(p1);
                    }
                }

            }
            MOrder m = (MOrder) timeSharingDao.get(MOrder.class, orid);

            m.setTpmont(m.getTpmont() - tpmont - tpsx);

            m.setTpsx(m.getTpsx() - tpsx);

            m.setIsj(new Long(1));
            timeSharingDao.update(m);
            YOrder y = (YOrder) timeSharingDao.get(YOrder.class, new YOrderId(orid,
                    iscenicid));

            y.setTpmont(y.getTpmont() - tpmont - tpsx);

            y.setTpsx(y.getTpsx() - tpsx);

            y.setIsj(new Long(1));
            timeSharingDao.update(y);
            // hfUseryfk(neworid);
            if(!orid.substring(8,11).equals("888") && !orid.substring(8,11).equals("999")){
                String sql = "from Useryfk where orderid='" + neworid + "'";
                List list = timeSharingDao.find(sql);
                for (int i = 0; i < list.size(); i++) {
                    Useryfk yfk = (Useryfk) list.get(0);
                    Vipbalance vipbalance = (Vipbalance) timeSharingDao.get(
                            Vipbalance.class, yfk.getUsid());
                    vipbalance.setPoint(vipbalance.getPoint() - yfk.getYfklb()
                            * yfk.getPoint());
                    timeSharingDao.update(vipbalance);
                    timeSharingDao.delete(yfk);

                }
            }
            rs.addRow(new String[] { "true", "恢复成功" });
            return rs;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            rs.addRow(new String[] { "false", e.getMessage() });
            return rs;
        }
    }

    public ResultBean updatecphfT_order(String orid, Long iscenicid)
            throws Exception {
        ResultBean rs = new ResultBean();
        try {

            rs.setColumnCount(2);
            rs.setColumnNames(new String[] { "returnstats", "message" });
            String returnstats = "";
            String message = "";

            YOrder yorder = (YOrder) timeSharingDao.get(YOrder.class, new YOrderId(
                    orid, iscenicid));
            yorder.setNotec("");
            yorder.setIsc(new Long(0));
            yorder.setDdzt("02");
            yorder.setNotec("");
            yorder.setIsc(new Long(0));
            timeSharingDao.update(yorder);
            List listtorder = timeSharingDao.find("from TOrder where id.orid='"
                    + orid + "' and iscenicid=" + iscenicid);
            boolean b = true;
            for (int i = 0; i < listtorder.size(); i++) {
                TOrder t = (TOrder) listtorder.get(i);

                t.setDdzt("02");
                t.setNotec("");
                t.setIsc(new Long(0));
                timeSharingDao.update(t);

            }
            if (b) {
                // 该订单已经全部出票
                MOrder m = (MOrder) timeSharingDao.get(MOrder.class, orid);
                if (m.getNotea() != null && m.getNotea().equals("51")) {
                    m.setNotea("50");
                }
                if (m.getNotea() != null && m.getNotea().equals("11")) {
                    m.setNotea("02");
                }
                m.setDdzt("02");
                timeSharingDao.update(m);
            }

            rs.addRow(new String[] { "true", "成功" });
            return rs;
        } catch (Exception e) {
            throw new RuntimeException("出票失败,回复预定单状态失败");
        }
    }

    public ResultBean savebendiorder(String salesvouchers,
                                     String salesvoucherdetails, String comticketsalesdetails,
                                     String productcontrols, Long maxid, String szsalesvoucherno)
            throws Exception {

        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        String[] salesvoucher = salesvouchers.split("&");
        Long iscenicid = new Long(salesvoucher[0]);
        Long iticketwinid = new Long(salesvoucher[1]);
        Long ibusinessid = new Long(salesvoucher[2]);
        Long iemployeeid = new Long(salesvoucher[3]);// 出票员
        String usid = salesvoucher[7];
        Double iaccountreceivable = new Double(salesvoucher[5]);
        Double iacceptmoney = new Double(salesvoucher[4]);
        if (iacceptmoney < iaccountreceivable) {
            throw new RuntimeException("实收款应该大于等于应收金额");
        }
        if (productcontrols != null && !productcontrols.equals("")) {
            String[] productcontrol = productcontrols.split(":");
            String returnstats = "";
            String message = "";
            for (int i = 0; i < productcontrol.length; i++) {
                String[] control = productcontrol[i].split("&");
                Long itickettypeid = new Long(control[0]);
                String controltype = control[1];
                Long tripid = new Long(control[2]);
                String stdata = control[3];
                Long soldnumber = new Long(control[4]);

                String hsql = " from Productcontrol where itickettypeid="
                        + itickettypeid + " and tripid=" + tripid
                        + " and stdata='" + stdata + "' and controltype='03'";
                List plist = timeSharingDao.find(hsql);
                if (plist == null || plist.size() == 0) {
                    Edmtickettypetab e = (Edmtickettypetab) timeSharingDao.get(
                            Edmtickettypetab.class, itickettypeid);
                    if (e.getIscontrolsale() == 0) {
                        Trip t = (Trip) timeSharingDao.get(Trip.class, tripid);
                        throw new RuntimeException(e.getSztickettypename()
                                + t.getTripname() + "无销售数据");
                    }
                } else {
                    Productcontrol p1 = (Productcontrol) plist.get(0);
                    Edmtickettypetab e = (Edmtickettypetab) timeSharingDao.get(
                            Edmtickettypetab.class, itickettypeid);
                    Trip t = (Trip) timeSharingDao.get(Trip.class, tripid);
                    if (p1.getBystate() != 1) {
                        returnstats = "false";
                        if (p1.getBystate() == 0) {
                            message = e.getSztickettypename() + t.getTripname()
                                    + "准备停排";

                        } else {
                            message = e.getSztickettypename() + t.getTripname()
                                    + "已停排";
                        }
                        throw new RuntimeException(message);

                    } else {
                        if (ibusinessid == 3) {
                            String hql2 = " from Reservecontrol where usid='"
                                    + usid + "' and productcontrolid="
                                    + p1.getProductcontrolid();
                            List rlist = timeSharingDao.find(hql2);
                            if (rlist == null || rlist.size() == 0) {
                                message = e.getSztickettypename()
                                        + t.getTripname() + "没有该用户的预留量数据";
                                throw new RuntimeException(message);
                            } else {
                                Reservecontrol r = (Reservecontrol) rlist
                                        .get(0);
                                if (r.getReservednumber()
                                        - r.getReservedsalenumber() >= soldnumber) {
                                    r.setReservedsalenumber(r
                                            .getReservedsalenumber()
                                            + soldnumber);
                                    timeSharingDao.update(r);
                                    p1.setReservedsalenumber(p1
                                            .getReservedsalenumber()
                                            + soldnumber);
                                    timeSharingDao.update(p1);
                                } else {
                                    message = e.getSztickettypename()
                                            + t.getTripname() + "该用户的预留量已不足";
                                    throw new RuntimeException(message);
                                }
                            }
                        } else {
                            if (p1.getSalablenumber() - p1.getSoldnumber() >= soldnumber) {
                                p1.setSoldnumber(p1.getSoldnumber()
                                        + soldnumber);
                                timeSharingDao.update(p1);
                            } else {
                                throw new RuntimeException(
                                        e.getSztickettypename()
                                                + t.getTripname() + "可售量不能满足要求");
                            }
                        }
                    }
                }

                // 接待竹筏
            }
        }
        Double igivechange = new Double(salesvoucher[6]);

        Long forceemid = new Long(salesvoucher[8]);
        String pzlb = salesvoucher[9];// 默认 ０１ 销售 ０４ 补入
        String zffs = "00";
        if (salesvoucher.length >= 11) {
            zffs = salesvoucher[10];// 支付方式
        }
        Stssalesvouchertab s = new Stssalesvouchertab();
        Esbscenicareatab scenic = (Esbscenicareatab) timeSharingDao.get(
                Esbscenicareatab.class, iscenicid);
        s.setIscenicid(iscenicid);
        s.setIticketwinid(iticketwinid);
        s.setIbusinessid(ibusinessid);
        s.setIhandler(iemployeeid);
        s.setIpayeer(iemployeeid);
        s.setImaker(forceemid);
        s.setIauditor(iemployeeid);
        s.setIaccountreceivable(iaccountreceivable);
        s.setIacceptmoney(iacceptmoney);
        s.setIgivechange(igivechange);
        String today = Tools.getDays();
        String daytime = Tools.getDayTimes();
        s.setIyear(new Long(today.substring(0, 4)));
        s.setImonth(new Long(today.substring(5, 7)));
        s.setIday(new Long(today.substring(8, 10)));
        s.setDtmakedate(daytime);
        s.setDtauditdate(today);
        s.setUsid(usid);
        s.setDyusid("daoyou");
        s.setBisintegral(new Long(0));
        s.setByprintinvoice(new Long(0));
        s.setBysplitway(new Long(2));
        s.setBisreturn(new Long(1));
        s.setBysalesvouchertype(pzlb);
        s.setBypostrecord(new Long(0));
        s.setBysalesvoucherstate(new Long(1));
        s.setBispay(new Long(0));
        s.setBispayee(new Long(0));
        Esbticketwintab e = (Esbticketwintab) timeSharingDao.get(
                Esbticketwintab.class, s.getIticketwinid());
        StssalesvouchertabId id = new StssalesvouchertabId();
        id.setIticketstationid(e.getIticketstationid());
        id.setIsalesvoucherid(maxid);
        s.setId(id);
        Esbticketstationtab esbticketstation = (Esbticketstationtab) timeSharingDao
                .get(Esbticketstationtab.class, e.getIticketstationid());

        s.setSzsalesvoucherno(szsalesvoucherno);
        // 目前结算只有一种方式 （现金）直接生成结算数据
        Stssalessettlementtab st = new Stssalessettlementtab();
        StssalessettlementtabId sid = new StssalessettlementtabId();
        sid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
        sid.setIticketstationid(s.getId().getIticketstationid());
        sid.setIsalessettlementid(new Long(1));
        st.setId(sid);
        st.setSettlementdata(today);
        st.setSettlementtime(daytime.substring(11));
        st.setIsettlementid(zffs);
        st.setMsettlementmoney(iacceptmoney);
        st.setIversion(new Long(1));
        st.setDtmakedate(daytime);

        List detaillist = new ArrayList();
        List cdetaillist = new ArrayList();
        String[] salesvoucherdetail = salesvoucherdetails.split(":");
        double smont = 0;
        Long szsoldticketid = new Long(1);
        List zjlist = new ArrayList();
        long maxnumb = 2;// 同一种票同一游览日期最多预定人数
        Sysparv5 pv5 = (Sysparv5) this.timeSharingDao.get(Sysparv5.class,
                new Sysparv5Id("SMSL", "01"));
        if (pv5 != null) {
            maxnumb = Long.parseLong(pv5.getPmva());
        }
        for (int i = 0; i < salesvoucherdetail.length; i++) {
            String isalesvoucherdetail = salesvoucherdetail[i];

            String[] detail = isalesvoucherdetail.split("&");
            long isalesvoucherdetailsid = new Long(detail[0]);
            Long icrowdkindpriceid = new Long(detail[1]);
            Long itickettypeid = new Long(detail[2]);
            Long iticketnum = new Long(detail[3]);
            String dtstartdate = detail[4];
            String dtenddate = detail[5];
            String manyouno = "";
            String myzj = "";
            String myname = "";
            String mytelno = "";
            Edmtickettypetab eticket = (Edmtickettypetab) timeSharingDao.get(
                    Edmtickettypetab.class, itickettypeid);
            // 添加售出门票表
            Edmcrowdkindpricetab edmcrowdkindpricetab = (Edmcrowdkindpricetab) timeSharingDao
                    .get(Edmcrowdkindpricetab.class, icrowdkindpriceid);
            if (e.getBywintype().equals("0003")) {
                // 窗口为年卡窗口
                if (eticket.getBycategorytype().equals("0014")) {
                    if (iticketnum > 1) {
                        throw new RuntimeException(
                                eticket.getSztickettypename() + "只能单票销售");
                    }
                } else {
                    throw new RuntimeException("年卡窗口只能办理年卡业务");

                }
                if (detail.length < 13) {

                    throw new RuntimeException("年卡办理应填写持卡人信息");
                } else {
                    manyouno = detail[9];
                    myzj = detail[10];
                    myname = detail[11];
                    mytelno = detail[12];
                    if (manyouno.equals("")) {
                        throw new RuntimeException("年卡办理应填写年卡号");
                    } else {
                        // 判断卡号是否重复
                        String hsql = " from Stssoldtickettab where manyouno='"
                                + manyouno + "'";
                        List plist = timeSharingDao.find(hsql);
                        if (plist != null && plist.size() > 0) {
                            throw new RuntimeException("该卡" + manyouno
                                    + "号已经使用，请重新填写卡号");
                        }
                    }
                    if (myzj.equals("")) {
                        throw new RuntimeException("年卡办理应填写有效证件");
                    }
                    if (mytelno.equals("")) {
                        throw new RuntimeException("年卡办理应填写电话号码");
                    }
                    if (myname.equals("")) {
                        throw new RuntimeException("年卡办理应填写持卡人姓名");
                    }
                }

            } else {
                if (edmcrowdkindpricetab.getIpeoplenumrange().longValue() == 1) {
                    if (detail.length >= 12) {
                        myzj = detail[10];
                        myname = detail[11];
                        if (myzj.equals("")) {
                            throw new RuntimeException("实名制票务需输入证件号");
                        }
                        if (myname.equals("")) {
                            throw new RuntimeException("实名制票务填写姓名");
                        }
                    }
                }
            }

            Double mactualsaleprice = edmcrowdkindpricetab
                    .getMactualsaleprice();
            Double meventmoney = new Double(mactualsaleprice.doubleValue()
                    * iticketnum.doubleValue());
            smont = smont + meventmoney;
            Stssalesvoucherdetailstab sd = new Stssalesvoucherdetailstab();
            StssalesvoucherdetailstabId sdid = new StssalesvoucherdetailstabId();
            sdid.setIsalesvoucherdetailsid(isalesvoucherdetailsid);
            sdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
            sdid.setIticketstationid(s.getId().getIticketstationid());
            sd.setId(sdid);
            sd.setIticketwinid(s.getIticketwinid());
            sd.setIcrowdkindpriceid(icrowdkindpriceid);
            sd.setItickettypeid(itickettypeid);
            sd.setIplayerperticket(new Long(1));// 人/张
            sd.setIticketnum(iticketnum);// 张数
            sd.setIticketplayer(iticketnum);// 人次
            sd.setDtstartdate(dtstartdate);
            sd.setDtenddate(dtenddate);
            sd.setIstartid(new Long(0));
            sd.setIendid(new Long(0));
            sd.setSzstartserial("0");
            sd.setSzendserial("0");
            sd.setIoffersschemeid(new Long(0));
            sd.setIamount(iticketnum);
            sd.setIpresentnums(new Long(0));
            sd.setIderatenums(new Long(0));
            sd.setIfactnum(new Long(0));
            sd.setIuseablenessnum(iticketnum);// 使用数量
            sd.setMactualsaleprice(mactualsaleprice);// 实际售价
            sd.setMeventmoney(meventmoney);// 实际发生金额
            sd.setMderatemoney(new Double(0));// 减免金额
            sd.setMpresentmoney(new Double(0));// 赠送金额
            sd.setMnominalfee(new Double(0));// 工本费
            sd.setMdeposit(new Double(0));
            sd.setMhandcharge(new Double(0));
            sd.setByconsumetype("00");
            sd.setIconsumenum(new Double(0));
            sd.setMtotalamount(meventmoney);
            sd.setItotalnumber(iticketnum);
            sd.setItotalminutes(new Long(0));
            sd.setByisout(new Long(1));
            sd.setDtmakedate(Tools.getDayTimes());
            sd.setIversion(new Long(0));
            detaillist.add(sd);

            for (int j = 1; j <= sd.getIticketnum().intValue(); j++) {
                Stssoldtickettab stsv = new Stssoldtickettab();
                StssoldtickettabId stsvid = new StssoldtickettabId();
                stsvid.setIsalesvoucherid(sd.getId().getIsalesvoucherid());
                stsvid.setIticketstationid(sd.getId().getIticketstationid());
                stsvid.setIsalesvoucherdetailsid(sd.getId()
                        .getIsalesvoucherdetailsid());
                stsvid.setSzsoldticketid(szsoldticketid);
                szsoldticketid = szsoldticketid + 1;
                stsv.setId(stsvid);
                stsv.setIscenicid(s.getIscenicid());
                stsv.setIcrowdkindid(edmcrowdkindpricetab.getIcrowdkindid());
                stsv.setItickettypeid(sd.getItickettypeid());
                stsv.setUsid(s.getUsid());
                stsv.setIbusinessid(s.getIbusinessid());
                stsv.setDyusid(s.getDyusid());
                stsv.setIplayerperticket(sd.getIplayerperticket());// 人次数
                stsv.setDtstartdate(sd.getDtstartdate());
                stsv.setDtenddate(sd.getDtenddate());
                stsv.setMhandcharge(new Double(0));
                stsv.setByvalidity("00");
                stsv.setDtmakedate(daytime);
                Long iserialnum = timeSharingDao.getSequenceId("ticketid_sequence");
                stsv.setIserialnum(iserialnum);
                String newmaxorno = Tools.ConvertTo36Text(iserialnum, 0);
                StringBuffer printno = new StringBuffer();
                printno.append(esbticketstation.getSzstationcode());
                printno.append(scenic.getSzsceniccode());
                printno.append(eticket.getSztickettypecode());
                if (newmaxorno.length() < 6) {
                    for (int b = 0; b < 6 - newmaxorno.length(); b++) {
                        printno.append("0");
                    }
                }
                printno.append(newmaxorno);
                String szprintno = Tools.ticketMakeMd5(printno.toString());
                stsv.setSzticketprintno(szprintno);
                stsv.setMremainmoney(new Double(0));
                stsv.setMpresentmoney(new Double(0));
                stsv.setMactualsaleprice(sd.getMactualsaleprice());
                stsv.setIpresentnum(new Long(0));
                stsv.setIremainnum(new Long(1));// 剩余数量
                stsv.setMnominalfee(new Double(0));
                stsv.setMdeposit(new Double(0));
                stsv.setByticketpurpose("00");
                stsv.setBisrefundbalance(new Long(1));
                stsv.setByactivation("02");
                stsv.setIvaliditynum(new Long(0));
                stsv.setByvalidityunits(new Long(0));
                stsv.setByconsumetype("00");
                if (e.getBywintype().equals("0003")) {
                    // 窗口为年卡窗口
                    stsv.setManyouno(manyouno);
                    stsv.setMyzj(myzj);
                    stsv.setZjno1(mytelno);
                    stsv.setName1(myname);
                } else {
                    if (edmcrowdkindpricetab.getIpeoplenumrange().longValue() == 1) {
                        if (!myzj.equals("")) {
                            stsv.setMyzj(myzj);
                            stsv.setName1(myname);
                            boolean b = false;
                            for (int a = 0; a < zjlist.size(); a++) {
                                Stssoldtickettab zjstsv = (Stssoldtickettab) zjlist
                                        .get(a);
                                if (zjstsv.getMyzj().equals(stsv.getMyzj())) {
                                    if (zjstsv.getItickettypeid().longValue() == stsv
                                            .getItickettypeid()) {
                                        if (zjstsv.getDtstartdate().equals(
                                                stsv.getDtstartdate())) {
                                            b = true;
                                            zjstsv.setIplayerperticket(zjstsv
                                                    .getIplayerperticket() + 1);
                                            if (zjstsv.getIplayerperticket()
                                                    .longValue() > maxnumb) {
                                                throw new RuntimeException(
                                                        "一张身份证只能购买同一天的"
                                                                + maxnumb
                                                                + "张"
                                                                + eticket
                                                                .getSztickettypename());
                                            }
                                            if (zjstsv.getIplayerperticket()
                                                    .longValue() <= maxnumb) {
                                                String hsql = "select distinct new map(e.szticketprintno) from Stssoldtickettab e,Stssoldticketsubtab st where e.itickettypeid="
                                                        + itickettypeid
                                                        + " and e.dtstartdate='"
                                                        + dtstartdate
                                                        + "' and e.myzj='"
                                                        + myzj
                                                        + "' and st.id.isalesvoucherid=e.id.isalesvoucherid and st.id.iticketstationid=e.id.iticketstationid and st.id.szsoldticketid=e.id.szsoldticketid and e.id.isalesvoucherdetailsid=st.id.isalesvoucherdetailsid and st.isvalid=1 ";
                                                List plist = timeSharingDao
                                                        .find(hsql);
                                                if (plist != null
                                                        && plist.size() > maxnumb
                                                        - zjstsv.getIplayerperticket()
                                                        .longValue()) {
                                                    throw new RuntimeException(
                                                            "一张身份证只能购买同一天的"
                                                                    + maxnumb
                                                                    + "张"
                                                                    + eticket
                                                                    .getSztickettypename());
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (b == false) {
                                // 没有匹配的数据
                                Stssoldtickettab zjstsv = new Stssoldtickettab();
                                zjstsv.setItickettypeid(stsv.getItickettypeid());
                                zjstsv.setDtstartdate(stsv.getDtstartdate());
                                zjstsv.setMyzj(stsv.getMyzj());
                                zjstsv.setIplayerperticket(new Long(1));
                                zjlist.add(zjstsv);
                                String hsql = "select distinct new map(e.szticketprintno) from Stssoldtickettab e,Stssoldticketsubtab st where e.itickettypeid="
                                        + itickettypeid
                                        + " and e.dtstartdate='"
                                        + dtstartdate
                                        + "' and e.myzj='"
                                        + myzj
                                        + "' and st.id.isalesvoucherid=e.id.isalesvoucherid and st.id.iticketstationid=e.id.iticketstationid and st.id.szsoldticketid=e.id.szsoldticketid and e.id.isalesvoucherdetailsid=st.id.isalesvoucherdetailsid and st.isvalid=1 ";
                                List plist = timeSharingDao.find(hsql);
                                if (plist != null && plist.size() > maxnumb - 1) {
                                    throw new RuntimeException("一张身份证只能购买同一天的"
                                            + maxnumb + "张"
                                            + eticket.getSztickettypename());
                                }
                            }
                        }
                    }
                }
                cdetaillist.add(stsv);
            }
        }

        if (iaccountreceivable != smont) {
            throw new RuntimeException("明细金额之和" + smont + "与总金额"
                    + iaccountreceivable + "不等");
        }

        String[] comticketsalesdetail = comticketsalesdetails.split(":");
        List zdetaillist = new ArrayList();
        List cdzetaillist = new ArrayList();
        long n = 0;
        Long ss = new Long(0);
        Long oisplitamount = new Long(0);
        long yisalsvoucherdetailid = 0;

        for (int i = 0; i < comticketsalesdetail.length; i++) {
            String[] zdetail = comticketsalesdetail[i].split("&");
            Stscomticketsalesdetailstab zstd = new Stscomticketsalesdetailstab();
            StscomticketsalesdetailstabId zstdid = new StscomticketsalesdetailstabId();
            Long isalesvoucherdetailsid = new Long(zdetail[0]);
            Long icrowdkindpriceid = new Long(zdetail[1]);
            Edmcrowdkindpricetab edprice = (Edmcrowdkindpricetab) timeSharingDao
                    .get(Edmcrowdkindpricetab.class, icrowdkindpriceid);
            Long itickettypeid = new Long(zdetail[2]);
            Long iztickettypeid = new Long(zdetail[3]);
            Long isplitamount = new Long(zdetail[4]);
            Long tripid = new Long(zdetail[5]);
            Long ivenueareaid = new Long(zdetail[6]);
            Long ivenueseatsid = new Long(zdetail[7]);
            String dtstartdate = zdetail[8];
            String dtenddate = zdetail[9];
            if (itickettypeid.longValue() == iztickettypeid.longValue()
                    && tripid.longValue() > 0) {
                String hsql = " from Productcontrol where itickettypeid="
                        + itickettypeid + " and tripid=" + tripid
                        + " and stdata='" + dtstartdate
                        + "' and controltype='03'";
                List plist = timeSharingDao.find(hsql);
                Productcontrol p2 = (Productcontrol) plist.get(0);
                if (p2.getIsxianjin() == null || p2.getIsxianjin() == 0) {

                    throw new RuntimeException("现金窗口目前不能销售" + dtstartdate + "第"
                            + tripid + "趟的单竹筏票");

                }
            }

            zstdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
            zstdid.setIticketstationid(s.getId().getIticketstationid());
            zstdid.setIsalesvoucherdetailsid(isalesvoucherdetailsid);
            zstd.setIcrowdkindpriceid(icrowdkindpriceid);
            zstd.setItickettypeid(itickettypeid);
            zstd.setIztickettypeid(iztickettypeid);
            zstd.setMhandcharge(new Double(0));
            zstd.setDtmakedate(daytime);
            Prdtripvenuemanage p = new Prdtripvenuemanage();
            if (tripid.longValue() > 0) {
                List plist = timeSharingDao
                        .find(" from Prdtripvenuemanage where tripid=" + tripid
                                + " and itickettypeid=" + iztickettypeid
                                + " and startdata<='" + dtstartdate
                                + "' and enddata>='" + dtstartdate + "'");

                p = (Prdtripvenuemanage) plist.get(0);
                zstd.setTripid(tripid);
                zstd.setDtstartdate(dtstartdate + " " + p.getStarttime()
                        + ":00");
                zstd.setDtenddate(dtstartdate + " " + p.getEndtime() + ":00");
                // 判断竹筏时间是否过期
                Calendar now = Calendar.getInstance(TimeZone
                        .getTimeZone("GMT+08:00"));
                SimpleDateFormat df = new SimpleDateFormat(
                        "yyyy-MM-dd HH:mm:ss");

                try {
                    Date d2 = df.parse(zstd.getDtenddate());
                    Calendar endcalendar = Calendar.getInstance();
                    endcalendar.setTime(d2);
                    // 补入不用判断竹筏是否过期
                    if (pzlb.equals("01")) {
                        if (now.after(endcalendar)) {
                            // rs.addRow(new String[] { "false", "竹筏趟次过期，不能销售"
                            // });
                            throw new RuntimeException("竹筏趟次过期，不能销售");
                        }
                    }
                } catch (ParseException e1) {
                    throw new RuntimeException("竹筏趟次过期，不能销售");
                }

                if (ivenueareaid == 0) {
                    zstd.setIvenueareaid(p.getIvenueareaid());
                    zstd.setIvenueid(p.getIvenueid());
                } else {
                    zstd.setIvenueareaid(ivenueareaid);
                    zstd.setIvenueid(p.getIvenueid());
                }
                zstd.setIvenueseatsid(ivenueseatsid);
            } else {
                zstd.setTripid(tripid);
                zstd.setIvenueareaid(new Long(0));
                zstd.setIvenueid(new Long(0));
                zstd.setIvenueseatsid(new Long(0));
                zstd.setDtstartdate(dtstartdate + " 00:00:00");
                zstd.setDtenddate(dtenddate + " 23:59:59");
            }

            zstd.setIversion(new Long(0));
            List list = timeSharingDao
                    .find(" from Edmticketcomposepricetab where id.icrowdkindpriceid="
                            + icrowdkindpriceid
                            + " and itickettypeid='"
                            + iztickettypeid + "'");
            if (list == null || list.size() == 0) {
                throw new RuntimeException("票价编号为" + icrowdkindpriceid
                        + "无子票价格");
            } else {
                Edmticketcomposepricetab edt = (Edmticketcomposepricetab) list
                        .get(0);
                zstdid.setIcomticketsalesdetailsid(edt.getId()
                        .getIticketcomposepriceid());
                zstd.setId(zstdid);
                zstd.setIsplitamount(isplitamount * edt.getNumb());
                zstd.setMsplitprice(edt.getMactualsaleprice());
                zstd.setMsplitmoney(edt.getMactualsaleprice() * edt.getNumb()
                        * isplitamount);
                zdetaillist.add(zstd);
                List opwwlist = timeSharingDao
                        .find(" from Opwwicketsettab where itickettypeid="
                                + itickettypeid + " and izticktypeid="
                                + iztickettypeid);
                if (yisalsvoucherdetailid == 0) {
                    yisalsvoucherdetailid = isalesvoucherdetailsid.longValue();
                    oisplitamount = isplitamount;
                } else {
                    if (yisalsvoucherdetailid != isalesvoucherdetailsid
                            .longValue()) {
                        ss = ss + oisplitamount;
                        oisplitamount = isplitamount;
                        yisalsvoucherdetailid = isalesvoucherdetailsid
                                .longValue();
                    }
                }
                if (opwwlist.size() == 0) {
                    Edmtickettypetab edticket = (Edmtickettypetab) timeSharingDao
                            .get(Edmtickettypetab.class, itickettypeid);
                    throw new RuntimeException(edticket.getSztickettypename()
                            + "的检票园门数据不全");

                }

                for (int k = 0; k < opwwlist.size(); k++) {
                    Opwwicketsettab opww = (Opwwicketsettab) opwwlist.get(k);
                    for (int m = 1; m <= isplitamount; m++) {
                        Stssoldticketsubtab stss = new Stssoldticketsubtab();
                        StssoldticketsubtabId stssid = new StssoldticketsubtabId();
                        stssid.setIticketstationid(s.getId()
                                .getIticketstationid());
                        stssid.setSzsoldticketid(new Long(ss + m));
                        stssid.setSzsoldticketsubid(new Long(n + 1));
                        n = n + 1;
                        stssid.setIsalesvoucherid(s.getId()
                                .getIsalesvoucherid());
                        stssid.setIsalesvoucherdetailsid(isalesvoucherdetailsid);
                        stss.setId(stssid);
                        stss.setIgardengateid(opww.getIgardengateid());
                        stss.setIscenicid(s.getIscenicid());
                        stss.setItickettypeid(itickettypeid);
                        stss.setIztickettypeid(iztickettypeid);
                        stss.setBychecktype(new Long(0));
                        stss.setByconsumemode(opww.getByconsumemode());
                        stss.setIpasstimes(opww.getIlimittotaltimes());
                        stss.setIpassedtimes(new Long(0));
                        stss.setMsingletimes(opww.getMsingletimes());
                        stss.setMlimitconsume(new Double(0));
                        stss.setMsingleconsume(new Double(0));
                        stss.setMconsumed(new Double(0));
                        stss.setByisout(new Long(1));
                        stss.setIsvalid(new Long(1));
                        stss.setDtmakedate(daytime);
                        stss.setBylastcheckdir(new Long(0));
                        stss.setIcrowdkindid(edprice.getIcrowdkindid());
                        if (tripid.longValue() > 0
                                && opww.getIlimittotaltimes() == 1) {
                            stss.setTripid(tripid);
                            stss.setDtbegindate(dtstartdate + " "
                                    + p.getStarttime() + ":00");
                            stss.setDtenddate(dtenddate + " " + p.getEndtime()
                                    + ":00");
                        } else {
                            stss.setTripid(new Long(0));
                            stss.setDtbegindate(dtstartdate + " " + "00:00:00");
                            stss.setDtenddate(dtenddate + " " + "23:59:59");
                        }
                        cdzetaillist.add(stss);
                    }
                }

            }
        }

        timeSharingDao.save(s);
        timeSharingDao.save(st);
        for (int i = 0; i < detaillist.size(); i++) {
            Stssalesvoucherdetailstab sd = (Stssalesvoucherdetailstab) detaillist
                    .get(i);
            timeSharingDao.save(sd);
        }
        Sysparv5 sv5 = (Sysparv5) timeSharingDao.get(Sysparv5.class,
                new Sysparv5Id("PRCS", "01"));
        String printcs = "0";
        if (sv5 != null) {
            printcs = sv5.getPmva();
        }

        for (int i = 0; i < cdetaillist.size(); i++) {
            Stssoldtickettab stsv = (Stssoldtickettab) cdetaillist.get(i);
            timeSharingDao.save(stsv);

            if (pzlb.equals("01")) {

                if (printcs.equals("1")) {
                    Ticketprintlist t = new Ticketprintlist();
                    t.setSzsalesvoucherno(s.getSzsalesvoucherno());
                    t.setIemployeeid(iemployeeid);
                    t.setPrinttype("01");
                    t.setSzticketprintno(stsv.getSzticketprintno());
                    t.setPrinttime(daytime);
                    t.setIsok(new Long(0));
                    try {

                        Long printid = timeSharingDao.getSequenceId("PRINT_ID");
                        t.setPrintid(printid);
                        timeSharingDao.save(t);
                    } catch (Exception e1) {
                        e1.printStackTrace();
                        System.out.println(e1.getMessage());
                    }
                }
            }

        }

        for (int i = 0; i < zdetaillist.size(); i++) {
            Stscomticketsalesdetailstab zstd = (Stscomticketsalesdetailstab) zdetaillist
                    .get(i);
            timeSharingDao.save(zstd);
        }

        for (int i = 0; i < cdzetaillist.size(); i++) {
            Stssoldticketsubtab stss = (Stssoldticketsubtab) cdzetaillist
                    .get(i);
            timeSharingDao.save(stss);
        }

        rs.addRow(new String[] { "true",
                s.getId().getIsalesvoucherid().toString() });
        return rs;

    }

    public ResultBean savebenditorder(String orid, Long iscenicid,
                                      Long iemployeeid, Long iticketwinid, Long maxid) throws Exception {
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        String message = "";
        TOrder t = (TOrder) timeSharingDao.get(TOrder.class, new TOrderId(orid,
                iscenicid));
        if (t == null) {
            message = "订单不存在";
            rs.addRow(new String[] { "false", message });
            return rs;
        } else {
            if (t.getDdzt().equals("11")) {
                message = "订单已出票，无需再次出票";
                rs.addRow(new String[] { "false", message });
                return rs;
            } else {
                if (t.getIbusinessid().longValue() != 3) {
                    if (!t.getDdzt().equals("02")) {
                        message = "订单未付款";
                        rs.addRow(new String[] { "false", message });
                        return rs;
                    }
                }
            }
        }
        List listorder = timeSharingDao.find(" from TOrderlist t where t.id.orid='"
                + orid + "' and t.id.iscenicid=" + iscenicid
                + " and t.numb>0 order by orderlistid");
        if (listorder == null || listorder.size() == 0) {
            message = "订单已全部退订";
            rs.addRow(new String[] { "false", message });
            return rs;
        }
        List listzorder = timeSharingDao
                .find(" from TZorderlist t where t.id.orid='" + orid
                        + "' and t.id.iscenicid=" + iscenicid
                        + " and t.znumb>0 order by orderlistid");
        Long iztickettypeid = new Long(0);
        Long tripid = new Long(0);
        String stdt = "";
        Prdtripvenuemanage p = new Prdtripvenuemanage();
        for (int i = 0; i < listzorder.size(); i++) {
            TZorderlist tz = (TZorderlist) listzorder.get(i);
            if (tz.getTripid().longValue() > 0) {
                if (iztickettypeid != tz.getIztickettypeid()
                        || tripid != tz.getTripid()
                        || !stdt.equals(tz.getDtstartdate().substring(0, 10))) {
                    iztickettypeid = tz.getIztickettypeid();
                    tripid = tz.getTripid();
                    stdt = tz.getDtstartdate().substring(0, 10);
                    String hsql1 = "from Prdtripvenuemanage where tripid="
                            + tripid + " and itickettypeid=" + iztickettypeid
                            + " and startdata<='" + stdt + "' and enddata>='"
                            + stdt + "'";
                    List plist = timeSharingDao.find(hsql1);
                    p = (Prdtripvenuemanage) plist.get(0);
                }
                tz.setDtstartdate(stdt + " " + p.getStarttime() + ":00");
                tz.setDtenddate(stdt + " " + p.getEndtime() + ":00");
                timeSharingDao.update(tz);
            }
        }

        YOrder yorder = (YOrder) timeSharingDao.get(YOrder.class, new YOrderId(
                orid, iscenicid));
        yorder.setNotec(Tools.getNowString());
        yorder.setIsc(iemployeeid);
        String isettlementid = "";
        if (t.getDdzt().equals("02")) {
            isettlementid = "01";
        } else {
            isettlementid = "00";
        }

        t.setDdzt("11");
        t.setNotec(Tools.getNowString());
        t.setIsc(iemployeeid);
        timeSharingDao.update(t);
        yorder.setDdzt("11");
        yorder.setNotec(Tools.getNowString());
        yorder.setIsc(iemployeeid);
        timeSharingDao.update(yorder);
        List listtorder = timeSharingDao.find("from TOrder where id.orid='" + orid
                + "'");
        boolean b1 = true;
        for (int i = 0; i < listtorder.size(); i++) {
            TOrder pt = (TOrder) listtorder.get(i);
            if (pt.getDdzt().equals("02")) {
                b1 = false;
            }
        }

        if (b1) {
            // 该订单已经全部出票
            MOrder m = (MOrder) timeSharingDao.get(MOrder.class, orid);
            if (m.getNotea() != null && m.getNotea().equals("50")) {
                m.setNotea("51");
            }
            if (m.getNotea() != null && m.getNotea().equals("02")) {
                m.setNotea("11");
            }
            m.setDdzt("11");
            timeSharingDao.update(m);
        }

        Stssalesvouchertab s = new Stssalesvouchertab();
        Esbscenicareatab scenic = (Esbscenicareatab) timeSharingDao.get(
                Esbscenicareatab.class, t.getId().getIscenicid());
        s.setIscenicid(t.getId().getIscenicid());
        s.setIticketwinid(iticketwinid);
        s.setIbusinessid(t.getIbusinessid());
        s.setIhandler(iemployeeid);
        s.setIpayeer(iemployeeid);
        s.setImaker(iemployeeid);
        s.setIauditor(iemployeeid);
        s.setIaccountreceivable(t.getZfmont());// 实收
        s.setIacceptmoney(t.getZfmont());// 应收
        s.setIgivechange(new Double(0));// 找零
        s.setSzsalesvoucherno(t.getId().getOrid());
        String today = Tools.getDays();
        String daytime = Tools.getDayTimes();
        s.setIyear(new Long(today.substring(0, 4)));
        s.setImonth(new Long(today.substring(5, 7)));
        s.setIday(new Long(today.substring(8, 10)));
        s.setDtmakedate(daytime);
        s.setDtauditdate(t.getDtstartdate());
        s.setUsid(t.getUsid());
        s.setBisintegral(new Long(0));
        s.setByprintinvoice(new Long(0));
        s.setBysplitway(new Long(2));
        s.setBisreturn(new Long(1));
        s.setBysalesvouchertype("01");
        s.setBypostrecord(new Long(0));
        s.setBysalesvoucherstate(new Long(1));
        s.setBispay(new Long(0));
        s.setBispayee(new Long(0));
        s.setSztravelbillno(t.getSztravelbillno());
        s.setIregionalid(new Long(t.getIregionalid()));
        if (t.getDyusid() == null || t.getDyusid().equals("")) {
            s.setDyusid("daoyou");
        } else {
            s.setDyusid(t.getDyusid());
        }
        s.setTdlx(t.getTdlx());
        Esbticketwintab e = (Esbticketwintab) timeSharingDao.get(
                Esbticketwintab.class, s.getIticketwinid());
        StssalesvouchertabId id = new StssalesvouchertabId();
        id.setIticketstationid(e.getIticketstationid());
        s.setId(id);

        s.getId().setIsalesvoucherid(maxid);
        // timeSharingDao.save(s);
        Stssalessettlementtab st = new Stssalessettlementtab();
        StssalessettlementtabId sid = new StssalessettlementtabId();
        sid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
        sid.setIticketstationid(s.getId().getIticketstationid());
        sid.setIsalessettlementid(new Long(1));
        st.setId(sid);
        st.setSettlementdata(today);
        st.setSettlementtime(daytime.substring(11));
        st.setDtmakedate(daytime);

        st.setIsettlementid(isettlementid);

        st.setMsettlementmoney(t.getZfmont());
        st.setIversion(new Long(1));
        Esbticketstationtab esbticketstation = (Esbticketstationtab) timeSharingDao
                .get(Esbticketstationtab.class, e.getIticketstationid());
        List detaillist = new ArrayList();
        List cdetaillist = new ArrayList();
        Long szsoldticketid = new Long(1);
        for (int i = 0; i < listorder.size(); i++) {
            TOrderlist tlist = (TOrderlist) listorder.get(i);
            Stssalesvoucherdetailstab sd = new Stssalesvoucherdetailstab();
            StssalesvoucherdetailstabId sdid = new StssalesvoucherdetailstabId();
            sdid.setIsalesvoucherdetailsid(tlist.getId().getOrderlistid());
            sdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
            sdid.setIticketstationid(s.getId().getIticketstationid());
            sd.setId(sdid);
            sd.setIticketwinid(s.getIticketwinid());
            sd.setIcrowdkindpriceid(tlist.getIcrowdkindpriceid());
            sd.setItickettypeid(tlist.getItickettypeid());
            sd.setIplayerperticket(new Long(1));// 人/张
            sd.setIticketnum(tlist.getNumb());// 张数
            sd.setIticketplayer(tlist.getNumb());// 人次
            sd.setDtstartdate(tlist.getDtstartdate());
            sd.setDtenddate(tlist.getDtenddate());
            sd.setIstartid(new Long(0));
            sd.setIendid(new Long(0));
            sd.setSzstartserial("0");
            sd.setSzendserial("0");
            sd.setIoffersschemeid(new Long(0));
            sd.setIamount(tlist.getNumb());
            sd.setIpresentnums(new Long(0));
            sd.setIderatenums(new Long(0));
            sd.setIfactnum(new Long(0));
            sd.setIuseablenessnum(tlist.getNumb());// 使用数量
            sd.setMactualsaleprice(tlist.getPric());// 实际售价
            sd.setMeventmoney(tlist.getAmnt());// 实际发生金额
            sd.setMderatemoney(new Double(0));// 减免金额
            sd.setMpresentmoney(new Double(0));// 赠送金额
            sd.setMnominalfee(new Double(0));// 工本费
            sd.setMdeposit(new Double(0));
            sd.setMhandcharge(new Double(0));
            sd.setByconsumetype("00");
            sd.setIconsumenum(new Double(0));
            sd.setMtotalamount(tlist.getAmnt());
            sd.setItotalnumber(tlist.getNumb());
            sd.setItotalminutes(new Long(0));
            sd.setByisout(new Long(0));
            sd.setDtmakedate(Tools.getDayTimes());
            sd.setIversion(new Long(0));
            detaillist.add(sd);
            // timeSharingDao.save(sd);
            Edmtickettypetab eticket = (Edmtickettypetab) timeSharingDao.get(
                    Edmtickettypetab.class, tlist.getItickettypeid());
            // 添加售出门票表

            for (int j = 1; j <= sd.getIticketnum().intValue(); j++) {
                Stssoldtickettab stsv = new Stssoldtickettab();
                StssoldtickettabId stsvid = new StssoldtickettabId();
                stsvid.setIsalesvoucherid(sd.getId().getIsalesvoucherid());
                stsvid.setIticketstationid(sd.getId().getIticketstationid());
                stsvid.setIsalesvoucherdetailsid(sd.getId()
                        .getIsalesvoucherdetailsid());
                stsvid.setSzsoldticketid(szsoldticketid);
                szsoldticketid = szsoldticketid + 1;
                stsv.setId(stsvid);
                stsv.setIscenicid(s.getIscenicid());
                stsv.setIcrowdkindid(tlist.getIcrowdkindid());
                stsv.setItickettypeid(sd.getItickettypeid());
                stsv.setUsid(s.getUsid());
                stsv.setIbusinessid(s.getIbusinessid());
                stsv.setDyusid(s.getDyusid());
                stsv.setIplayerperticket(sd.getIplayerperticket());// 人次数
                stsv.setDtstartdate(sd.getDtstartdate());
                stsv.setDtenddate(sd.getDtenddate());
                stsv.setMhandcharge(new Double(0));
                stsv.setDtmakedate(daytime);
                stsv.setByvalidity("00");

                List<Map> iserialnumlist = new ArrayList();

                iserialnumlist = timeSharingDao
                        .findBySqlToMapnocolsesession("select ticketid_sequence.nextval  from dual");

                Long iserialnum = new Long(
                        (((Map) iserialnumlist.get(0)).get("NEXTVAL"))
                                .toString());
                stsv.setIserialnum(iserialnum);
                String newmaxorno = Tools.ConvertTo36Text(iserialnum, 0);
                StringBuffer printno = new StringBuffer();
                printno.append(esbticketstation.getSzstationcode());
                printno.append(scenic.getSzsceniccode());
                printno.append(eticket.getSztickettypecode());
                if (newmaxorno.length() < 6) {
                    for (int b = 0; b < 6 - newmaxorno.length(); b++) {
                        printno.append("0");
                    }
                }
                printno.append(newmaxorno);
                String szprintno = Tools.ticketMakeMd5(printno.toString());
                stsv.setSzticketprintno(szprintno);
                stsv.setMremainmoney(new Double(0));
                stsv.setMpresentmoney(new Double(0));
                stsv.setMactualsaleprice(sd.getMactualsaleprice());
                stsv.setIpresentnum(new Long(0));
                stsv.setIremainnum(new Long(1));// 剩余数量
                stsv.setMnominalfee(new Double(0));
                stsv.setMdeposit(new Double(0));
                stsv.setByticketpurpose("00");
                stsv.setBisrefundbalance(new Long(1));
                stsv.setByactivation("02");
                cdetaillist.add(stsv);

            }
        }

        szsoldticketid = new Long(0);
        List zdetaillist = new ArrayList();
        List cdzetaillist = new ArrayList();
        int n = 1;
        long orderlistid = 0;
        long onumb = 0;
        for (int i = 0; i < listzorder.size(); i++) {

            TZorderlist zlist = (TZorderlist) listzorder.get(i);
            Edmtickettypetab edticket = (Edmtickettypetab) timeSharingDao.get(
                    Edmtickettypetab.class, new Long(zlist.getItickettypeid()));

            Stscomticketsalesdetailstab zstd = new Stscomticketsalesdetailstab();
            StscomticketsalesdetailstabId zstdid = new StscomticketsalesdetailstabId();
            zstdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
            zstdid.setIticketstationid(s.getId().getIticketstationid());
            zstdid.setIsalesvoucherdetailsid(zlist.getId().getOrderlistid());
            zstdid.setIcomticketsalesdetailsid(zlist.getId().getZorderlistid());
            zstd.setIcrowdkindpriceid(zlist.getIcrowdkindpriceid());
            zstd.setItickettypeid(zlist.getItickettypeid());
            zstd.setIztickettypeid(zlist.getIztickettypeid());
            zstd.setTripid(zlist.getTripid());
            zstd.setMhandcharge(new Double(0));
            zstd.setDtmakedate(daytime);

            zstd.setIvenueareaid(new Long(0));
            zstd.setIvenueid(new Long(0));
            zstd.setIvenueseatsid(new Long(0));
            if (zlist.getDtstartdate().length() > 10) {

                zstd.setDtstartdate(zlist.getDtstartdate());
                zstd.setDtenddate(zlist.getDtenddate());
            } else {
                zstd.setDtstartdate(zlist.getDtstartdate() + "00:00:00");
                zstd.setDtenddate(zlist.getDtenddate() + "23:59:59");
            }
            if (WebContant.GetKeyValue("gqcp").equals("0")) {
                if (Tools.getDayTimes().compareTo(zstd.getDtenddate()) > 0) {
                    if (zstd.getTripid() > 0) {
                        Trip trip = (Trip) timeSharingDao.get(Trip.class,
                                zstd.getTripid());

                        throw new RuntimeException("产品"
                                + edticket.getSztickettypename() + "的竹筏的"
                                + trip.getTripname() + "已结束");

                    } else {

                        throw new RuntimeException("产品"
                                + edticket.getSztickettypename() + "已过期");
                    }

                }
            }
            zstd.setIversion(new Long(0));
            zstd.setIsplitamount(new Long(zlist.getZnumb()));
            zstd.setMsplitprice(new Double(zlist.getZpric()));
            zstd.setMsplitmoney(new Double(zlist.getZamnt()));
            zstd.setId(zstdid);
            zdetaillist.add(zstd);

            if (orderlistid == 0) {
                orderlistid = zlist.getId().getOrderlistid();
                onumb = zlist.getZnumb().longValue();
            } else {
                if (orderlistid != zlist.getId().getOrderlistid().longValue()) {
                    szsoldticketid = szsoldticketid + onumb;
                    onumb = zlist.getZnumb().longValue();
                    orderlistid = zlist.getId().getOrderlistid();
                }
            }

            List opwwlist = timeSharingDao
                    .find(" from Opwwicketsettab where itickettypeid="
                            + zlist.getItickettypeid() + " and izticktypeid="
                            + zlist.getIztickettypeid());
            if (opwwlist.size() == 0) {
                throw new RuntimeException("产品"
                        + edticket.getSztickettypename() + "没有检票园门，不能出票");
            }
            for (int k = 0; k < opwwlist.size(); k++) {

                Opwwicketsettab opww = (Opwwicketsettab) opwwlist.get(k);
                for (int m = 1; m <= zlist.getZnumb().longValue(); m++) {
                    Stssoldticketsubtab stss = new Stssoldticketsubtab();
                    StssoldticketsubtabId stssid = new StssoldticketsubtabId();
                    stssid.setIticketstationid(s.getId().getIticketstationid());
                    stssid.setSzsoldticketid(szsoldticketid + m);
                    stssid.setSzsoldticketsubid(new Long(n));
                    n = n + 1;
                    stssid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
                    stssid.setIsalesvoucherdetailsid(zlist.getId()
                            .getOrderlistid());
                    stss.setId(stssid);
                    stss.setIgardengateid(opww.getIgardengateid());
                    stss.setIscenicid(s.getIscenicid());
                    stss.setItickettypeid(zlist.getItickettypeid());
                    stss.setIztickettypeid(zlist.getIztickettypeid());
                    stss.setBychecktype(new Long(0));
                    stss.setByconsumemode(opww.getByconsumemode());
                    stss.setIpasstimes(opww.getIlimittotaltimes());
                    stss.setIpassedtimes(new Long(0));
                    stss.setMsingletimes(opww.getMsingletimes());
                    stss.setMlimitconsume(new Double(0));
                    stss.setMsingleconsume(new Double(0));
                    stss.setMconsumed(new Double(0));
                    stss.setByisout(new Long(1));
                    stss.setIsvalid(new Long(1));
                    stss.setDtmakedate(daytime);
                    stss.setBylastcheckdir(new Long(0));
                    stss.setIcrowdkindid(new Long(zlist.getIcrowdkindid()));
                    if (zlist.getTripid().longValue() > 0) {
                        if (opww.getIlimittotaltimes() == 1) {
                            stss.setTripid(new Long(zlist.getTripid()));
                            if (zlist.getDtstartdate().length() > 10) {
                                stss.setDtbegindate(zlist.getDtstartdate());
                                stss.setDtenddate(zlist.getDtenddate());
                            }
                        } else {
                            stss.setTripid(new Long(0));
                            stss.setDtbegindate(zlist.getDtstartdate());
                            stss.setDtenddate(zlist.getDtenddate());
                        }
                    } else {
                        stss.setTripid(new Long(0));
                        if (zlist.getDtstartdate().length() > 10) {
                            stss.setDtbegindate(zlist.getDtstartdate());
                            stss.setDtenddate(zlist.getDtenddate());

                        } else {
                            stss.setDtbegindate(zlist.getDtstartdate()
                                    + "00:00:00");
                            stss.setDtenddate(zlist.getDtenddate() + "23:59:59");
                        }
                    }
                    cdzetaillist.add(stss);
                    // timeSharingDao.save(stss);
                }
            }
        }
        try {

            timeSharingDao.save(s);
            timeSharingDao.save(st);

            for (int i = 0; i < detaillist.size(); i++) {
                Stssalesvoucherdetailstab sd = (Stssalesvoucherdetailstab) detaillist
                        .get(i);
                timeSharingDao.save(sd);
            }
            Sysparv5 sv5 = (Sysparv5) timeSharingDao.get(Sysparv5.class,
                    new Sysparv5Id("PRCS", "01"));
            String printcs = "0";
            if (sv5 != null) {
                printcs = sv5.getPmva();
            }

            for (int i = 0; i < cdetaillist.size(); i++) {
                Stssoldtickettab stsv = (Stssoldtickettab) cdetaillist.get(i);
                timeSharingDao.save(stsv);
                if (printcs.equals("1")) {
                    Ticketprintlist tp = new Ticketprintlist();
                    // timeSharingDao.save(stsv);
                    tp.setIemployeeid(iemployeeid);
                    tp.setSzsalesvoucherno(s.getSzsalesvoucherno());
                    tp.setPrinttype("01");
                    tp.setSzticketprintno(stsv.getSzticketprintno());
                    tp.setPrinttime(daytime);
                    tp.setIsok(new Long(0));
                    Long printid = timeSharingDao.getSequenceId("PRINT_ID");
                    tp.setPrintid(printid);
                    timeSharingDao.save(t);

                }
            }
            for (int i = 0; i < zdetaillist.size(); i++) {
                Stscomticketsalesdetailstab zstd = (Stscomticketsalesdetailstab) zdetaillist
                        .get(i);
                timeSharingDao.save(zstd);
            }
            for (int i = 0; i < cdzetaillist.size(); i++) {
                Stssoldticketsubtab stss = (Stssoldticketsubtab) cdzetaillist
                        .get(i);
                timeSharingDao.save(stss);
            }

            rs.addRow(new String[] { "true",
                    s.getId().getIsalesvoucherid().toString() });
            return rs;
        } catch (Exception e2) {
            System.out.print("保存失败");
            System.out.println(e2.getMessage());
            throw e2;
        }

    }

	public ResultBean savebendireturntickets(Stssalesvouchertab oldstssalesvouchertab, List returnmodellist,
			Esbticketwintab e, Long iemployeeid, String szsalesvoucherno, Long maxid, Long isqt, Long forceemid,
			String forcenote, Long issx, String productcontrols, String url) throws Exception {
    	if(url==null || url.length()<1){
    		url=WebContant.GetKeyValue("CenterUrl");
    	}
        String nowtime = Tools.getDayTimes();
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        // 查询所有票号所有售出门票表信息
        List plist = new ArrayList();
        try {
            if (productcontrols != null && !productcontrols.equals("")) {
                StringBuffer sql = new StringBuffer();
                sql.append(" from Productcontrol p  where p.controltype='03'  ");
                String[] productcontrol = productcontrols.split(":");
                for (int i = 0; i < productcontrol.length; i++) {
                    String[] control = productcontrol[i].split("&");
                    Long itickettypeid = new Long(control[0]);
                    Long tripid = new Long(control[2]);
                    String stdata = control[3];
                    Long soldnumber = new Long(control[4]);
                    String hsql = " from Productcontrol where itickettypeid="
                            + itickettypeid + " and tripid=" + tripid
                            + " and stdata='" + stdata
                            + "' and controltype='03'";
                    List pplist = timeSharingDao.find(hsql);
                    if (pplist != null && pplist.size() > 0) {
                        Productcontrol p = (Productcontrol) pplist.get(0);
                        p.setSoldnumber(p.getSoldnumber() - soldnumber);
                        // 更新可售量
                        timeSharingDao.update(p);
                    }
                    if (i == 0) {
                        sql.append(" and ( ( p.itickettypeid=" + itickettypeid
                                + "  and p.stdata='" + stdata
                                + "' and  p.tripid=" + tripid + " )  ");
                    } else {
                        sql.append(" or ( p.itickettypeid=" + itickettypeid
                                + "  and p.stdata='" + stdata
                                + "' and  p.tripid=" + tripid + " )  ");
                    }
                }
                sql.append(" )  order by p.itickettypeid,p.stdata");
                plist = timeSharingDao.find(sql.toString());
            }

            List zslist = new ArrayList();// 需删除的Stssol;dticketsubtab表中信息
            List slist = new ArrayList();// 需要修改的Stssoldtickettab表信息
            List stssalelist = new ArrayList();// 需要增加的Stssalesvoucherdetailstab表信息
            // 新的销售凭证表
            List ystssalelist = new ArrayList();// 原销售凭证明细
            List yxsyhlist = new ArrayList(); // 服务商优惠的原销售凭证明细
            List comtlist = new ArrayList(); // 服务商优惠的原票务明细表

            Stssalesvouchertab stssalesvouchertab = new Stssalesvouchertab();
            Long isalesvoucherid = oldstssalesvouchertab.getId()
                    .getIsalesvoucherid();
            Long iticketstationid = oldstssalesvouchertab.getId()
                    .getIticketstationid();
            StssalesvouchertabId stssalesvouchertabid = new StssalesvouchertabId();
            stssalesvouchertabid.setIticketstationid(e.getIticketstationid());
            stssalesvouchertabid.setIsalesvoucherid(new Long(maxid));
            stssalesvouchertab.setId(stssalesvouchertabid);
            stssalesvouchertab.setIscenicid(oldstssalesvouchertab
                    .getIscenicid());
            stssalesvouchertab.setIticketwinid(e.getIticketwinid());
            stssalesvouchertab.setIbusinessid(oldstssalesvouchertab
                    .getIbusinessid());
            stssalesvouchertab.setIhandler(iemployeeid);
            stssalesvouchertab.setIpayeer(iemployeeid);
            stssalesvouchertab.setForcedrefund(forcenote);
            if (isqt.longValue() == 1) {
                stssalesvouchertab.setImaker(forceemid);

            } else {
                stssalesvouchertab.setImaker(iemployeeid);
            }
            stssalesvouchertab.setIauditor(iemployeeid);
            stssalesvouchertab.setDyusid(oldstssalesvouchertab.getDyusid());
            stssalesvouchertab.setIaccountreceivable(new Double(0));
            stssalesvouchertab.setIacceptmoney(new Double(0));
            stssalesvouchertab.setIgivechange(new Double(0));
            stssalesvouchertab.setIyear(new Long(nowtime.substring(0, 4)));
            stssalesvouchertab.setImonth(new Long(nowtime.substring(5, 7)));
            stssalesvouchertab.setIday(new Long(nowtime.substring(8, 10)));
            stssalesvouchertab.setDtmakedate(nowtime);
            stssalesvouchertab.setDtauditdate(nowtime.substring(0, 10));
            stssalesvouchertab.setUsid(oldstssalesvouchertab.getUsid());
            stssalesvouchertab.setBisintegral(new Long(0));
            stssalesvouchertab.setByprintinvoice(new Long(0));
            stssalesvouchertab.setBysplitway(new Long(2));
            stssalesvouchertab.setBisreturn(new Long(1));
            stssalesvouchertab.setBysalesvouchertype("02");
            stssalesvouchertab.setBypostrecord(new Long(0));
            stssalesvouchertab.setBysalesvoucherstate(new Long(1));
            stssalesvouchertab.setBispay(new Long(0));
            stssalesvouchertab.setBispayee(new Long(0));
            stssalesvouchertab.setMhandcharge(new Double(0));
            stssalesvouchertab.setIssalesvoucherid(oldstssalesvouchertab
                    .getId().getIsalesvoucherid());
            stssalesvouchertab.setIsticketstationid(oldstssalesvouchertab
                    .getId().getIticketstationid());
            stssalesvouchertab.setSzsalesvoucherno(szsalesvoucherno);
            List seatlist = new ArrayList();// 读取订单的座位数

            Long numbs = 0L; // 此销售凭证总的使用数量 服务商优惠添加
            List detailList = timeSharingDao
                    .find("select sum(st.iremainnum*st.iplayerperticket) as numb from Stssoldtickettab st where st.id.isalesvoucherid="
                            + oldstssalesvouchertab.getId()
                            .getIsalesvoucherid()
                            + " and st.byvalidity='00'  ");
            if (detailList != null && detailList.size() > 0) {
                if (detailList.get(0) == null || detailList.get(0).equals("")) {

                } else {
                    numbs = (Long) detailList.get(0);
                }

            }
            Long offernum = 0L; // 退票数量

            // 新建stssalesvouchertab完成
            for (int i = 0; i < returnmodellist.size(); i++) {
                Returnmodel returnmodel = (Returnmodel) returnmodellist.get(i);
                // System.out.println("根据票号读取该售出票信息" +
                // returnmodel.getSzticketprintno());
                List list = timeSharingDao
                        .find("from Stssoldtickettab where szticketprintno='"
                                + returnmodel.getSzticketprintno()
                                + "' and isalesvoucherid='"
                                + oldstssalesvouchertab.getId()
                                .getIsalesvoucherid()
                                + "' order by dtmakedate desc");
                Stssoldtickettab stssoldtickettab = (Stssoldtickettab) list
                        .get(0);
                Long jmnumb = new Long(0);// 免票数量
                boolean b = false;
                Stssalesvoucherdetailstab ystssalesvoucherdetailstab = null;
                for (int a = 0; a < ystssalelist.size(); a++) {
                    ystssalesvoucherdetailstab = (Stssalesvoucherdetailstab) ystssalelist
                            .get(a);
                    if (ystssalesvoucherdetailstab.getId()
                            .getIsalesvoucherdetailsid() == stssoldtickettab
                            .getId().getIsalesvoucherdetailsid()
                            && ystssalesvoucherdetailstab.getId()
                            .getIsalesvoucherid() == stssoldtickettab
                            .getId().getIsalesvoucherid()
                            && ystssalesvoucherdetailstab.getId()
                            .getIticketstationid() == stssoldtickettab
                            .getId().getIticketstationid()) {
                        b = true;

                        break;
                    }
                }
                if (!b) {
                    ystssalesvoucherdetailstab = (Stssalesvoucherdetailstab) timeSharingDao
                            .get(Stssalesvoucherdetailstab.class,
                                    new StssalesvoucherdetailstabId(
                                            stssoldtickettab
                                                    .getId()
                                                    .getIsalesvoucherdetailsid(),
                                            isalesvoucherid, iticketstationid));
                    ystssalelist.add(ystssalesvoucherdetailstab);
                }

                boolean bs = false; // 判断是否优惠
                double newamnt = 0D;
                double tdamnt = 0D;
                // 2014-04-03 lijingrui
                // 根据售票门票表 判断此产品所在服务商是否有服务商优惠
                List offerList = timeSharingDao
                        .find("from Edpofferschemetab where iscenicid='"
                                + stssoldtickettab.getIscenicid()
                                + "' and startdata<='"
                                + stssoldtickettab.getDtstartdate()
                                + "' and enddata>='"
                                + stssoldtickettab.getDtstartdate()
                                + "' and byisuse=1 and ioffertype=1 ");
                if (offerList != null && offerList.size() > 0) {
                    Edpofferschemetab edpoffer = (Edpofferschemetab) offerList
                            .get(0);
                    offernum += stssoldtickettab.getIplayerperticket();// 退票数量

                    String yhlx = "0";// 获取优惠方式 0 -最高价 1-最低价
                    Hotelprovider hotel = (Hotelprovider) this.timeSharingDao.get(
                            Hotelprovider.class,
                            stssoldtickettab.getIscenicid());
                    if (hotel != null && hotel.getInoteger8() != null) {
                        yhlx = hotel.getInoteger8().toString();
                    }

                    // 获取退票后可优惠的数量
                    Long yhnums = (numbs - offernum) / edpoffer.getImultiples()
                            * edpoffer.getIoffernum();
                    // 原销售凭证的优惠数量
                    Long ysnums = (numbs - offernum + stssoldtickettab
                            .getIplayerperticket())
                            / edpoffer.getImultiples()
                            * edpoffer.getIoffernum();
                    // 退票后优惠数量小于原优惠数量 说明退票退 退票金额-优惠票的金额
                    if (yhnums != ysnums && ysnums > yhnums) {
                        bs = true;
                        List vourcherList = new ArrayList();
                        if (yhlx.equals("0")) { // 最高价优惠
                            vourcherList = timeSharingDao
                                    .find(" from Stssalesvoucherdetailstab st where st.id.isalesvoucherid="
                                            + oldstssalesvouchertab.getId()
                                            .getIsalesvoucherid()
                                            + "  and st.id.iticketstationid="
                                            + oldstssalesvouchertab.getId()
                                            .getIticketstationid()
                                            + " and st.ioffersschemeid>0 order by st.mactualsaleprice desc");

                        } else {
                            vourcherList = timeSharingDao
                                    .find(" from Stssalesvoucherdetailstab st where st.id.isalesvoucherid="
                                            + oldstssalesvouchertab.getId()
                                            .getIsalesvoucherid()
                                            + "  and st.id.iticketstationid="
                                            + oldstssalesvouchertab.getId()
                                            .getIticketstationid()
                                            + " and st.ioffersschemeid>0 order by st.mactualsaleprice");

                        }

                        Long yhsl = ysnums - yhnums; // 要退的优惠票数量

                        if (vourcherList != null && vourcherList.size() > 0) {
                            Long salenum = 0L;
                            for (int q = 0; q < vourcherList.size(); q++) {
                                Stssalesvoucherdetailstab voucher = (Stssalesvoucherdetailstab) vourcherList
                                        .get(q);
                                salenum = voucher.getIderatenums()
                                        - voucher.getIpresentnums(); // 优惠数量

                                if (yhsl <= salenum) {
                                    // 优惠金额
                                    newamnt += voucher.getMactualsaleprice()
                                            * yhsl;
                                    // 退票金额
                                    tdamnt += ystssalesvoucherdetailstab
                                            .getMactualsaleprice()
                                            * yhsl
                                            - voucher.getMactualsaleprice()
                                            * yhsl;
                                    voucher.setMpresentmoney(voucher
                                            .getMpresentmoney()
                                            + voucher.getMactualsaleprice()
                                            * yhsl);
                                    voucher.setIpresentnums(voucher
                                            .getIpresentnums()
                                            + stssoldtickettab
                                            .getIplayerperticket());

                                    jmnumb += yhsl;

                                    yxsyhlist.add(voucher);

                                    List zdaillist = timeSharingDao
                                            .find("from Stscomticketsalesdetailstab where  id.isalesvoucherid="
                                                    + isalesvoucherid
                                                    + " and id.iticketstationid="
                                                    + iticketstationid
                                                    + " and id.isalesvoucherdetailsid="
                                                    + voucher
                                                    .getId()
                                                    .getIsalesvoucherdetailsid()
                                                    + " order by isalesvoucherdetailsid");
                                    if (zdaillist != null
                                            && zdaillist.size() > 0) {
                                        for (int z = 0; z < zdaillist.size(); z++) {
                                            Stscomticketsalesdetailstab comt = (Stscomticketsalesdetailstab) zdaillist
                                                    .get(z);
                                            comt.setIderatenums(comt
                                                    .getIderatenums() - yhsl);
                                            comt.setMderatemoney(comt
                                                    .getMderatemoney()
                                                    - yhsl
                                                    * comt.getMsplitprice());
                                            comtlist.add(comt);
                                        }
                                    }

                                    break;
                                } else {
                                    // 计算新的总金额
                                    newamnt += (ystssalesvoucherdetailstab
                                            .getIuseablenessnum() - ystssalesvoucherdetailstab
                                            .getIpresentnums())
                                            * ystssalesvoucherdetailstab
                                            .getMactualsaleprice()
                                            - voucher.getMactualsaleprice()
                                            * salenum;
                                    tdamnt += ystssalesvoucherdetailstab
                                            .getMactualsaleprice()
                                            * salenum
                                            - voucher.getMactualsaleprice()
                                            * salenum;
                                    voucher.setMpresentmoney(voucher
                                            .getMpresentmoney()
                                            + voucher.getMactualsaleprice()
                                            * salenum);
                                    voucher.setIpresentnums(voucher
                                            .getIpresentnums()
                                            + stssoldtickettab
                                            .getIplayerperticket());

                                    jmnumb += salenum;

                                    yhsl = yhsl - salenum;

                                    yxsyhlist.add(voucher);

                                    List zdaillist = timeSharingDao
                                            .find("from Stscomticketsalesdetailstab where  id.isalesvoucherid="
                                                    + isalesvoucherid
                                                    + " and id.iticketstationid="
                                                    + iticketstationid
                                                    + " and id.isalesvoucherdetailsid="
                                                    + voucher
                                                    .getId()
                                                    .getIsalesvoucherdetailsid()
                                                    + " order by isalesvoucherdetailsid");
                                    if (zdaillist != null
                                            && zdaillist.size() > 0) {
                                        for (int z = 0; z < zdaillist.size(); z++) {
                                            Stscomticketsalesdetailstab comt = (Stscomticketsalesdetailstab) zdaillist
                                                    .get(z);
                                            comt.setIderatenums(comt
                                                    .getIderatenums() - salenum);
                                            comt.setMderatemoney(comt
                                                    .getMderatemoney()
                                                    - salenum
                                                    * comt.getMsplitprice());
                                            comtlist.add(comt);
                                        }
                                    }
                                }

                            }
                        }

                    }

                } else {
                    if (ystssalesvoucherdetailstab.getIoffersschemeid() > 0) {
                        // 销售过优惠
                        // 判断是否退订该票是减免金额的票
                        Edpofferschemetab edpofferschemetab = (Edpofferschemetab) timeSharingDao
                                .get(Edpofferschemetab.class,
                                        ystssalesvoucherdetailstab
                                                .getIoffersschemeid());
                        // 计算新的总金额
                        newamnt = (ystssalesvoucherdetailstab
                                .getIuseablenessnum()
                                - ystssalesvoucherdetailstab.getIpresentnums()
                                - stssoldtickettab.getIplayerperticket() - (ystssalesvoucherdetailstab
                                .getIuseablenessnum()
                                - ystssalesvoucherdetailstab.getIpresentnums() - stssoldtickettab
                                .getIplayerperticket())
                                / edpofferschemetab.getImultiples()
                                * edpofferschemetab.getIoffernum())

                                * ystssalesvoucherdetailstab
                                .getMactualsaleprice();
                        System.out
                                .println((ystssalesvoucherdetailstab
                                        .getIuseablenessnum()
                                        - ystssalesvoucherdetailstab
                                        .getIpresentnums() - stssoldtickettab
                                        .getIplayerperticket())
                                        / edpofferschemetab.getImultiples()
                                        * edpofferschemetab.getIoffernum());
                        System.out.println("newamnt=" + newamnt);
                        tdamnt = ystssalesvoucherdetailstab.getMeventmoney()
                                - ystssalesvoucherdetailstab.getMderatemoney()
                                - ystssalesvoucherdetailstab.getMpresentmoney()
                                - newamnt;
                        System.out.println("tdamnt=" + tdamnt);
                        ystssalesvoucherdetailstab
                                .setMpresentmoney(ystssalesvoucherdetailstab
                                        .getMpresentmoney() + tdamnt);

                        ystssalesvoucherdetailstab
                                .setIpresentnums(ystssalesvoucherdetailstab
                                        .getIpresentnums()
                                        + stssoldtickettab
                                        .getIplayerperticket());
                        jmnumb = stssoldtickettab.getIplayerperticket()
                                - (long) (tdamnt / ystssalesvoucherdetailstab
                                .getMactualsaleprice());
                        System.out.println("jmnumb=" + jmnumb);
                    }
                }

                // System.out.println("新建凭证明细" +
                // stssoldtickettab.getSzticketprintno());
                Stssalesvoucherdetailstab stssalesvoucherdetailstab = new Stssalesvoucherdetailstab();
                StssalesvoucherdetailstabId id = new StssalesvoucherdetailstabId();
                id.setIsalesvoucherdetailsid(new Long(i + 1));
                id.setIticketstationid(e.getIticketstationid());
                id.setIsalesvoucherid(stssalesvouchertab.getId()
                        .getIsalesvoucherid());
                stssalesvoucherdetailstab.setId(id);
                stssalesvoucherdetailstab
                        .setDtstartdate(ystssalesvoucherdetailstab
                                .getDtstartdate());
                stssalesvoucherdetailstab
                        .setDtenddate(ystssalesvoucherdetailstab.getDtenddate());
                stssalesvoucherdetailstab.setIticketwinid(e.getIticketwinid());
                stssalesvoucherdetailstab
                        .setIcrowdkindpriceid(ystssalesvoucherdetailstab
                                .getIcrowdkindpriceid());
                stssalesvoucherdetailstab
                        .setItickettypeid(ystssalesvoucherdetailstab
                                .getItickettypeid());
                stssalesvoucherdetailstab.setIplayerperticket(stssoldtickettab
                        .getIplayerperticket());// 人/张
                stssalesvoucherdetailstab.setIticketnum(new Long(1));// 张数
                stssalesvoucherdetailstab.setIticketplayer(stssoldtickettab
                        .getIplayerperticket());
                stssalesvoucherdetailstab
                        .setDtstartdate(ystssalesvoucherdetailstab
                                .getDtstartdate());
                stssalesvoucherdetailstab
                        .setDtenddate(ystssalesvoucherdetailstab.getDtenddate());
                stssalesvoucherdetailstab.setIstartid(new Long(0));
                stssalesvoucherdetailstab.setIendid(new Long(0));
                stssalesvoucherdetailstab.setSzstartserial("0");
                stssalesvoucherdetailstab.setSzendserial("0");
                stssalesvoucherdetailstab
                        .setIoffersschemeid(ystssalesvoucherdetailstab
                                .getIoffersschemeid());
                stssalesvoucherdetailstab.setIpresentnums(new Long(0));

                stssalesvoucherdetailstab.setIamount(stssoldtickettab
                        .getIplayerperticket());
                stssalesvoucherdetailstab.setIfactnum(new Long(0)); // 交易数量
                stssalesvoucherdetailstab.setIuseablenessnum(new Long(0));// 使用数量
                stssalesvoucherdetailstab.setMderatemoney(new Double(0));// 减免金额
                stssalesvoucherdetailstab.setMpresentmoney(new Double(0));// 赠送金额
                stssalesvoucherdetailstab.setMnominalfee(new Double(0));// 工本费
                stssalesvoucherdetailstab.setMdeposit(new Double(0));
                stssalesvoucherdetailstab.setMhandcharge(new Double(0));// 手续费
                stssalesvoucherdetailstab.setByconsumetype("00");
                stssalesvoucherdetailstab.setIconsumenum(new Double(0));
                stssalesvoucherdetailstab.setItotalminutes(new Long(0));
                stssalesvoucherdetailstab.setByisout(new Long(0));
                stssalesvoucherdetailstab.setDtmakedate(nowtime);
                stssalesvoucherdetailstab.setIversion(new Long(0));
                stssalesvoucherdetailstab.setMactualsaleprice(new Double(0));
                stssalesvoucherdetailstab.setMeventmoney(new Double(0));
                stssalesvoucherdetailstab.setItotalnumber(new Long(0));
                stssalesvoucherdetailstab.setMtotalamount(new Double(0));
                stssalesvoucherdetailstab.setSzstartserial(returnmodel
                        .getSzticketprintno());
                stssalesvoucherdetailstab.setSzendserial(returnmodel
                        .getSzticketprintno());
                stssalesvoucherdetailstab.setIstartid(stssoldtickettab
                        .getIserialnum());
                stssalesvoucherdetailstab.setIendid(stssoldtickettab
                        .getIserialnum());
                stssalesvoucherdetailstab.setIderatenums(jmnumb);
                List zsdaillist = timeSharingDao
                        .find("from Stssoldticketsubtab where id.isalesvoucherid="
                                + isalesvoucherid
                                + " and id.iticketstationid="
                                + iticketstationid
                                + " and id.isalesvoucherdetailsid="
                                + stssoldtickettab.getId()
                                .getIsalesvoucherdetailsid()
                                + " and id.szsoldticketid="
                                + stssoldtickettab.getId().getSzsoldticketid()
                                + " and isvalid=1 order by iztickettypeid");
                String[] iztickettypeid = returnmodel.getItickettypeids();
                int n = 0;
                long ziztickettypeid = 0;
                for (int j = 0; j < zsdaillist.size(); j++) {
                    Stssoldticketsubtab zs = (Stssoldticketsubtab) zsdaillist
                            .get(j);
                    for (int k = 0; k < iztickettypeid.length; k++) {
                        if (zs.getIztickettypeid().longValue() == Long
                                .parseLong(iztickettypeid[k])) {
                            n = n + 1;
                            zslist.add(zs);

                        }
                    }
                }

                // 根据明细子表中的数据计算明细的各种金额

                List zdaillist = timeSharingDao
                        .find("from Stscomticketsalesdetailstab where  id.isalesvoucherid="
                                + isalesvoucherid
                                + " and id.iticketstationid="
                                + iticketstationid
                                + " and id.isalesvoucherdetailsid="
                                + stssoldtickettab.getId()
                                .getIsalesvoucherdetailsid()
                                + " order by isalesvoucherdetailsid");

                List comlist = new ArrayList();
                for (int j = 0; j < zdaillist.size(); j++) {

                    Stscomticketsalesdetailstab sts = (Stscomticketsalesdetailstab) zdaillist
                            .get(j);
                    for (int k = 0; k < iztickettypeid.length; k++) {

                        if (sts.getIztickettypeid().longValue() == Long
                                .parseLong(iztickettypeid[k])) {
                            stssoldtickettab
                                    .setMactualsaleprice(stssoldtickettab
                                            .getMactualsaleprice()
                                            - sts.getMsplitprice());
                            Stscomticketsalesdetailstab stscom = new Stscomticketsalesdetailstab();
                            StscomticketsalesdetailstabId sid = new StscomticketsalesdetailstabId();
                            sid.setIticketstationid(e.getIticketstationid());
                            sid.setIcomticketsalesdetailsid(sts.getId()
                                    .getIcomticketsalesdetailsid());
                            sid.setIsalesvoucherdetailsid(new Long(i + 1));
                            sid.setIsalesvoucherid(stssalesvouchertab.getId()
                                    .getIsalesvoucherid());
                            stscom.setId(sid);
                            stscom.setDtstartdate(sts.getDtstartdate());
                            stscom.setDtenddate(sts.getDtenddate());
                            stscom.setIcrowdkindpriceid(sts
                                    .getIcrowdkindpriceid());
                            stscom.setIsplitamount(stssoldtickettab
                                    .getIplayerperticket());
                            stscom.setMsplitmoney(sts.getMsplitprice()
                                    * stssoldtickettab.getIplayerperticket());
                            stscom.setIderatenums(jmnumb);
                            stscom.setMderatemoney(sts.getMsplitprice()
                                    * jmnumb);
                            stscom.setMsplitprice(sts.getMsplitprice());
                            stscom.setItickettypeid(sts.getItickettypeid());
                            stscom.setIztickettypeid(sts.getIztickettypeid());
                            stscom.setTripid(sts.getTripid());
                            stscom.setIvenueid(sts.getIvenueid());
                            stscom.setIvenueareaid(sts.getIvenueareaid());
                            stscom.setIvenueseatsid(sts.getIvenueseatsid());
                            stscom.setDtmakedate(nowtime);
                            // 计算手续费
                            // 查询该票是否有退订费率

                            boolean shouxu = true;
                            if (issx == 1) {
                                long bystats = 1;
                                if (sts.getTripid() > 0) {
                                    // 根据plist里面的数据找出对应竹排趟次是否停排
                                    if (plist != null && plist.size() > 0) {
                                        for (int a = 0; a < plist.size(); a++) {
                                            Productcontrol p = (Productcontrol) plist
                                                    .get(a);
                                            if (p.getItickettypeid()
                                                    .longValue() == sts
                                                    .getIztickettypeid()
                                                    .longValue()
                                                    && p.getTripid()
                                                    .longValue() == sts
                                                    .getTripid()
                                                    .longValue()
                                                    && p.getStdata()
                                                    .equals(sts
                                                            .getDtstartdate()
                                                            .substring(
                                                                    0,
                                                                    10))) {
                                                bystats = p.getBystate();
                                            }
                                        }
                                    }
                                }
                                if (bystats == 1) {
                                    List tdlist = timeSharingDao
                                            .find(" from Ticketxgz where itickettypeid="
                                                    + sts.getIztickettypeid()
                                                    + " and xyjs4=1 and isvalid=1");

                                    if (tdlist.size() == 0) {
                                        stscom.setTdfl(new Double(0));
                                    } else {

                                        Ticketxgz tcx = (Ticketxgz) tdlist
                                                .get(0);

                                        if (tcx.getJsfs().equals("0001")) {
                                            // 按小时计算

                                            long hours = 0;
                                            DateFormat df = new SimpleDateFormat(
                                                    "yyyy-MM-dd HH:mm:ss");
                                            String bztime = sts.getDtenddate();
                                            try {
                                                Date d1 = df.parse(nowtime);
                                                Date d2 = df.parse(bztime);
                                                long diff = d2.getTime()
                                                        - d1.getTime();
                                                hours = diff / (1000 * 60 * 60);
                                            } catch (ParseException e1) {
                                                // TODO Auto-generated catch
                                                // block
                                                e1.printStackTrace();
                                            }
                                            if (hours < 0) {
                                                stscom.setTdfl(tcx.getXyrate2());
                                            } else {
                                                List fllist = timeSharingDao
                                                        .find("from Changebackrate where gzid="
                                                                + tcx.getGzid()
                                                                + " and time>"
                                                                + hours
                                                                + " order by time");

                                                if (fllist == null
                                                        || fllist.size() == 0) {

                                                    stscom.setTdfl(new Double(0));
                                                } else {

                                                    Changebackrate grate = (Changebackrate) fllist
                                                            .get(0);
                                                    // 将退订费率保存
                                                    stscom.setTdfl(grate
                                                            .getTdfl());
                                                }

                                            }
                                        } else if (tcx.getJsfs().equals("0002")) {
                                            // 按天计算退订费率
                                            long days = 0;
                                            DateFormat df = new SimpleDateFormat(
                                                    "yyyy-MM-dd HH:mm:ss");
                                            String bztime = sts.getDtenddate();
                                            try {
                                                Date d1 = df.parse(nowtime);
                                                Date d2 = df.parse(bztime);
                                                long diff = d2.getTime()
                                                        - d1.getTime();
                                                days = diff
                                                        / (1000 * 60 * 60 * 24);
                                            } catch (ParseException e1) {
                                                // TODO Auto-generated catch
                                                // block
                                                e1.printStackTrace();
                                            }
                                            if (days < 0) {
                                                stscom.setTdfl(tcx.getXyrate2());
                                                // }
                                            } else {
                                                List fllist = timeSharingDao
                                                        .find("from Changebackrate where gzid="
                                                                + tcx.getGzid()
                                                                + " and time>"
                                                                + days
                                                                + " order by time");
                                                if (fllist == null
                                                        || fllist.size() == 0) {
                                                    stscom.setTdfl(new Double(0));
                                                } else {
                                                    Changebackrate grate = (Changebackrate) fllist
                                                            .get(0);
                                                    // 将退订费率保存
                                                    stscom.setTdfl(grate
                                                            .getTdfl());
                                                }
                                            }
                                        } else if (tcx.getJsfs().equals("0003")) {
                                            // 常年
                                            long days = 0;
                                            DateFormat df = new SimpleDateFormat(
                                                    "yyyy-MM-dd HH:mm:ss");
                                            String bztime = sts.getDtenddate();
                                            try {
                                                Date d1 = df.parse(nowtime);
                                                Date d2 = df.parse(bztime);
                                                long diff = d2.getTime()
                                                        - d1.getTime();
                                                days = diff
                                                        / (1000 * 60 * 60 * 24);
                                            } catch (ParseException e1) {
                                                // TODO Auto-generated catch
                                                // block
                                                e1.printStackTrace();
                                            }
                                            if (days < 0) {
                                                stscom.setTdfl(tcx.getXyrate2());
                                                // }
                                            } else {
                                                List fllist = timeSharingDao
                                                        .find("from Changebackrate where gzid="
                                                                + tcx.getGzid());
                                                if (fllist != null
                                                        && fllist.size() > 0) {
                                                    Changebackrate grate = (Changebackrate) fllist
                                                            .get(0);
                                                    stscom.setTdfl(grate
                                                            .getTdfl());
                                                } else {
                                                    stscom.setTdfl(new Double(0));
                                                }
                                            }
                                        } else {
                                            stscom.setTdfl(new Double(0));
                                        }

                                    }

                                } else {
                                    stscom.setTdfl(new Double(0));
                                }
                            } else {
                                stscom.setTdfl(new Double(0));
                            }

                            stscom.setMhandcharge((stscom.getMsplitmoney() - stscom
                                    .getMderatemoney()) * stscom.getTdfl());
                            stscom.setIversion(new Long(0));
                            comlist.add(stscom);

                            stssalesvoucherdetailstab
                                    .setMactualsaleprice(stssalesvoucherdetailstab
                                            .getMactualsaleprice()
                                            + sts.getMsplitprice());

                            stssalesvoucherdetailstab
                                    .setItotalnumber(stssoldtickettab
                                            .getIplayerperticket());
                            stssalesvoucherdetailstab
                                    .setMhandcharge(stssalesvoucherdetailstab
                                            .getMhandcharge()
                                            + stscom.getMhandcharge());// 手续费
                            stssalesvoucherdetailstab
                                    .setMeventmoney(stssalesvoucherdetailstab
                                            .getMeventmoney()
                                            + stscom.getMsplitmoney());
                            stssalesvoucherdetailstab
                                    .setMtotalamount(stssalesvoucherdetailstab
                                            .getMtotalamount()
                                            + stscom.getMsplitmoney());
                            stssalesvoucherdetailstab.setMderatemoney(jmnumb
                                    * stssalesvoucherdetailstab
                                    .getMactualsaleprice());
                            // 跟新凭证金额数据
                            stssalesvouchertab
                                    .setIaccountreceivable(stssalesvouchertab
                                            .getIaccountreceivable()
                                            + stscom.getMsplitmoney()
                                            - stscom.getMderatemoney());
                            stssalesvouchertab
                                    .setIacceptmoney(stssalesvouchertab
                                            .getIacceptmoney()
                                            + stscom.getMsplitmoney()
                                            - stscom.getMderatemoney());
                            stssalesvouchertab
                                    .setMhandcharge(stssalesvouchertab
                                            .getMhandcharge()
                                            + stscom.getMhandcharge());

                            // tpsx = tpsx + sts.getMsplitprice() *
                            // stscom.getTdfl();
                            List Seatsalelist = this.timeSharingDao
                                    .find(" from Seatsaletab where id.isalesvoucherid="
                                            + sts.getId().getIsalesvoucherid()
                                            + " and id.iticketstationid="
                                            + sts.getId().getIticketstationid()
                                            + " and id.isalesvoucherdetailsid="
                                            + sts.getId()
                                            .getIsalesvoucherdetailsid()
                                            + " and id.icomticketsalesdetailsid="
                                            + sts.getId()
                                            .getIcomticketsalesdetailsid()
                                            + " and id.szsoldticketid="
                                            + stssoldtickettab.getId()
                                            .getSzsoldticketid());
                            if (Seatsalelist != null && Seatsalelist.size() > 0) {
                                for (int a = 0; a < Seatsalelist.size(); a++) {
                                    Seatsaletab seat = (Seatsaletab) Seatsalelist
                                            .get(a);
                                    seat.setIsvalid(0L);// 退订
                                    seatlist.add(seat);
                                }
                            }
                        }
                    }
                }
                stssalesvoucherdetailstab.setComlist(comlist);
                stssalelist.add(stssalesvoucherdetailstab);
                slist.add(stssoldtickettab);
            }

            Stssalessettlementtab st = new Stssalessettlementtab();
            StssalessettlementtabId sid = new StssalessettlementtabId();
            sid.setIsalesvoucherid(stssalesvouchertab.getId()
                    .getIsalesvoucherid());
            sid.setIticketstationid(stssalesvouchertab.getId()
                    .getIticketstationid());

            sid.setIsalessettlementid(new Long(1));
            st.setId(sid);
            st.setSettlementdata(nowtime.substring(0, 10));
            st.setSettlementtime(nowtime.substring(11));
            st.setDtmakedate(nowtime);

            StssalessettlementtabId oldsid = new StssalessettlementtabId();
            oldsid.setIsalesvoucherid(oldstssalesvouchertab.getId()
                    .getIsalesvoucherid());
            oldsid.setIticketstationid(oldstssalesvouchertab.getId()
                    .getIticketstationid());
            oldsid.setIsalessettlementid(new Long(1));
            Stssalessettlementtab oldstssalessettlementtab = (Stssalessettlementtab) timeSharingDao
                    .get(Stssalessettlementtab.class, oldsid);
            st.setIsettlementid(oldstssalessettlementtab.getIsettlementid());

            st.setMsettlementmoney(stssalesvouchertab.getIacceptmoney()
                    - stssalesvouchertab.getMhandcharge());
            st.setIversion(new Long(1));
            for (int i = 0; i < seatlist.size(); i++) {
                Seatsaletab seatt = (Seatsaletab) seatlist.get(i);
                this.timeSharingDao.update(seatt);
                SeatstatustabId seattsid = new SeatstatustabId();
                seattsid.setIvenueid(seatt.getIvenueid());
                seattsid.setIvenueareaid(seatt.getIvenueareaid());
                seattsid.setItripid(seatt.getItripid());
                seattsid.setIseatid(seatt.getIseatid());
                seattsid.setStartdate(seatt.getStartdate());
                Seatstatustab seatts = (Seatstatustab) timeSharingDao.get(
                        Seatstatustab.class, seattsid);
                this.timeSharingDao.delete(seatts);
            }
            // System.out.println("开始保存");
            String stockUsid = stssalesvouchertab.getUsid();
//            Custom c = (Custom) timeSharingDao.get(Custom.class,stockUsid);
            Custom c = ecService.getCustomByUserId(stockUsid);
            if(c.getIbusinessid().longValue() == 2L && c.getUstp().equals("02") && c.getUsqx().startsWith("0111")){
                stockUsid = c.getSusid();
            }else if(c.getIbusinessid().longValue() == 3L && c.getUstp().equals("02")){
                stockUsid = c.getSusid();
            }
            timeSharingService.save(stssalesvouchertab);
            timeSharingService.save(st);

            // 将网上订单数据保存到本地的订单表中
            // timeSharingDao.save(st);
            for (int i = 0; i < stssalelist.size(); i++) {
                Stssalesvoucherdetailstab ss = (Stssalesvoucherdetailstab) stssalelist
                        .get(i);
				Edmcrowdkindpricetab edmcrowdkindpricetab = (Edmcrowdkindpricetab) timeSharingService
						.get(Edmcrowdkindpricetab.class, ss.getIcrowdkindpriceid());
                timeSharingService.save(ss);
                List comlist = ss.getComlist();
                for (int j = 0; j < comlist.size(); j++) {
                    Stscomticketsalesdetailstab stscom = (Stscomticketsalesdetailstab) comlist
                            .get(j);
                    timeSharingService.save(stscom);
                }
            }

            for (int i = 0; i < zslist.size(); i++) {
                Stssoldticketsubtab zs = (Stssoldticketsubtab) zslist.get(i);
                zs.setIsvalid(new Long(-1));
                zs.setDtmakedate(nowtime);
                timeSharingService.update(zs);
                StsschecktabId scid = new StsschecktabId();
                scid.setIsalesvoucherid(zs.getId().getIsalesvoucherid());
                scid.setIsalesvoucherdetailsid(zs.getId()
                        .getIsalesvoucherdetailsid());
                scid.setIticketstationid(zs.getId().getIticketstationid());
                scid.setSzsoldticketid(zs.getId().getSzsoldticketid());
                scid.setSzsoldticketsubid(zs.getId().getSzsoldticketsubid());
                Stsschecktab sc = (Stsschecktab) this.timeSharingService.get(
                        Stsschecktab.class, scid);
                if (sc != null) {
                    sc.setIsvalid(new Long(-1));
                    sc.setDtmakedate(nowtime);
                    timeSharingService.update(sc);
                }
            }
            List<StockOrderInfo> stocks = new ArrayList<StockOrderInfo>();
            String stockJson = "";
            for (int i = 0; i < slist.size(); i++) {
                Stssoldtickettab s3 = (Stssoldtickettab) slist.get(i);
                // 判断是否已经全部退订
                List zsdaillist = timeSharingService
                        .find("from Stssoldticketsubtab where id.isalesvoucherid="
                                + isalesvoucherid
                                + " and id.iticketstationid="
                                + iticketstationid
                                + " and id.isalesvoucherdetailsid="
                                + s3.getId().getIsalesvoucherdetailsid()
                                + " and id.szsoldticketid="
                                + s3.getId().getSzsoldticketid()
                                + " and isvalid=1 order by iztickettypeid");
                if (zsdaillist == null || zsdaillist.size() == 0) {
                    s3.setByvalidity("01");// 全部退订
                    StockOrderInfo stockOrderInfo = new StockOrderInfo();
                    stockOrderInfo.setOrid(stssalesvouchertab.getSzsalesvoucherno());
                    stockOrderInfo.setProviderId(stssalesvouchertab.getIscenicid());
                    stockOrderInfo.setProductId(s3.getItickettypeid());
                    Stssalesvoucherdetailstab std = (Stssalesvoucherdetailstab) timeSharingDao.get(Stssalesvoucherdetailstab.class,
                            new StssalesvoucherdetailstabId(s3.getId().getIsalesvoucherdetailsid(),isalesvoucherid,iticketstationid));
                    stockOrderInfo.setPriceId(std.getIcrowdkindpriceid());
                    stockOrderInfo.setStockDate(s3.getDtstartdate());
                    stockOrderInfo.setNumb(-s3.getIplayerperticket());
                    stockOrderInfo.setUsid(stockUsid);
                    stocks.add(stockOrderInfo);
                }
                s3.setDtmakedate(nowtime);
                timeSharingService.update(s3);
            }

            if (ystssalelist != null && ystssalelist.size() > 0) {
                for (int i = 0; i < ystssalelist.size(); i++) {
                    Stssalesvoucherdetailstab ystssalesvoucherdetailstab = (Stssalesvoucherdetailstab) ystssalelist
                            .get(i);
                    timeSharingService.update(ystssalesvoucherdetailstab);
                }
            }

            // 服务商优惠 修改优惠明细
            if (yxsyhlist != null && yxsyhlist.size() > 0) {
                for (int h = 0; h < yxsyhlist.size(); h++) {
                    Stssalesvoucherdetailstab sts = (Stssalesvoucherdetailstab) yxsyhlist
                            .get(h);
                    timeSharingService.update(sts);
                }
            }
            if (comtlist != null && comtlist.size() > 0) {
                for (int z = 0; z < comtlist.size(); z++) {
                    Stscomticketsalesdetailstab comt = (Stscomticketsalesdetailstab) comtlist
                            .get(z);
                    timeSharingService.update(comt);
                }
            }
            Sysparv5 sysp = getSysparv5("COMM","0006");
            if(sysp == null){
                sysp = new Sysparv5();
                sysp.setIsvalue(1L);
            }
            //退还库存
            if (WebContant.GetKeyValue("IsCenterUrl").equals("1") && sysp.getIsvalue() == 1L) {
                try {
                	Client client = JaxWsDynamicClientFactoryUtil.getCfxClientInstance(url, ServerNameConst.SALESERVICE);
    				client.invoke("saveStock", stockJson, "false");
                } catch (Exception e11) {
                    LOGGER.info("中心归还库存异常："+StringUtil.toString_02(e11));
                    stockService.saveStockDetails(stocks, false);
                }
            }else{
                try{
                    stockService.saveStockDetails(stocks, false);
                }catch (Exception e1){
                    LOGGER.info("本地归还库存异常："+StringUtil.toString_02(e1));
                }
            }
            if(st.getIsettlementid().equals("51")){//一卡通支付退订
                List<PaymentBill> paymentBills = timeSharingDao.find("from PaymentBill where orid = '"+oldstssalesvouchertab.getSzsalesvoucherno()+"' and status = 'Y' and orderType = 1 ");
                if(paymentBills != null && !paymentBills.isEmpty()){
                    PaymentBill paymentBill = paymentBills.get(0);
                    IOneCardService oneCardService = (IOneCardService) SpringUtil.getBean("oneCardService");
                    RefundRequest request = new RefundRequest();
                    request.setTargetClass("com.ectrip.sale.service.card.websersvice.OneCardWebservice");
                    request.setMethod("refund");
                    request.setIticketwinid(e.getIticketwinid().toString());
                    request.setIemployeeid(iemployeeid.toString());
                    request.setPrintReceipt("00");
                    request.setOrid(paymentBill.getPayCode());
                    request.setIemployeeid(iemployeeid.toString());
                    request.setSiemployeeid((forceemid == null || forceemid == 0L) ? iemployeeid.toString() : forceemid.toString());
                    request.setNote(forcenote);
                    request.setRefundTicketMoney(st.getMsettlementmoney().toString());
                    request.setRefundTicketOrid(stssalesvouchertab.getSzsalesvoucherno());
                    RefundResponse response = (RefundResponse) oneCardService.refund(request);
                    if(response.getCode().equals("0000")){
                        PaymentBill bill = new PaymentBill();
                        bill.setPayCode(response.getOrid());
                        bill.setDistributorOrderCode(stssalesvouchertab.getSzsalesvoucherno());
                        bill.setOrid(stssalesvouchertab.getSzsalesvoucherno());
                        bill.setMoney(MathUtil.amplify2long(st.getMsettlementmoney(), 2));
                        bill.setIscenicid(paymentBill.getIscenicid());
                        bill.setOrderType(2L);
                        bill.setUserid(iemployeeid);
                        Esfemployeetab emp = (Esfemployeetab) timeSharingDao.get(Esfemployeetab.class,iemployeeid);
                        bill.setUsername(emp.getSzemployeename());
                        bill.setWinid(e.getIticketwinid());
                        bill.setWinname(e.getSzticketwinname());
                        bill.setWinCode(paymentBill.getWinCode());
                        bill.setPaymentChannel(paymentBill.getPaymentChannel());
                        String dateTimes = Tools.getDayTimes();
                        bill.setCreateTime(dateTimes);
                        bill.setBackTime(dateTimes);
                        bill.setDtmakedate(dateTimes);
                        bill.setStatus("Y");
                        timeSharingDao.save(bill);
                    }else{
                        throw new RuntimeException("一卡通支付退款失败");
                    }
                }
            }
            // 2012-11-15 李经锐修改 增加 预制票退票后是否可再修改
            if (e.getIscenicid() != null && !e.getIscenicid().equals("")) {
                Hotelprovider hotelpder = (Hotelprovider) this.timeSharingDao.get(
                        Hotelprovider.class, e.getIscenicid());
                if (hotelpder != null) {
                    // 预制票可退票后销售
                    if (hotelpder.getNoted4() != null
                            && hotelpder.getNoted4().equals("1")) {
                        getWarehouseCheck(returnmodellist, e.getIscenicid(),
                                iemployeeid);
                    }

                    // IC卡入库销售
                    if (hotelpder.getInoteger5() != null
                            && hotelpder.getInoteger5() == 1) {
                        getICkupCheck(returnmodellist, iemployeeid);
                    }
                }
            }

            //退订恢复分时库存
            Map<Long,Integer> refundMap=new HashMap<Long, Integer>();
            for (int i = 0; i < returnmodellist.size(); i++) {
                Returnmodel returnmodel = (Returnmodel) returnmodellist.get(i);
                List<Map> list = timeSharingDao
                        .findBySqlToMapnocolsesession(" select zjno3 from Stssoldtickettab " +
                                "where szticketprintno='"
                                + returnmodel.getSzticketprintno()
                                + "' ");
                Map map =list.get(0);
                Long timeId =Long.parseLong(map.get("ZJNO3").toString());
                if(timeId!=null && timeId!=0L)
                {
                    refundMap.put(timeId,(refundMap.get(timeId)==null?0:refundMap.get(timeId))+1);
                }
            }
            //如果是分时预约票，归还分时预约票库存
            for(Map.Entry<Long,Integer> entry:refundMap.entrySet())
            {
                Integer iticketnum =entry.getValue();
                TimeSharingService _TimeSharingService = (TimeSharingService)SpringUtil.getBean("timeSharingService");
                String hql2 = "from TimeSharingTicketTab where id = "+entry.getKey();
                List find2 = _TimeSharingService.find(hql2);
                if(find2 != null && find2.size()>0) {
                    TimeSharingTicketTab _SharingTicketTab =(TimeSharingTicketTab)find2.get(0);
                    _TimeSharingService.UpdateStock(entry.getKey(), _SharingTicketTab.getProductId(),iticketnum.intValue(), "add");//isplitamount.intValue()
                }
            }
            rs.addRow(new String[] { "true",stssalesvouchertab.getId().getIsalesvoucherid().toString() });
            return rs;
        } catch (Exception e1) {
            LOGGER.info("保存退订信息异常："+StringUtil.toString_02(e1));
            throw new RuntimeException(StringUtil.toString_02(e1));
        }
    }

    public ResultBean savebenditorderreturntickets(
            Stssalesvouchertab oldstssalesvouchertab, List returnmodellist,
            String productcontrols, Esbticketwintab e, Long iemployeeid,
            String szsalesvoucherno, Long maxid, Long isqt, Long forceemid,
            String forcenote, Long issx,String url) throws Exception {
    	if(url==null || url.length()<1){
    		url=WebContant.GetKeyValue("CenterUrl");
    	}
        String nowtime = Tools.getDayTimes();
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        double tpmont = 0;
        double tpsx = 0;
        long bystats = 1;
        List plist = new ArrayList();
        // 查询所有票号所有售出门票表信息
        String zfusid = "";
        String ornm = "";
        String orhm = "";
        String orph = "";
        String orzj = "";
        String dtstartdate = "";
        String dtenddate = "";
        TOrder t_order = (TOrder) timeSharingDao.get(TOrder.class, new TOrderId(
                oldstssalesvouchertab.getSzsalesvoucherno(),
                oldstssalesvouchertab.getIscenicid()));
        MOrder m_order = (MOrder) timeSharingDao.get(MOrder.class,
                oldstssalesvouchertab.getSzsalesvoucherno());
        long jifen = 0;

        zfusid = m_order.getZfusid();
        ornm = t_order.getOrhm();
        orhm = t_order.getOrhm();
        orph = t_order.getOrph();
        orzj = t_order.getOrzj();
        dtstartdate = t_order.getDtstartdate();
        dtenddate = t_order.getDtenddate();
        if (productcontrols != null && !productcontrols.equals("")) {
            StringBuffer sql = new StringBuffer();
            sql.append(" from Productcontrol p  where p.controltype='03'  ");
            String[] productcontrol = productcontrols.split(":");
            for (int i = 0; i < productcontrol.length; i++) {
                String[] control = productcontrol[i].split("&");
                Long itickettypeid = new Long(control[0]);
                Long tripid = new Long(control[2]);
                String stdata = control[3];
                Long soldnumber = new Long(control[4]);
                String hsql = " from Productcontrol where itickettypeid="
                        + itickettypeid + " and tripid=" + tripid
                        + " and stdata='" + stdata + "' and controltype='03'";
                List pplist = timeSharingDao.find(hsql);
                if (pplist != null && pplist.size() > 0) {
                    Productcontrol p = (Productcontrol) pplist.get(0);
                    p.setSoldnumber(p.getSoldnumber() - soldnumber);

                    if (p.getBystate() == -1) {
                        throw new RuntimeException("确认停排的竹筏票不能在售票口退订");
                    }
                    timeSharingDao.update(p);
                }
                if (i == 0) {
                    sql.append(" and ( ( p.itickettypeid=" + itickettypeid
                            + "  and p.stdata='" + stdata + "' and  p.tripid="
                            + tripid + " )  ");
                } else {
                    sql.append(" or ( p.itickettypeid=" + itickettypeid
                            + "  and p.stdata='" + stdata + "' and  p.tripid="
                            + tripid + " )  ");
                }
            }
            // 更新可售量
            sql.append(" )  order by p.itickettypeid,p.stdata");
            plist = timeSharingDao.find(sql.toString());
        }
        System.out.println("111111111111111111111111111");
        List zslist = new ArrayList();// 需删除的Stssol;dticketsubtab表中信息
        List slist = new ArrayList();// 需要修改的Stssoldtickettab表信息
        List stssalelist = new ArrayList();// 需要增加的Stssalesvoucherdetailstab表信息
        // 新的销售凭证表
        List ystssalelist = new ArrayList();// 原销售凭证明细
        List yxsyhlist = new ArrayList(); // 服务商优惠的原销售凭证明细
        List comtlist = new ArrayList(); // 服务商优惠的原票务明细表

        Stssalesvouchertab stssalesvouchertab = new Stssalesvouchertab();
        Long isalesvoucherid = oldstssalesvouchertab.getId()
                .getIsalesvoucherid();
        Long iticketstationid = oldstssalesvouchertab.getId()
                .getIticketstationid();
        StssalesvouchertabId stssalesvouchertabid = new StssalesvouchertabId();
        stssalesvouchertabid.setIticketstationid(e.getIticketstationid());
        stssalesvouchertabid.setIsalesvoucherid(new Long(maxid));
        stssalesvouchertab.setId(stssalesvouchertabid);
        stssalesvouchertab.setIscenicid(oldstssalesvouchertab.getIscenicid());
        stssalesvouchertab.setIticketwinid(e.getIticketwinid());
        stssalesvouchertab.setIbusinessid(oldstssalesvouchertab
                .getIbusinessid());
        stssalesvouchertab.setIhandler(iemployeeid);
        stssalesvouchertab.setIpayeer(iemployeeid);
        stssalesvouchertab.setForcedrefund(forcenote);
        if (isqt.longValue() == 1) {
            stssalesvouchertab.setImaker(forceemid);

        } else {

            stssalesvouchertab.setImaker(iemployeeid);
        }
        stssalesvouchertab.setIauditor(iemployeeid);
        stssalesvouchertab.setDyusid(oldstssalesvouchertab.getDyusid());
        stssalesvouchertab.setIaccountreceivable(new Double(0));
        stssalesvouchertab.setIacceptmoney(new Double(0));
        stssalesvouchertab.setIgivechange(new Double(0));
        stssalesvouchertab.setIyear(new Long(nowtime.substring(0, 4)));
        stssalesvouchertab.setImonth(new Long(nowtime.substring(5, 7)));
        stssalesvouchertab.setIday(new Long(nowtime.substring(8, 10)));
        stssalesvouchertab.setDtmakedate(nowtime);
        stssalesvouchertab.setDtauditdate(nowtime.substring(0, 10));
        stssalesvouchertab.setUsid(oldstssalesvouchertab.getUsid());
        stssalesvouchertab.setBisintegral(new Long(0));
        stssalesvouchertab.setByprintinvoice(new Long(0));
        stssalesvouchertab.setBysplitway(new Long(2));
        stssalesvouchertab.setBisreturn(new Long(1));
        stssalesvouchertab.setBysalesvouchertype("02");
        stssalesvouchertab.setBypostrecord(new Long(0));
        stssalesvouchertab.setBysalesvoucherstate(new Long(1));
        stssalesvouchertab.setBispay(new Long(0));
        stssalesvouchertab.setBispayee(new Long(0));
        stssalesvouchertab.setMhandcharge(new Double(0));
        stssalesvouchertab.setIssalesvoucherid(oldstssalesvouchertab.getId()
                .getIsalesvoucherid());
        stssalesvouchertab.setIsticketstationid(oldstssalesvouchertab.getId()
                .getIticketstationid());
        stssalesvouchertab.setSzsalesvoucherno(szsalesvoucherno);
        stssalesvouchertab.setJmamnt(new Double(0));

        Long numbs = 0L; // 此销售凭证总的使用数量 服务商优惠添加
        List detailList = timeSharingDao
                .find("select sum(st.iremainnum*st.iplayerperticket) as numb from Stssoldtickettab st where st.id.isalesvoucherid="
                        + oldstssalesvouchertab.getId().getIsalesvoucherid()
                        + " and st.byvalidity='00'  ");
        System.out
                .println("select sum(st.iremainnum*st.iplayerperticket) as numb from Stssoldtickettab st where st.id.isalesvoucherid="
                        + oldstssalesvouchertab.getId().getIsalesvoucherid()
                        + " and st.byvalidity='00'  ");
        if (detailList != null && detailList.size() > 0) {
            if (detailList.get(0) == null || detailList.get(0).equals("")) {

            } else {
                numbs = (Long) detailList.get(0);
            }

        }
        Long offernum = 0L; // 退票数量

        // 新建stssalesvouchertab完成
        System.out.println("2222222222222222222222222");
        for (int i = 0; i < returnmodellist.size(); i++) {
            Returnmodel returnmodel = (Returnmodel) returnmodellist.get(i);
            // System.out.println("根据票号读取该售出票信息" +
            // returnmodel.getSzticketprintno());
            String tdstr = "";
            Long jmnumb = new Long(0);// 免票数量
            List list = timeSharingDao
                    .find("from Stssoldtickettab where szticketprintno='"
                            + returnmodel.getSzticketprintno()
                            + "' order by dtmakedate desc");
            Stssoldtickettab stssoldtickettab = (Stssoldtickettab) list.get(0);
            // 读取原凭证明细
            boolean b = false;
            Stssalesvoucherdetailstab ystssalesvoucherdetailstab = null;
            for (int a = 0; a < ystssalelist.size(); a++) {
                ystssalesvoucherdetailstab = (Stssalesvoucherdetailstab) ystssalelist
                        .get(a);
                if (ystssalesvoucherdetailstab.getId()
                        .getIsalesvoucherdetailsid() == stssoldtickettab
                        .getId().getIsalesvoucherdetailsid()
                        && ystssalesvoucherdetailstab.getId()
                        .getIsalesvoucherid() == stssoldtickettab
                        .getId().getIsalesvoucherid()
                        && ystssalesvoucherdetailstab.getId()
                        .getIticketstationid() == stssoldtickettab
                        .getId().getIticketstationid()) {
                    b = true;

                    break;
                }
            }
            if (!b) {
                ystssalesvoucherdetailstab = (Stssalesvoucherdetailstab) timeSharingDao
                        .get(Stssalesvoucherdetailstab.class,
                                new StssalesvoucherdetailstabId(
                                        stssoldtickettab.getId()
                                                .getIsalesvoucherdetailsid(),
                                        isalesvoucherid, iticketstationid));
                ystssalelist.add(ystssalesvoucherdetailstab);
            }

            boolean bs = false; // 判断是否优惠
            double newamnt = 0D;
            double tdamnt = 0D;
            // 2014-04-03 lijingrui
            // 根据售票门票表 判断此产品所在服务商是否有服务商优惠
            List offerList = timeSharingDao
                    .find("from Edpofferschemetab where iscenicid='"
                            + stssoldtickettab.getIscenicid()
                            + "' and startdata<='"
                            + stssoldtickettab.getDtstartdate()
                            + "' and enddata>='"
                            + stssoldtickettab.getDtstartdate()
                            + "' and byisuse=1 and ioffertype=1 ");
            if(oldstssalesvouchertab.getSzsalesvoucherno().substring(8,11).equals("888") || oldstssalesvouchertab.getSzsalesvoucherno().substring(8,11).equals("999")){
                offerList = null;//OTA订单不计算优惠
            }
            if (offerList != null && offerList.size() > 0) {
                Edpofferschemetab edpoffer = (Edpofferschemetab) offerList
                        .get(0);
                offernum += stssoldtickettab.getIplayerperticket();// 退票数量

                String yhlx = "0";// 获取优惠方式 0 -最高价 1-最低价
                Hotelprovider hotel = (Hotelprovider) this.timeSharingDao.get(
                        Hotelprovider.class, stssoldtickettab.getIscenicid());
                if (hotel != null && hotel.getInoteger8() != null) {
                    yhlx = hotel.getInoteger8().toString();
                }

                // 获取退票后可优惠的数量
                Long yhnums = (numbs - offernum) / edpoffer.getImultiples()
                        * edpoffer.getIoffernum();
                // 原销售凭证的优惠数量
                Long ysnums = (numbs - offernum + stssoldtickettab
                        .getIplayerperticket())
                        / edpoffer.getImultiples()
                        * edpoffer.getIoffernum();
                // 退票后优惠数量小于原优惠数量 说明退票退 退票金额-优惠票的金额
                if (yhnums != ysnums && ysnums > yhnums) {
                    bs = true;
                    List vourcherList = new ArrayList();
                    if (yhlx.equals("0")) { // 最高价优惠
                        vourcherList = timeSharingDao
                                .find(" from Stssalesvoucherdetailstab st where st.id.isalesvoucherid="
                                        + oldstssalesvouchertab.getId()
                                        .getIsalesvoucherid()
                                        + "  and st.id.iticketstationid="
                                        + oldstssalesvouchertab.getId()
                                        .getIticketstationid()
                                        + " and st.ioffersschemeid>0 order by st.mactualsaleprice desc");

                    } else {
                        vourcherList = timeSharingDao
                                .find(" from Stssalesvoucherdetailstab st where st.id.isalesvoucherid="
                                        + oldstssalesvouchertab.getId()
                                        .getIsalesvoucherid()
                                        + "  and st.id.iticketstationid="
                                        + oldstssalesvouchertab.getId()
                                        .getIticketstationid()
                                        + " and st.ioffersschemeid>0 order by st.mactualsaleprice");

                    }

                    Long yhsl = ysnums - yhnums; // 要退的优惠票数量

                    if (vourcherList != null && vourcherList.size() > 0) {
                        Long salenum = 0L;
                        for (int q = 0; q < vourcherList.size(); q++) {
                            Stssalesvoucherdetailstab voucher = (Stssalesvoucherdetailstab) vourcherList
                                    .get(q);
                            salenum = voucher.getIderatenums()
                                    - voucher.getIpresentnums(); // 优惠数量

                            if (yhsl <= salenum) {
                                // 优惠金额
                                newamnt += voucher.getMactualsaleprice() * yhsl;
                                // 退票金额
                                tdamnt += ystssalesvoucherdetailstab
                                        .getMactualsaleprice()
                                        * yhsl
                                        - voucher.getMactualsaleprice() * yhsl;
                                voucher.setMpresentmoney(voucher
                                        .getMpresentmoney()
                                        + voucher.getMactualsaleprice() * yhsl);
                                voucher.setIpresentnums(voucher
                                        .getIpresentnums()
                                        + stssoldtickettab
                                        .getIplayerperticket());

                                jmnumb += yhsl;

                                yxsyhlist.add(voucher);

                                List zdaillist = timeSharingDao
                                        .find("from Stscomticketsalesdetailstab where  id.isalesvoucherid="
                                                + isalesvoucherid
                                                + " and id.iticketstationid="
                                                + iticketstationid
                                                + " and id.isalesvoucherdetailsid="
                                                + voucher
                                                .getId()
                                                .getIsalesvoucherdetailsid()
                                                + " order by isalesvoucherdetailsid");
                                if (zdaillist != null && zdaillist.size() > 0) {
                                    for (int z = 0; z < zdaillist.size(); z++) {
                                        Stscomticketsalesdetailstab comt = (Stscomticketsalesdetailstab) zdaillist
                                                .get(z);
                                        comt.setIderatenums(comt
                                                .getIderatenums() - yhsl);
                                        comt.setMderatemoney(comt
                                                .getMderatemoney()
                                                - yhsl
                                                * comt.getMsplitprice());
                                        comtlist.add(comt);
                                    }
                                }

                                break;
                            } else {
                                // 计算新的总金额
                                newamnt += (ystssalesvoucherdetailstab
                                        .getIuseablenessnum() - ystssalesvoucherdetailstab
                                        .getIpresentnums())
                                        * ystssalesvoucherdetailstab
                                        .getMactualsaleprice()
                                        - voucher.getMactualsaleprice()
                                        * salenum;
                                tdamnt += ystssalesvoucherdetailstab
                                        .getMactualsaleprice()
                                        * salenum
                                        - voucher.getMactualsaleprice()
                                        * salenum;
                                voucher.setMpresentmoney(voucher
                                        .getMpresentmoney()
                                        + voucher.getMactualsaleprice()
                                        * salenum);
                                voucher.setIpresentnums(voucher
                                        .getIpresentnums()
                                        + stssoldtickettab
                                        .getIplayerperticket());

                                jmnumb += salenum;

                                yhsl = yhsl - salenum;

                                yxsyhlist.add(voucher);

                                List zdaillist = timeSharingDao
                                        .find("from Stscomticketsalesdetailstab where  id.isalesvoucherid="
                                                + isalesvoucherid
                                                + " and id.iticketstationid="
                                                + iticketstationid
                                                + " and id.isalesvoucherdetailsid="
                                                + voucher
                                                .getId()
                                                .getIsalesvoucherdetailsid()
                                                + " order by isalesvoucherdetailsid");
                                if (zdaillist != null && zdaillist.size() > 0) {
                                    for (int z = 0; z < zdaillist.size(); z++) {
                                        Stscomticketsalesdetailstab comt = (Stscomticketsalesdetailstab) zdaillist
                                                .get(z);
                                        comt.setIderatenums(comt
                                                .getIderatenums() - salenum);
                                        comt.setMderatemoney(comt
                                                .getMderatemoney()
                                                - salenum
                                                * comt.getMsplitprice());
                                        comtlist.add(comt);
                                    }
                                }
                            }

                        }
                    }

                }

            } else {
                if (ystssalesvoucherdetailstab.getIoffersschemeid() > 0) {
                    bs = false;
                    // 销售过优惠
                    // 判断是否退订该票是减免金额的票
                    Edpofferschemetab edpofferschemetab = (Edpofferschemetab) timeSharingDao
                            .get(Edpofferschemetab.class,
                                    ystssalesvoucherdetailstab
                                            .getIoffersschemeid());
                    // 计算新的总金额
                    newamnt = (ystssalesvoucherdetailstab.getIuseablenessnum()
                            - ystssalesvoucherdetailstab.getIpresentnums()
                            - stssoldtickettab.getIplayerperticket() - (ystssalesvoucherdetailstab
                            .getIuseablenessnum()
                            - ystssalesvoucherdetailstab.getIpresentnums() - stssoldtickettab
                            .getIplayerperticket())
                            / edpofferschemetab.getImultiples()* edpofferschemetab.getIoffernum())
                            * ystssalesvoucherdetailstab.getMactualsaleprice();
                    tdamnt = ystssalesvoucherdetailstab.getMeventmoney()
                            - ystssalesvoucherdetailstab.getMderatemoney()
                            - ystssalesvoucherdetailstab.getMpresentmoney()
                            - newamnt;
                    ystssalesvoucherdetailstab
                            .setMpresentmoney(ystssalesvoucherdetailstab
                                    .getMpresentmoney() + tdamnt);
                    ystssalesvoucherdetailstab
                            .setIpresentnums(ystssalesvoucherdetailstab
                                    .getIpresentnums()
                                    + stssoldtickettab.getIplayerperticket());

                    jmnumb = stssoldtickettab.getIplayerperticket()
                            - (long) (tdamnt / ystssalesvoucherdetailstab
                            .getMactualsaleprice());
                }
            }

            Stssalesvoucherdetailstab stssalesvoucherdetailstab = new Stssalesvoucherdetailstab();
            StssalesvoucherdetailstabId id = new StssalesvoucherdetailstabId();
            id.setIsalesvoucherdetailsid(new Long(i + 1));
            id.setIticketstationid(e.getIticketstationid());
            id.setIsalesvoucherid(stssalesvouchertab.getId()
                    .getIsalesvoucherid());
            stssalesvoucherdetailstab.setId(id);
            stssalesvoucherdetailstab.setDtstartdate(ystssalesvoucherdetailstab
                    .getDtstartdate());
            stssalesvoucherdetailstab.setDtenddate(ystssalesvoucherdetailstab
                    .getDtenddate());
            stssalesvoucherdetailstab.setIticketwinid(e.getIticketwinid());
            stssalesvoucherdetailstab
                    .setIcrowdkindpriceid(ystssalesvoucherdetailstab
                            .getIcrowdkindpriceid());
            stssalesvoucherdetailstab
                    .setItickettypeid(ystssalesvoucherdetailstab
                            .getItickettypeid());
            stssalesvoucherdetailstab.setIplayerperticket(stssoldtickettab
                    .getIplayerperticket());// 人/张
            stssalesvoucherdetailstab.setIticketnum(new Long(1));// 张数
            stssalesvoucherdetailstab.setIticketplayer(stssoldtickettab
                    .getIplayerperticket());
            stssalesvoucherdetailstab.setDtstartdate(ystssalesvoucherdetailstab
                    .getDtstartdate());
            stssalesvoucherdetailstab.setDtenddate(ystssalesvoucherdetailstab
                    .getDtenddate());
            stssalesvoucherdetailstab.setIstartid(new Long(0));
            stssalesvoucherdetailstab.setIendid(new Long(0));
            stssalesvoucherdetailstab.setSzstartserial("0");
            stssalesvoucherdetailstab.setSzendserial("0");
            stssalesvoucherdetailstab
                    .setIoffersschemeid(ystssalesvoucherdetailstab
                            .getIoffersschemeid());
            stssalesvoucherdetailstab.setIpresentnums(new Long(0));
            stssalesvoucherdetailstab.setIderatenums(jmnumb);
            stssalesvoucherdetailstab.setIamount(stssoldtickettab
                    .getIplayerperticket());
            stssalesvoucherdetailstab.setIfactnum(new Long(0)); // 交易数量
            stssalesvoucherdetailstab.setIuseablenessnum(new Long(0));// 使用数量
            stssalesvoucherdetailstab.setMderatemoney(new Double(0));// 减免金额
            stssalesvoucherdetailstab.setMpresentmoney(new Double(0));// 赠送金额
            stssalesvoucherdetailstab.setMnominalfee(new Double(0));// 工本费
            stssalesvoucherdetailstab.setMdeposit(new Double(0));
            stssalesvoucherdetailstab.setMhandcharge(new Double(0));// 手续费
            stssalesvoucherdetailstab.setByconsumetype("00");
            stssalesvoucherdetailstab.setIconsumenum(new Double(0));
            stssalesvoucherdetailstab.setItotalminutes(new Long(0));
            stssalesvoucherdetailstab.setByisout(new Long(0));
            stssalesvoucherdetailstab.setDtmakedate(nowtime);
            stssalesvoucherdetailstab.setIversion(new Long(0));
            stssalesvoucherdetailstab.setMactualsaleprice(new Double(0));
            stssalesvoucherdetailstab.setMeventmoney(new Double(0));
            stssalesvoucherdetailstab.setItotalnumber(new Long(0));
            stssalesvoucherdetailstab.setMtotalamount(new Double(0));
            stssalesvoucherdetailstab.setSzstartserial(returnmodel
                    .getSzticketprintno());
            stssalesvoucherdetailstab.setSzendserial(returnmodel
                    .getSzticketprintno());
            stssalesvoucherdetailstab.setIstartid(stssoldtickettab
                    .getIserialnum());
            stssalesvoucherdetailstab.setIendid(stssoldtickettab
                    .getIserialnum());

            List zsdaillist = timeSharingDao
                    .find("from Stssoldticketsubtab where id.isalesvoucherid="
                            + isalesvoucherid
                            + " and id.iticketstationid="
                            + iticketstationid
                            + " and id.isalesvoucherdetailsid="
                            + stssoldtickettab.getId()
                            .getIsalesvoucherdetailsid()
                            + " and id.szsoldticketid="
                            + stssoldtickettab.getId().getSzsoldticketid()
                            + " and isvalid=1 order by iztickettypeid");
            System.out.println("can118111123");
            String[] iztickettypeid = returnmodel.getItickettypeids();
            int n = 0;
            for (int j = 0; j < zsdaillist.size(); j++) {
                Stssoldticketsubtab zs = (Stssoldticketsubtab) zsdaillist
                        .get(j);
                for (int k = 0; k < iztickettypeid.length; k++) {
                    if (zs.getIztickettypeid().longValue() == Long
                            .parseLong(iztickettypeid[k])) {
                        n = n + 1;
                        zslist.add(zs);
                    }
                }
            }
            System.out.println("can118111124");

            // 根据明细子表中的数据计算明细的各种金额

            List zdaillist = timeSharingDao
                    .find("from Stscomticketsalesdetailstab where  id.isalesvoucherid="
                            + isalesvoucherid
                            + " and id.iticketstationid="
                            + iticketstationid
                            + " and id.isalesvoucherdetailsid="
                            + stssoldtickettab.getId()
                            .getIsalesvoucherdetailsid()
                            + " order by isalesvoucherdetailsid");

            List comlist = new ArrayList();
            for (int j = 0; j < zdaillist.size(); j++) {
                Stscomticketsalesdetailstab sts = (Stscomticketsalesdetailstab) zdaillist
                        .get(j);
                System.out.println("can118111125");
                for (int k = 0; k < iztickettypeid.length; k++) {
                    System.out.println("can118111126");
                    if (sts.getIztickettypeid().longValue() == Long
                            .parseLong(iztickettypeid[k])) {
                        stssoldtickettab.setMactualsaleprice(stssoldtickettab
                                .getMactualsaleprice() - sts.getMsplitprice());
                        Stscomticketsalesdetailstab stscom = new Stscomticketsalesdetailstab();
                        StscomticketsalesdetailstabId sid = new StscomticketsalesdetailstabId();
                        sid.setIticketstationid(e.getIticketstationid());
                        sid.setIcomticketsalesdetailsid(sts.getId()
                                .getIcomticketsalesdetailsid());
                        sid.setIsalesvoucherdetailsid(new Long(i + 1));
                        sid.setIsalesvoucherid(stssalesvouchertab.getId()
                                .getIsalesvoucherid());
                        stscom.setId(sid);
                        stscom.setDtstartdate(sts.getDtstartdate());
                        stscom.setDtenddate(sts.getDtenddate());
                        stscom.setIcrowdkindpriceid(sts.getIcrowdkindpriceid());
                        stscom.setIsplitamount(stssoldtickettab
                                .getIplayerperticket());
                        stscom.setMsplitmoney(sts.getMsplitprice()
                                * stssoldtickettab.getIplayerperticket());
                        stscom.setMsplitprice(sts.getMsplitprice());
                        stscom.setItickettypeid(sts.getItickettypeid());
                        stscom.setIztickettypeid(sts.getIztickettypeid());
                        stscom.setTripid(sts.getTripid());
                        stscom.setIvenueid(sts.getIvenueid());
                        stscom.setIvenueareaid(sts.getIvenueareaid());
                        stscom.setIvenueseatsid(sts.getIvenueseatsid());
                        stscom.setDtmakedate(nowtime);
                        if (bs) { // 服务商优惠 需修改优惠票的票务明细
                            stscom.setIderatenums(0L);
                            stscom.setMderatemoney(0D);
                        } else {
                            stscom.setIderatenums(jmnumb);
                            stscom.setMderatemoney(sts.getMsplitprice()
                                    * jmnumb);
                        }

                        // 计算手续费
                        // 查询该票是否有退订费率
                        boolean shouxu = true;
                        if (issx == 1) {
                            bystats = 1;
                            if (sts.getTripid().longValue() > 0) {
                                // 根据plist里面的数据找出对应竹排趟次是否停排
                                for (int a = 0; a < plist.size(); a++) {
                                    Productcontrol p = (Productcontrol) plist
                                            .get(a);
                                    if (p.getItickettypeid().longValue() == sts
                                            .getIztickettypeid().longValue()
                                            && p.getTripid().longValue() == sts
                                            .getTripid().longValue()
                                            && p.getStdata().equals(
                                            sts.getDtstartdate()
                                                    .substring(0, 10))) {

                                        bystats = p.getBystate();
                                    }
                                }
                            }
                            if (bystats == 1) {
                                List tdlist = timeSharingDao
                                        .find(" from Ticketxgz where itickettypeid="
                                                + sts.getIztickettypeid()
                                                + " and xyjs4=1 and isvalid=1");

                                if (tdlist.size() == 0) {
                                    stscom.setTdfl(new Double(0));
                                } else {

                                    Ticketxgz tcx = (Ticketxgz) tdlist.get(0);

                                    if (tcx.getJsfs().equals("0001")) {
                                        // 按小时计算
                                        long hours = 0;
                                        DateFormat df = new SimpleDateFormat(
                                                "yyyy-MM-dd HH:mm:ss");
                                        String bztime = sts.getDtenddate();
                                        try {
                                            Date d1 = df.parse(nowtime);
                                            Date d2 = df.parse(bztime);
                                            long diff = d2.getTime()
                                                    - d1.getTime();
                                            hours = diff / (1000 * 60 * 60);
                                        } catch (ParseException e1) {
                                            // TODO Auto-generated catch block
                                            e1.printStackTrace();
                                        }
                                        if (hours < 0) {
                                            stscom.setTdfl(tcx.getXyrate2());
                                        } else {
                                            List fllist = timeSharingDao
                                                    .find("from Changebackrate where gzid="
                                                            + tcx.getGzid()
                                                            + " and time>"
                                                            + hours
                                                            + " order by time");
                                            if (fllist == null
                                                    || fllist.size() == 0) {
                                                stscom.setTdfl(new Double(0));
                                            } else {
                                                Changebackrate grate = (Changebackrate) fllist
                                                        .get(0);
                                                // 将退订费率保存
                                                stscom.setTdfl(grate.getTdfl());
                                            }

                                        }
                                    } else if (tcx.getJsfs().equals("0002")) {
                                        // 按天计算退订费率
                                        long days = 0;
                                        DateFormat df = new SimpleDateFormat(
                                                "yyyy-MM-dd HH:mm:ss");
                                        String bztime = sts.getDtenddate();
                                        try {
                                            Date d1 = df.parse(nowtime);
                                            Date d2 = df.parse(bztime);
                                            long diff = d2.getTime()
                                                    - d1.getTime();
                                            days = diff / (1000 * 60 * 60 * 24);
                                        } catch (ParseException e1) {
                                            // TODO Auto-generated catch block
                                            e1.printStackTrace();
                                        }
                                        if (days < 0) {
                                            // 将退订费率保存
                                            stscom.setTdfl(tcx.getXyrate2());
                                        } else {
                                            List fllist = timeSharingDao
                                                    .find("from Changebackrate where gzid="
                                                            + tcx.getGzid()
                                                            + " and time>"
                                                            + days
                                                            + " order by time");
                                            if (fllist == null
                                                    || fllist.size() == 0) {
                                                stscom.setTdfl(new Double(0));
                                            } else {
                                                Changebackrate grate = (Changebackrate) fllist
                                                        .get(0);
                                                stscom.setTdfl(grate.getTdfl());
                                            }
                                        }
                                    } else if (tcx.getJsfs().equals("0003")) {
                                        // 常年
                                        long days = 0;
                                        DateFormat df = new SimpleDateFormat(
                                                "yyyy-MM-dd HH:mm:ss");
                                        String bztime = sts.getDtenddate();
                                        try {
                                            Date d1 = df.parse(nowtime);
                                            Date d2 = df.parse(bztime);
                                            long diff = d2.getTime()
                                                    - d1.getTime();
                                            days = diff / (1000 * 60 * 60 * 24);
                                        } catch (ParseException e1) {
                                            // TODO Auto-generated catch block
                                            e1.printStackTrace();
                                        }
                                        if (days < 0) {
                                            stscom.setTdfl(tcx.getXyrate2());
                                        } else {
                                            List fllist = timeSharingDao
                                                    .find("from Changebackrate where gzid="
                                                            + tcx.getGzid());
                                            if (fllist != null
                                                    && fllist.size() > 0) {

                                                Changebackrate grate = (Changebackrate) fllist
                                                        .get(0);
                                                stscom.setTdfl(grate.getTdfl());

                                            } else {
                                                stscom.setTdfl(new Double(0));
                                            }
                                        }
                                    } else {
                                        stscom.setTdfl(new Double(0));
                                    }

                                }

                            } else {
                                stscom.setTdfl(new Double(0));
                            }
                        } else {
                            stscom.setTdfl(new Double(0));
                        }
                        System.out.println("can118111127");

                        stscom.setMhandcharge((stscom.getMsplitmoney() - stscom
                                .getMderatemoney()) * stscom.getTdfl());
                        stscom.setIversion(new Long(0));
                        List Seatsalelist = this.timeSharingDao
                                .find(" from Seatsaletab where id.isalesvoucherid="
                                        + sts.getId().getIsalesvoucherid()
                                        + " and id.iticketstationid="
                                        + sts.getId().getIticketstationid()
                                        + " and id.isalesvoucherdetailsid="
                                        + sts.getId()
                                        .getIsalesvoucherdetailsid()
                                        + " and id.icomticketsalesdetailsid="
                                        + sts.getId()
                                        .getIcomticketsalesdetailsid()
                                        + " and id.szsoldticketid="
                                        + stssoldtickettab.getId()
                                        .getSzsoldticketid());

                        if (Seatsalelist != null && Seatsalelist.size() > 0) {
                            for (int a = 0; a < Seatsalelist.size(); a++) {

                                Seatsaletab seat = (Seatsaletab) Seatsalelist
                                        .get(a);
                                stscom.setItripprdcontrolid(seat
                                        .getItripprdcontrolid());

                            }
                        } else {
                            stscom.setItripprdcontrolid(0L);
                        }
                        stscom.setSeatlist(Seatsalelist);
                        comlist.add(stscom);

                        stssalesvoucherdetailstab
                                .setMactualsaleprice(stssalesvoucherdetailstab
                                        .getMactualsaleprice()
                                        + sts.getMsplitprice());

                        stssalesvoucherdetailstab
                                .setItotalnumber(stssoldtickettab
                                        .getIplayerperticket());
                        stssalesvoucherdetailstab
                                .setMhandcharge(stssalesvoucherdetailstab
                                        .getMhandcharge()
                                        + stscom.getMhandcharge());// 手续费

                        // 服务商优惠判断 销售凭证信息
                        if (!bs) {
                            stssalesvoucherdetailstab
                                    .setMeventmoney(stssalesvoucherdetailstab
                                            .getMeventmoney()
                                            + stscom.getMsplitmoney());
                            stssalesvoucherdetailstab
                                    .setMtotalamount(stssalesvoucherdetailstab
                                            .getMtotalamount()
                                            + stscom.getMsplitmoney());
                            stssalesvoucherdetailstab.setMderatemoney(jmnumb
                                    * stssalesvoucherdetailstab
                                    .getMactualsaleprice());

                            // 跟新凭证金额数据
                            stssalesvouchertab
                                    .setIaccountreceivable(stssalesvouchertab
                                            .getIaccountreceivable()
                                            + stscom.getMsplitmoney()
                                            - stscom.getMderatemoney());
                            stssalesvouchertab
                                    .setIacceptmoney(stssalesvouchertab
                                            .getIacceptmoney()
                                            + stscom.getMsplitmoney()
                                            - stscom.getMderatemoney());

                            stssalesvouchertab.setJmamnt(stssalesvouchertab
                                    .getJmamnt() + stscom.getMderatemoney());
                        }
                        stssalesvouchertab.setMhandcharge(stssalesvouchertab
                                .getMhandcharge() + stscom.getMhandcharge());

                        System.out.println("can1181111279");
                    }
                }
                System.out.println("can118111128");
            }

            // 服务商优惠判断 销售凭证信息
            if (bs) {
                stssalesvoucherdetailstab
                        .setMeventmoney(stssalesvoucherdetailstab
                                .getMeventmoney() + tdamnt + newamnt);
                stssalesvoucherdetailstab
                        .setMtotalamount(stssalesvoucherdetailstab
                                .getMtotalamount() + tdamnt + newamnt);
                stssalesvoucherdetailstab.setMderatemoney(newamnt);

                // 跟新凭证金额数据
                stssalesvouchertab.setIaccountreceivable(stssalesvouchertab
                        .getIaccountreceivable() + tdamnt);
                stssalesvouchertab.setIacceptmoney(stssalesvouchertab
                        .getIacceptmoney() + tdamnt);
                stssalesvouchertab.setJmamnt(stssalesvouchertab.getJmamnt()
                        + newamnt);
            }

            stssalesvoucherdetailstab.setComlist(comlist);
            stssalelist.add(stssalesvoucherdetailstab);
            slist.add(stssoldtickettab);
            System.out.println("can118111129");
        }
        System.out.println("can11811113");
        try {
            YOrder y = (YOrder) timeSharingDao.get(YOrder.class, new YOrderId(
                    oldstssalesvouchertab.getSzsalesvoucherno(),
                    oldstssalesvouchertab.getIscenicid()));
            if (y.getTpmont() != null) {
                y.setTpmont(y.getTpmont()
                        + stssalesvouchertab.getIacceptmoney());
            } else {
                y.setTpmont(stssalesvouchertab.getIacceptmoney());
            }
            if (y.getTpsx() != null) {
                y.setTpsx(y.getTpsx() + stssalesvouchertab.getMhandcharge());
            } else {
                y.setTpsx(stssalesvouchertab.getMhandcharge());
            }
            y.setIsj(new Long(1));
            timeSharingDao.update(y);
            if (m_order.getTpmont() != null) {
                m_order.setTpmont(m_order.getTpmont()
                        + stssalesvouchertab.getIacceptmoney());
            } else {
                m_order.setTpmont(stssalesvouchertab.getIacceptmoney());
            }
            if (m_order.getTpsx() != null) {
                m_order.setTpsx(m_order.getTpsx()
                        + stssalesvouchertab.getMhandcharge());
            } else {
                m_order.setTpsx(stssalesvouchertab.getMhandcharge());
            }
            m_order.setIsj(new Long(1));
            timeSharingDao.update(m_order);

            System.out.println("can11811114");
            if(!oldstssalesvouchertab.getSzsalesvoucherno().substring(8,11).equals("888") && !oldstssalesvouchertab.getSzsalesvoucherno().substring(8,11).equals("999")){
                saveUseryfk(zfusid, stssalesvouchertab.getSzsalesvoucherno(), 1,
                        "02", stssalesvouchertab.getIacceptmoney()
                                - stssalesvouchertab.getMhandcharge(),
                        stssalesvouchertab.getMhandcharge(), "出票口出票退订");
            }
            System.out.println("can11811115");
            // 结算表中添加数据
            int isnet = 1;
            Stssalessettlementtab st = new Stssalessettlementtab();
            StssalessettlementtabId sid = new StssalessettlementtabId();
            sid.setIsalesvoucherid(stssalesvouchertab.getId()
                    .getIsalesvoucherid());
            sid.setIticketstationid(stssalesvouchertab.getId()
                    .getIticketstationid());

            sid.setIsalessettlementid(new Long(1));
            st.setId(sid);
            st.setSettlementdata(nowtime.substring(0, 10));
            st.setSettlementtime(nowtime.substring(11));
            st.setDtmakedate(nowtime);
            StssalessettlementtabId oldsid = new StssalessettlementtabId();
            oldsid.setIsalesvoucherid(oldstssalesvouchertab.getId()
                    .getIsalesvoucherid());
            oldsid.setIticketstationid(oldstssalesvouchertab.getId()
                    .getIticketstationid());
            oldsid.setIsalessettlementid(new Long(1));
            Stssalessettlementtab oldstssalessettlementtab = (Stssalessettlementtab) timeSharingDao
                    .get(Stssalessettlementtab.class, oldsid);
            st.setIsettlementid(oldstssalessettlementtab.getIsettlementid());

            st.setMsettlementmoney(stssalesvouchertab.getIacceptmoney()
                    - stssalesvouchertab.getMhandcharge());
            st.setIversion(new Long(1));
            // System.out.println("开始保存");
            String stockUsid = stssalesvouchertab.getUsid();
            Custom cc = (Custom) timeSharingDao.get(Custom.class,stockUsid);
            if(cc.getIbusinessid().longValue() == 2L && cc.getUstp().equals("02") && cc.getUsqx().startsWith("0111")){
                stockUsid = cc.getSusid();
            }else if(cc.getIbusinessid().longValue() == 3L && cc.getUstp().equals("02")){
                stockUsid = cc.getSusid();
            }
            timeSharingDao.save(stssalesvouchertab);
            timeSharingDao.save(st);
            // 将网上订单数据保存到本地的订单表中
            MOrder morder = new MOrder();
            morder.setOrid(stssalesvouchertab.getSzsalesvoucherno());
            morder.setOrtp("02");// 退订单
            morder.setOrda(nowtime.substring(0, 10));
            morder.setOrti(nowtime.substring(11));
            morder.setUsid(stssalesvouchertab.getUsid());

            morder.setMont(stssalesvouchertab.getIacceptmoney()
                    + stssalesvouchertab.getJmamnt());
            morder.setYhamnt(stssalesvouchertab.getJmamnt());
            morder.setZfmont(stssalesvouchertab.getIacceptmoney());
            morder.setDdzt("06");
            morder.setIsallcp(new Long(0));

            morder.setZfusid(zfusid);

            if (stssalesvouchertab.getMhandcharge() != null) {
                morder.setTpsx(stssalesvouchertab.getMhandcharge());
            } else {
                morder.setTpsx(new Double(0));
            }

            morder.setTpmont(stssalesvouchertab.getIacceptmoney());

            morder.setTpfs("01");// 出票后退订
            morder.setSrid(oldstssalesvouchertab.getSzsalesvoucherno());
            morder.setIsc(iemployeeid);
            morder.setTpdate(nowtime);
            morder.setBankdata(nowtime.substring(0, 10));
            morder.setBanktime(nowtime.substring(10));
            morder.setYhamnt(new Double(0));
            if (isqt.longValue() == 1) {
                morder.setNotef("02");
            } else {
                morder.setNotef("03");
            }
            if (m_order.getIsjl() == 1) {
                morder.setIsjl(new Long(1));
            } else {
                morder.setIsjl(new Long(0));
            }
            morder.setStdt(oldstssalesvouchertab.getDtauditdate());
            morder.setIsj(new Long(-1));
            tpmont = morder.getTpmont() - morder.getTpsx();
            tpsx = morder.getTpsx();
            timeSharingDao.save(morder);
            System.out.println("can11811116");
            YOrder yorder = new YOrder();

            YOrderId yid = new YOrderId();
            yid.setOrid(stssalesvouchertab.getSzsalesvoucherno());
            yid.setIscenicid(stssalesvouchertab.getIscenicid());
            yorder.setId(yid);
            yorder.setScenictype("01");
            yorder.setDdzt(morder.getDdzt());
            yorder.setUsid(stssalesvouchertab.getUsid());
            yorder.setIbusinessid(stssalesvouchertab.getIbusinessid());
            yorder.setDtstartdate(dtstartdate);
            yorder.setDtenddate(dtenddate);
            yorder.setOrhm(orhm);
            yorder.setOrnm(ornm);
            yorder.setOrph(orph);
            yorder.setOrzj(orzj);

            yorder.setMont(stssalesvouchertab.getIacceptmoney()
                    + stssalesvouchertab.getJmamnt());
            yorder.setYhamnt(stssalesvouchertab.getJmamnt());
            yorder.setZfmont(stssalesvouchertab.getIacceptmoney());
            yorder.setTpsx(stssalesvouchertab.getMhandcharge());
            yorder.setTpmont(stssalesvouchertab.getIacceptmoney());
            yorder.setTpdate(nowtime);
            yorder.setTpfs("01");// 出票后退订
            yorder.setIsc(iemployeeid);
            if (isqt.longValue() == 1) {
                // 授权退订
                yorder.setFempid(forceemid.toString());

                yorder.setNoteb(forcenote);
                yorder.setNotef("02");
            } else {
                yorder.setNotef("03");
            }
            yorder.setIsj(new Long(-1));
            timeSharingDao.save(yorder);
            System.out.println("can11811117");
            TOrder tdorder = new TOrder();
            TOrderId tid = new TOrderId();
            tid.setOrid(stssalesvouchertab.getSzsalesvoucherno());
            tid.setIscenicid(stssalesvouchertab.getIscenicid());
            tdorder.setId(tid);
            tdorder.setScenictype("01");
            tdorder.setOrfl("02");
            tdorder.setDdzt(morder.getDdzt());
            tdorder.setIregionalid(oldstssalesvouchertab.getIregionalid());
            tdorder.setUsid(stssalesvouchertab.getUsid());
            tdorder.setIbusinessid(stssalesvouchertab.getIbusinessid());
            tdorder.setDtstartdate(dtstartdate);
            tdorder.setDtenddate(dtenddate);
            tdorder.setOrnm(ornm);
            tdorder.setOrnm(orhm);
            tdorder.setOrzj(orzj);
            tdorder.setOrhm(orhm);
            tdorder.setMont(stssalesvouchertab.getIacceptmoney()
                    + stssalesvouchertab.getJmamnt());
            tdorder.setYhamnt(stssalesvouchertab.getJmamnt());
            tdorder.setZfmont(stssalesvouchertab.getIacceptmoney());
            tdorder.setIsc(iemployeeid);
            tdorder.setNotec(Tools.getNowString());
            tdorder.setIsj(new Long(-1));
            tdorder.setNotej(oldstssalesvouchertab.getSzsalesvoucherno());
            if (isqt.longValue() == 1) {
                // 授权退订
                tdorder.setFempid(forceemid.toString());
                tdorder.setNoteb(forcenote);
                tdorder.setNotef("02");
            } else {
                tdorder.setNotef("03");
            }
            timeSharingDao.save(tdorder);
            System.out.println("can11811118");
            float yjifen = 0;
            float njifen = 0;
            double price = 0.0;
            // timeSharingDao.save(st);
            for (int i = 0; i < stssalelist.size(); i++) {

                Stssalesvoucherdetailstab ss = (Stssalesvoucherdetailstab) stssalelist
                        .get(i);
                Edmcrowdkindpricetab edmcrowdkindpricetab = (Edmcrowdkindpricetab) timeSharingDao
                        .get(Edmcrowdkindpricetab.class,
                                ss.getIcrowdkindpriceid());
                timeSharingDao.save(ss);
                if (isnet == 1) {
                    YOrderlist yorderlist = new YOrderlist();
                    YOrderlistId ylid = new YOrderlistId();
                    ylid.setIscenicid(stssalesvouchertab.getIscenicid());
                    ylid.setOrid(stssalesvouchertab.getSzsalesvoucherno());
                    ylid.setOrderlistid(ss.getId().getIsalesvoucherdetailsid());
                    yorderlist.setId(ylid);
                    yorderlist.setItickettypeid(ss.getItickettypeid());
                    yorderlist.setIcrowdkindpriceid(ss.getIcrowdkindpriceid());
                    yorderlist.setIcrowdkindid(edmcrowdkindpricetab
                            .getIcrowdkindid());
                    yorderlist.setDtstartdate(ss.getDtstartdate());
                    yorderlist.setDtenddate(ss.getDtenddate());
                    yorderlist.setNumb(ss.getIplayerperticket());
                    yorderlist.setPric(ss.getMactualsaleprice());
                    price = ss.getMactualsaleprice();
                    yorderlist.setAmnt(ss.getMeventmoney());
                    yorderlist.setMhandcharge(ss.getMhandcharge());
                    yorderlist.setYhnumb(ss.getIderatenums());
                    yorderlist.setYhamnt(ss.getMderatemoney());
                    timeSharingDao.save(yorderlist);
                    TOrderlist torderlist = new TOrderlist();
                    TOrderlistId tlid = new TOrderlistId();
                    tlid.setIscenicid(stssalesvouchertab.getIscenicid());
                    tlid.setOrid(stssalesvouchertab.getSzsalesvoucherno());
                    tlid.setOrderlistid(ss.getId().getIsalesvoucherdetailsid());
                    torderlist.setId(tlid);
                    torderlist.setItickettypeid(ss.getItickettypeid());
                    torderlist.setIcrowdkindpriceid(ss.getIcrowdkindpriceid());
                    torderlist.setIcrowdkindid(edmcrowdkindpricetab
                            .getIcrowdkindid());
                    torderlist.setDtstartdate(ss.getDtstartdate());
                    torderlist.setDtenddate(ss.getDtenddate());
                    torderlist.setNumb(ss.getIplayerperticket());
                    torderlist.setPric(ss.getMactualsaleprice());
                    torderlist.setAmnt(ss.getMeventmoney());
                    torderlist.setYhnumb(ss.getIderatenums());
                    torderlist.setYhamnt(ss.getMderatemoney());
                    torderlist.setIsj(new Long(-1));
                    if (m_order.getIsjl() == 1) {
                        // 查询原来orderlist里面的积分规则
                        List ytl = timeSharingDao
                                .find("from TOrderlist where id.orid='"
                                        + m_order.getOrid()
                                        + "' and id.iscenicid="
                                        + torderlist.getId().getIscenicid()
                                        + " and itickettypeid="
                                        + torderlist.getItickettypeid()
                                        + " and icrowdkindpriceid="
                                        + torderlist.getIcrowdkindpriceid()
                                        + " and dtstartdate='"
                                        + torderlist.getDtstartdate()
                                        + "' and dtenddate='"
                                        + torderlist.getDtenddate() + "'");
                        TOrderlist yt = (TOrderlist) ytl.get(0);
                        yjifen = yjifen + (yt.getIsi() / yt.getNumb())
                                * torderlist.getNumb();
                        njifen = njifen + (yt.getIsh() / yt.getNumb())
                                * torderlist.getNumb();
                    }
                    timeSharingDao.save(torderlist);
                }

                List comlist = ss.getComlist();

                for (int j = 0; j < comlist.size(); j++) {

                    Stscomticketsalesdetailstab stscom = (Stscomticketsalesdetailstab) comlist
                            .get(j);
                    timeSharingDao.save(stscom);
                    if (isnet == 1) {

                        YZorderlist yzlist = new YZorderlist();
                        YZorderlistId yzid = new YZorderlistId();
                        yzid.setIscenicid(stssalesvouchertab.getIscenicid());
                        yzid.setOrid(stssalesvouchertab.getSzsalesvoucherno());
                        yzid.setOrderlistid(ss.getId()
                                .getIsalesvoucherdetailsid());
                        yzid.setZorderlistid(stscom.getId()
                                .getIcomticketsalesdetailsid());
                        yzlist.setId(yzid);
                        yzlist.setIcrowdkindpriceid(stscom
                                .getIcrowdkindpriceid());
                        yzlist.setIcrowdkindid(edmcrowdkindpricetab
                                .getIcrowdkindid());
                        yzlist.setDtstartdate(stscom.getDtstartdate());
                        yzlist.setDtenddate(stscom.getDtenddate());
                        yzlist.setItickettypeid(stscom.getItickettypeid());
                        yzlist.setIztickettypeid(stscom.getIztickettypeid());
                        yzlist.setIvenueid(stscom.getIvenueid());
                        yzlist.setIvenueareaid(stscom.getIvenueareaid());
                        yzlist.setIvenueseatsid(stscom.getIvenueseatsid());
                        yzlist.setTripid(stscom.getTripid());
                        yzlist.setZpric(stscom.getMsplitprice());
                        yzlist.setZamnt(stscom.getMsplitmoney());
                        yzlist.setZnumb(stscom.getIsplitamount());
                        yzlist.setMhandcharge(stscom.getMhandcharge());
                        yzlist.setTdfl(stscom.getTdfl());
                        yzlist.setZyhnumb(stscom.getIderatenums());
                        yzlist.setZyhamnt(stscom.getMderatemoney());
                        yzlist.setSqnumber(stscom.getIsplitamount()
                                - stscom.getIderatenums());
                        yzlist.setIse(stscom.getItripprdcontrolid());
                        List seatlist = stscom.getSeatlist();
                        if (seatlist != null && seatlist.size() > 0) {
                            for (int a = 0; a < seatlist.size(); a++) {
                                Seatsaletab so = (Seatsaletab) seatlist.get(a);
                                so.setIsvalid(0L);
                                timeSharingDao.update(so);
                                Seatyordertab ys = new Seatyordertab();
                                SeatyordertabId ysid = new SeatyordertabId();
                                ysid.setOrderlistid(yzlist.getId()
                                        .getOrderlistid());
                                ysid.setOrid(yzlist.getId().getOrid());
                                ysid.setIscenicid(yzlist.getId().getIscenicid());
                                ysid.setZorderlistid(yzlist.getId()
                                        .getZorderlistid());
                                ysid.setSeq(new Long(a + 1));
                                ys.setId(ysid);
                                ys.setIprogramid(yzlist.getIvenueseatsid());
                                ys.setItripid(yzlist.getTripid());
                                ys.setItripprdcontrolid(yzlist.getIse());
                                ys.setIvenueid(yzlist.getIvenueid());
                                ys.setIvenueareaid(yzlist.getIvenueareaid());
                                ys.setStartdate(yzlist.getDtstartdate()
                                        .substring(0, 10));
                                ys.setDtmakedate(Tools.getDayTime());
                                ys.setIseatid(new Long(so.getIseatid()));
                                ys.setIsvalid(1L);
                                timeSharingDao.save(ys);
                                // 退订删除座位状态数据

                                List seatorderlist = timeSharingDao
                                        .find(" from Seatordertab where id.orid='"
                                                + morder.getSrid()
                                                + "' and id.iscenicid="
                                                + yzlist.getId().getIscenicid()
                                                + " and itripprdcontrolid="
                                                + ys.getItripprdcontrolid()
                                                + " and iprogramid="
                                                + ys.getIprogramid()
                                                + " and iseatid="
                                                + ys.getIseatid()
                                                + " and itripid="
                                                + ys.getItripid()
                                                + " and substr(startdate,1,10)='"
                                                + ys.getStartdate().substring(
                                                0, 10) + "'");

                                Seatordertab s = (Seatordertab) seatorderlist
                                        .get(0);
                                s.setIsvalid(-1L);
                                timeSharingDao.update(s);
                                SeatstatustabId ststid = new SeatstatustabId();
                                ststid.setIvenueid(ys.getIvenueid());
                                ststid.setIvenueareaid(ys.getIvenueareaid());
                                ststid.setItripid(ys.getItripid());
                                ststid.setIseatid(ys.getIseatid());
                                ststid.setStartdate(ys.getStartdate());
                                Seatstatustab stst = (Seatstatustab) timeSharingDao
                                        .get(Seatstatustab.class, ststid);
                                timeSharingDao.delete(stst);

                            }
                        }

                        timeSharingDao.save(yzlist);
                        TZorderlist tzlist = new TZorderlist();
                        TZorderlistId tzid = new TZorderlistId();
                        tzid.setIscenicid(stssalesvouchertab.getIscenicid());
                        tzid.setOrid(stssalesvouchertab.getSzsalesvoucherno());
                        tzid.setOrderlistid(ss.getId()
                                .getIsalesvoucherdetailsid());
                        tzid.setZorderlistid(stscom.getId()
                                .getIcomticketsalesdetailsid());
                        tzlist.setId(tzid);
                        tzlist.setIcrowdkindpriceid(stscom
                                .getIcrowdkindpriceid());
                        tzlist.setIcrowdkindid(edmcrowdkindpricetab
                                .getIcrowdkindid());
                        tzlist.setDtstartdate(stscom.getDtstartdate());
                        tzlist.setDtenddate(stscom.getDtenddate());
                        tzlist.setItickettypeid(stscom.getItickettypeid());
                        tzlist.setIztickettypeid(stscom.getIztickettypeid());

                        tzlist.setIvenueid(stscom.getIvenueid());
                        tzlist.setIvenueareaid(stscom.getIvenueareaid());
                        tzlist.setIvenueseatsid(stscom.getIvenueseatsid());
                        tzlist.setTripid(stscom.getTripid());
                        tzlist.setZpric(stscom.getMsplitprice());
                        tzlist.setZamnt(stscom.getMsplitmoney());
                        tzlist.setZnumb(stscom.getIsplitamount());
                        tzlist.setZyhnumb(stscom.getIderatenums());
                        tzlist.setZyhamnt(stscom.getMderatemoney());

                        tzlist.setIsj(new Long(-1));

                        timeSharingDao.save(tzlist);
                    }

                }
            }
            if(!oldstssalesvouchertab.getSzsalesvoucherno().substring(8,11).equals("888") && !oldstssalesvouchertab.getSzsalesvoucherno().substring(8,11).equals("999")){
                if (yjifen > 0) {
                    // 读取用户的分社
                    String fusid = "";
                    Custom c = (Custom) timeSharingDao.get(Custom.class,
                            m_order.getUsid());

                    if (c.getUsqx().substring(0, 4).equals("0111")) {
                        fusid = c.getSusid();
                    } else {
                        fusid = c.getUsid();
                    }
                    List jflist = timeSharingDao.find(" from Usernumjf where usid='"
                            + fusid + "' and stdt<='" + m_order.getStdt()
                            + "' and etdt>='" + m_order.getStdt()
                            + "' and iscenicid=" + tdorder.getId().getIscenicid()
                            + " and jflb=1");
                    Usernumjf ujf = (Usernumjf) jflist.get(0);
                    ujf.setYpoint(ujf.getYpoint() - yjifen);
                    timeSharingDao.update(ujf);

                    UsernumjflistId yuid = new UsernumjflistId();
                    yuid.setOrid(y.getId().getOrid());
                    yuid.setUsid(fusid);
                    Usernumjflist yujflist = (Usernumjflist) timeSharingDao.get(
                            Usernumjflist.class, yuid);
                    Usernumjflist ujflist = new Usernumjflist();
                    UsernumjflistId uid = new UsernumjflistId();
                    uid.setOrid(tdorder.getId().getOrid());
                    uid.setUsid(fusid);
                    ujflist.setId(uid);
                    ujflist.setNid(yujflist.getNid());
                    ujflist.setIsvalid(new BigDecimal(1));
                    ujflist.setIscenicid(yujflist.getIscenicid());
                    ujflist.setJflb(new BigDecimal(1));
                    ujflist.setItickettypeid(yujflist.getItickettypeid());
                    ujflist.setItickettypeid2(yujflist.getItickettypeid2());
                    ujflist.setPoint(new Double(yjifen));
                    ujflist.setStdt(Tools.getTodayString());
                    ujflist.setEtdt(Tools.getTodayString());
                    ujflist.setStdt2(Tools.getTodayString());
                    ujflist.setJftp("03");
                    ujflist.setZusid(fusid);
                    timeSharingDao.save(ujflist);
                }
                if (njifen > 0) {
                    // 读取用户的分社
                    String fusid = "";
                    Custom c = (Custom) timeSharingDao.get(Custom.class,
                            m_order.getUsid());

                    if (c.getUsqx().substring(0, 4).equals("0111")) {
                        fusid = c.getSusid();
                    } else {
                        fusid = c.getUsid();
                    }
                    List jflist = timeSharingDao.find(" from Usernumjf where usid='"
                            + fusid + "' and stdt<='" + m_order.getStdt()
                            + "' and etdt>='" + m_order.getStdt()
                            + "' and iscenicid=" + tdorder.getId().getIscenicid()
                            + " and jflb=2");
                    Usernumjf ujf = (Usernumjf) jflist.get(0);
                    ujf.setYpoint(ujf.getYpoint() - njifen);
                    timeSharingDao.update(ujf);

                    UsernumjflistId yuid = new UsernumjflistId();
                    yuid.setOrid(y.getId().getOrid());
                    yuid.setUsid(fusid);
                    Usernumjflist yujflist = (Usernumjflist) timeSharingDao.get(
                            Usernumjflist.class, yuid);
                    Usernumjflist ujflist = new Usernumjflist();
                    UsernumjflistId uid = new UsernumjflistId();
                    uid.setOrid(tdorder.getId().getOrid());
                    uid.setUsid(fusid);
                    ujflist.setId(uid);
                    ujflist.setNid(yujflist.getNid());
                    ujflist.setIsvalid(new BigDecimal(1));
                    ujflist.setIscenicid(yujflist.getIscenicid());
                    ujflist.setJflb(new BigDecimal(1));
                    ujflist.setItickettypeid(yujflist.getItickettypeid());
                    ujflist.setItickettypeid2(yujflist.getItickettypeid2());
                    ujflist.setPoint(new Double(njifen));
                    ujflist.setStdt(Tools.getTodayString());
                    ujflist.setEtdt(Tools.getTodayString());
                    ujflist.setStdt2(Tools.getTodayString());
                    ujflist.setJftp("04");
                    ujflist.setZusid(fusid);
                    timeSharingDao.save(ujflist);
                }
            }
            for (int i = 0; i < zslist.size(); i++) {
                Stssoldticketsubtab zs = (Stssoldticketsubtab) zslist.get(i);
                zs.setIsvalid(new Long(-1));
                zs.setDtmakedate(nowtime);
                timeSharingDao.update(zs);
                StsschecktabId scid = new StsschecktabId();
                scid.setIsalesvoucherid(zs.getId().getIsalesvoucherid());
                scid.setIsalesvoucherdetailsid(zs.getId()
                        .getIsalesvoucherdetailsid());
                scid.setIticketstationid(zs.getId().getIticketstationid());
                scid.setSzsoldticketid(zs.getId().getSzsoldticketid());
                scid.setSzsoldticketsubid(zs.getId().getSzsoldticketsubid());
                Stsschecktab sc = (Stsschecktab) this.timeSharingDao.get(
                        Stsschecktab.class, scid);
                if (sc != null) {
                    sc.setIsvalid(new Long(-1));
                    sc.setDtmakedate(nowtime);
                    timeSharingDao.update(sc);
                }
            }
            List<StockOrderInfo> stocks = new ArrayList<StockOrderInfo>();
            String stockJson = "";
            for (int i = 0; i < slist.size(); i++) {
                Stssoldtickettab s3 = (Stssoldtickettab) slist.get(i);
                List zsdaillist = timeSharingDao
                        .find("from Stssoldticketsubtab where id.isalesvoucherid="
                                + isalesvoucherid
                                + " and id.iticketstationid="
                                + iticketstationid
                                + " and id.isalesvoucherdetailsid="
                                + s3.getId().getIsalesvoucherdetailsid()
                                + " and id.szsoldticketid="
                                + s3.getId().getSzsoldticketid()
                                + " and isvalid=1 order by iztickettypeid");
                if (zsdaillist == null || zsdaillist.size() == 0) {
                    s3.setByvalidity("01");// 全部退订
                    StockOrderInfo stockOrderInfo = new StockOrderInfo();
                    stockOrderInfo.setOrid(stssalesvouchertab.getSzsalesvoucherno());
                    stockOrderInfo.setProviderId(stssalesvouchertab.getIscenicid());
                    stockOrderInfo.setProductId(s3.getItickettypeid());
                    Stssalesvoucherdetailstab std = (Stssalesvoucherdetailstab) timeSharingDao.get(Stssalesvoucherdetailstab.class,
                            new StssalesvoucherdetailstabId(s3.getId().getIsalesvoucherdetailsid(),isalesvoucherid,iticketstationid));
                    stockOrderInfo.setPriceId(std.getIcrowdkindpriceid());
                    stockOrderInfo.setStockDate(s3.getDtstartdate());
                    stockOrderInfo.setNumb(-s3.getIplayerperticket());
                    stockOrderInfo.setUsid(stockUsid);
                    stocks.add(stockOrderInfo);
                }
                s3.setDtmakedate(nowtime);
                timeSharingDao.update(s3);
            }

            if (ystssalelist != null && ystssalelist.size() > 0) {
                for (int i = 0; i < ystssalelist.size(); i++) {
                    Stssalesvoucherdetailstab ystssalesvoucherdetailstab = (Stssalesvoucherdetailstab) ystssalelist
                            .get(i);
                    timeSharingDao.update(ystssalesvoucherdetailstab);
                }
            }

            // 服务商优惠 修改优惠明细
            if (yxsyhlist != null && yxsyhlist.size() > 0) {
                for (int h = 0; h < yxsyhlist.size(); h++) {
                    Stssalesvoucherdetailstab sts = (Stssalesvoucherdetailstab) yxsyhlist
                            .get(h);
                    timeSharingDao.update(sts);
                }
            }
            if (comtlist != null && comtlist.size() > 0) {
                for (int z = 0; z < comtlist.size(); z++) {
                    Stscomticketsalesdetailstab comt = (Stscomticketsalesdetailstab) comtlist
                            .get(z);
                    timeSharingDao.update(comt);
                }
            }

            // 2012-11-15 李经锐修改 增加 预制票退票后是否可再修改
            if (e.getIscenicid() != null && !e.getIscenicid().equals("")) {
                Hotelprovider hotelpder = (Hotelprovider) this.timeSharingDao.get(
                        Hotelprovider.class, e.getIscenicid());
                if (hotelpder != null) {
                    // 预制票可退票后销售
                    if (hotelpder.getNoted4() != null
                            && hotelpder.getNoted4().equals("1")) {
                        getWarehouseCheck(returnmodellist, e.getIscenicid(),
                                iemployeeid);
                    }

                    // IC卡入库销售
                    if (hotelpder.getInoteger5() != null
                            && hotelpder.getInoteger5() == 1) {
                        getICkupCheck(returnmodellist, iemployeeid);
                    }
                }
            }
            if(!oldstssalesvouchertab.getSzsalesvoucherno().substring(8,11).equals("888") && !oldstssalesvouchertab.getSzsalesvoucherno().substring(8,11).equals("999")){
                this.addOrderLog(stssalesvouchertab.getSzsalesvoucherno(),
                        stssalesvouchertab.getIscenicid(), iemployeeid,
                        oldstssalesvouchertab.getSzsalesvoucherno());
            }
            if(oldstssalesvouchertab.getSzsalesvoucherno().substring(8,11).equals("888") || oldstssalesvouchertab.getSzsalesvoucherno().substring(8,11).equals("999")){
                List<Companyscenic> csl = timeSharingDao.find("from Companyscenic c where c.id.iscenicid=? and c.cytonly='1'",
                        new Object[] {oldstssalesvouchertab.getIscenicid()});
                Galcompanyinfotab gal = (Galcompanyinfotab) timeSharingDao.get(Galcompanyinfotab.class, csl.get(0).getId().getIcompanyinfoid());
                System.out.println("tpmont:"+tpmont+",tpsx:"+tpsx);
                boolean b = true;//CYTClient.RefundOTOOrder(morder.getUsid(), gal.getSzcompanycode(), oldstssalesvouchertab.getSzsalesvoucherno(), szsalesvoucherno, String.valueOf(MathUtil.amplify2int(price, 2)), String.valueOf(returnmodellist.size()), String.valueOf(MathUtil.amplify2int(tpmont, 2)), String.valueOf(MathUtil.amplify2int(tpsx, 2)));
                if(b == false){
                    throw new RuntimeException("易旅宝退订接口通知失败，无法退订");
                }
            }
            Sysparv5 sysp = getSysparv5("COMM", "0006");
            if(sysp == null){
                sysp = new Sysparv5();
                sysp.setIsvalue(1L);
            }
            //返还库存
            if (WebContant.GetKeyValue("IsCenterUrl").equals("1") && sysp.getIsvalue() == 1L) {
                try {/*
                    javax.xml.rpc.Service service = null;
                    java.net.URL endpointURL = new java.net.URL("http://"
                            + url
                            + "/services/centersaleService?wsdl");
                    CentersaleServiceSoapBindingStub ssl = new CentersaleServiceSoapBindingStub(
                            endpointURL, service);
                    ssl.setMaintainSession(true);
                    ssl.saveStock(stockJson, "false");
                */} catch (Exception e1) {
                    e1.printStackTrace();
                    IStockService stockService = (IStockService) SpringUtil.getBean("stockService");
                    stockService.saveStockDetails(stocks, false);
                }
            }else{
                IStockService stockService = (IStockService) SpringUtil.getBean("stockService");
                try{
                    stockService.saveStockDetails(stocks, false);
                }catch (Exception e1){
                    e1.printStackTrace();
                }
            }
            if(!oldstssalesvouchertab.getSzsalesvoucherno().substring(8,11).equals("888") && !oldstssalesvouchertab.getSzsalesvoucherno().substring(8,11).equals("999")){
                boolean hqyt = CommonUtil.isHqyt();
                if(hqyt){
                    HqytClient client = new HqytClient();
                    RefundbillsRequest request = new RefundbillsRequest();
                    request.setId(Long.parseLong(m_order.getNoteh()));
                    request.setRefundMoney(stssalesvouchertab.getIacceptmoney()
                            - stssalesvouchertab.getMhandcharge());
                    request.setRefundOrid(stssalesvouchertab.getSzsalesvoucherno());
                    request.setReason("出票口出票退订");
                    request.setMemo("退款金额:"+stssalesvouchertab.getIacceptmoney()+";手续费:"+stssalesvouchertab.getMhandcharge());
                    try{
                        JSONRefundBill refundBill = client.refundbills(request);
                        if(refundBill != null){
                            morder.setNoteh(refundBill.getInvoice().getId().toString());
                            timeSharingDao.update(morder);
                        }else{
                            throw new RuntimeException("退订失败:申请退订失败");
                        }
                    }catch (Exception e1){
                        throw new RuntimeException("退订失败:"+e1.getMessage());
                    }
                }else{
                    saveUseryfk(zfusid, stssalesvouchertab.getSzsalesvoucherno(), 1,
                            "02", stssalesvouchertab.getIacceptmoney()
                                    - stssalesvouchertab.getMhandcharge(),
                            stssalesvouchertab.getMhandcharge(), "出票口出票退订");
                }
            }
            rs.addRow(new String[] { "true",
                    stssalesvouchertab.getId().getIsalesvoucherid().toString(),
                    String.valueOf(tpmont), String.valueOf(tpsx) });
            return rs;
        } catch (Exception e1) {
            throw e1;

        }

    }

    public ResultBean updatenojinquT_order(String orid, Long iscenicid,
                                           Long iemployeeid, Double mont) {
        ResultBean rs = new ResultBean();
        try {
            rs.setColumnCount(2);
            rs.setColumnNames(new String[] { "returnstats", "message" });
            String returnstats = "";
            String message = "";

            YOrder yorder = (YOrder) timeSharingDao.get(YOrder.class, new YOrderId(
                    orid, iscenicid));
            yorder.setNotec(Tools.getNowString());
            yorder.setIsc(iemployeeid);
			/*
			 * if (!yorder.getDdzt().equals("02")) { rs.addRow(new String[] {
			 * "fasle", "订单状态不是已付款状态不允许出票" }); return rs; }
			 */

            yorder.setDdzt("11");
            yorder.setNotec(Tools.getNowString());
            yorder.setIsc(iemployeeid);
            timeSharingDao.update(yorder);
            List listtorder = timeSharingDao.find("from TOrder where id.orid='"
                    + orid + "'");
            boolean b = true;
            for (int i = 0; i < listtorder.size(); i++) {
                TOrder t = (TOrder) listtorder.get(i);
                if (t.getId().getIscenicid().longValue() == iscenicid) {
                    if (t.getZfmont().doubleValue() != mont) {
                        rs.addRow(new String[] { "fasle", "订单金额不符" });
                        return rs;
                    }
					/*
					 * if (!t.getDdzt().equals("02")) { rs.addRow(new String[] {
					 * "fasle", "订单状态不是已付款状态不允许出票" }); return rs; }
					 */
                    t.setDdzt("11");
                    t.setNotec(Tools.getNowString());
                    t.setIsc(iemployeeid);
                    timeSharingDao.update(t);
                } else {
                    if (t.getDdzt().equals("02")) {
                        b = false;
                    }
                }
            }
            if (b) {
                // 该订单已经全部出票
                MOrder m = (MOrder) timeSharingDao.get(MOrder.class, orid);
                if (m.getNotea() != null && m.getNotea().equals("02")) {
                    m.setNotea("11");
                }
                m.setDdzt("11");
                timeSharingDao.update(m);
            }

            rs.addRow(new String[] { "true", "成功" });
            return rs;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            rs.addRow(new String[] { "false", e.getMessage() });
            return rs;
        }
    }

    public ResultBean reprintbyorid(String szsalesvoucherno, Long iscenicid,
                                    String ornm, String szregionalname, String corpname) {
        String sql = " select e.szsoldticketid,e.isalesvoucherdetailsid,e.isalesvoucherid,e.iticketstationid,e.itickettypeid,e.szticketprintno,e.iserialnum,e.icrowdkindid,e.dtstartdate,e.dtenddate,e.iplayerperticket,ed.szcrowdkindname,edt.sztickettypename||'('||ed.szcrowdkindname||')' as sztickettypename,ebs.szbusinessname,e.mactualsaleprice,s.szsalesvoucherno,e.manyouno,e.myzj,dy.lname as ornm,su.szinnername as szregionalname from Stssoldtickettab e,Edpcrowdkindtab ed,Edmtickettypetab edt,Edmbusinesstab ebs,Stssalesvouchertab s left outer join custom dy on dy.usid=s.dyusid left outer join Galsourceregiontab su on su.iregionalid=s.iregionalid where s.szsalesvoucherno='"
                + szsalesvoucherno
                + "' and s.iscenicid="
                + iscenicid
                + " and e.isalesvoucherid=s.isalesvoucherid and e.iticketstationid=s.iticketstationid  and ed.icrowdkindid=e.icrowdkindid and edt.itickettypeid=e.itickettypeid and ebs.ibusinessid=e.ibusinessid and edt.bymaketicketway='00'  order by e.iserialnum";

        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        for (Map map : list) {
            Long isalesvoucherdetailsid = new Long(map.get(
                    "ISALESVOUCHERDETAILSID").toString());
            String sql1 = " select sts.iztickettypeid,sts.tripid,sts.dtbegindate as dtstartdate,sts.dtenddate as dtenddate,edt.sztickettypename,t.tripname from Stssoldticketsubtab sts left outer join trip t on t.tripid=sts.tripid,Edmtickettypetab edt where isalesvoucherid="
                    + map.get("ISALESVOUCHERID").toString()
                    + " and isalesvoucherdetailsid="
                    + map.get("ISALESVOUCHERDETAILSID").toString()
                    + " and iticketstationid="
                    + map.get("ITICKETSTATIONID").toString()
                    + " and szsoldticketid="
                    + map.get("SZSOLDTICKETID").toString()
                    + " and sts.iztickettypeid=edt.itickettypeid and sts.isvalid=1";
            List<Map> list1 = new ArrayList();

            try {
                list1 = timeSharingDao.findBySqlToMap(sql1);
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            String zdail = "";
            String iztickettypeid = "";
            for (Map map1 : list1) {
                if (!iztickettypeid.equals(map1.get("IZTICKETTYPEID")
                        .toString())) {
                    if (new Long(map1.get("TRIPID").toString()) > 0) {

                        zdail = zdail + map1.get("SZTICKETTYPENAME").toString()
                                + "&" + map1.get("TRIPID").toString() + "&"
                                + map1.get("TRIPNAME").toString() + "&"
                                + map1.get("DTSTARTDATE").toString() + "&"
                                + map1.get("DTENDDATE").toString() + "@";
                    } else {
                        zdail = zdail + map1.get("SZTICKETTYPENAME").toString()
                                + "&" + "0" + "&" + "" + "&"
                                + map1.get("DTSTARTDATE").toString() + "&"
                                + map1.get("DTENDDATE").toString() + "@";
                    }
                    iztickettypeid = map1.get("IZTICKETTYPEID").toString();
                }
            }
            if (!zdail.equals("")) {
                zdail = zdail.substring(0, zdail.length() - 1);
            }
            map.put("ZDAIL", zdail);
            map.put("ORNM", ornm);
            map.put("SZREGIONALNAME", szregionalname);
            map.put("CORPNAME", corpname);
        }
        return MapToResultBean.toResultBean(list);
    }

    public void updatestsprint(Long isalesvoucherid, Long iticketstationid) {
        Stssalesvouchertab s = (Stssalesvouchertab) timeSharingService.get(
                Stssalesvouchertab.class, new StssalesvouchertabId(
                        isalesvoucherid, iticketstationid));
        s.setBispay(new Long(1));
        timeSharingService.update(s);

    }

    public Stssoldtickettab queryStssoldtickettab(String szticket) {
        Pattern p = Pattern.compile("^[0-9]+$");
        boolean b = p.matcher(szticket.substring(1)).matches();
        List list = new ArrayList();
        if (b) {
            Long ir = new Long(Long.parseLong(szticket.substring(1)));
            System.out.println("from Stssoldtickettab where szticketprintno='"
                    + szticket + "' or iserialnum=" + ir + " or myzj='"
                    + szticket + "' order by id.isalesvoucherid desc");
            list = this.timeSharingDao
                    .find(" from Stssoldtickettab where szticketprintno='"
                            + szticket + "' or iserialnum=" + ir + " or myzj='"
                            + szticket + "' order by id.isalesvoucherid desc");

        } else {

            list = this.timeSharingDao
                    .find(" from Stssoldtickettab where szticketprintno='"
                            + szticket + "' or myzj='" + szticket
                            + "' order by id.isalesvoucherid desc");

        }

        if (list == null || list.size() == 0) {

            return null;
        } else {

            return (Stssoldtickettab) list.get(0);
        }

    }

    /**
     * 根据订单号读取 票信息和检票信息:
     *
     * @auth:yuanchengjun
     * @param szticketprintno
     * @return return:ResultBean Date:2011-11-22
     */
    public ResultBean getorderbyorid(String orid, Long iscenicid) {
    	LOGGER.debug("getorderbyorid：进入通过订单获取订单信息接口");
        List<Map> stslist = new ArrayList();
        try {
        	LOGGER.debug("getorderbyorid：开始查询线下订单信息");
            stslist = timeSharingDao
                    .findBySqlToMap("select s.szsoldticketid,s.isalesvoucherdetailsid,s.isalesvoucherid,s.iticketstationid,s.dtstartdate,s.dtenddate,e.sztickettypename||'--'||edp.szcrowdkindname as sztickettypename,st.szsalesvoucherno,s.szticketprintno,st.usid,st.ihandler,em.szemployeename,s.byvalidity,s.iserialnum,s.itickettypeid,s.manyouno,s.myzj,se.isettlementid ,v5.pmva as strsettlement from Stssoldtickettab s,Edmtickettypetab e,Stssalesvouchertab st,Employee em,Edpcrowdkindtab edp,Stssalessettlementtab se,Sysparv5 v5 where s.icrowdkindid=edp.icrowdkindid and st.szsalesvoucherno='"
                            + orid
                            + "' and s.iscenicid="
                            + iscenicid
                            + " and s.byvalidity='00'"
                            + " and s.itickettypeid=e.itickettypeid and st.isalesvoucherid=s.isalesvoucherid and st.iticketstationid=s.iticketstationid and em.iemployeeid=st.ihandler and se.isalesvoucherid=s.isalesvoucherid and se.iticketstationid=s.iticketstationid and v5.pmky='ZFFS' and v5.pmcd=se.isettlementid order by s.iserialnum,s.isalesvoucherdetailsid");

        } catch (Exception e) {
            LOGGER.error("通过订单号获取订单信息接口异常："+StringUtil.toString_02(e));
        }
        if (stslist == null || stslist.size() == 0) {
        	LOGGER.debug("getorderbyorid：线下订单信息为空，订单id为："+orid);
            return null;
        }

        for (Map map : stslist) {
            Long iticketstationid = new Long(map.get("ITICKETSTATIONID")
                    .toString());
            Long isalesvoucherid = new Long(map.get("ISALESVOUCHERID")
                    .toString());
            Long szsoldticketid = new Long(map.get("SZSOLDTICKETID").toString());
            Long isalesvoucherdetailsid = new Long(map.get(
                    "ISALESVOUCHERDETAILSID").toString());
            List<Map> zstslist = new ArrayList();
            try {
                zstslist = timeSharingDao
                        .findBySqlToMap("select stsss.itickettypeid,stsss.iztickettypeid,et2.sztickettypename as zsztickettypename,et2.bycategorytype,stsss.tripid,t.tripname,stsss.dtbegindate,stsss.dtenddate,sum(stsss.ipassedtimes) as ipassedtimes  from Stssoldticketsubtab stsss " +
                                " left outer join trip t on t.tripid=stsss.tripid,Edmtickettypetab et2 where stsss.iticketstationid="
                                + iticketstationid
                                + " and stsss.isalesvoucherid="
                                + isalesvoucherid
                                + " and stsss.szsoldticketid="
                                + szsoldticketid
                                + "and stsss.isalesvoucherdetailsid="
                                + isalesvoucherdetailsid
                                + " and et2.itickettypeid=stsss.iztickettypeid and stsss.isvalid=1 group by stsss.itickettypeid,stsss.iztickettypeid,et2.sztickettypename ,et2.bycategorytype,stsss.tripid,t.tripname,stsss.dtbegindate,stsss.dtenddate order by stsss.itickettypeid,stsss.iztickettypeid");

            } catch (Exception e) {
            	LOGGER.error("查询订单详细信息异常："+StringUtil.toString_02(e));
            }
            String zdail = "";
            for (Map map1 : zstslist) {
                if (map1.get("TRIPID").toString().equals("0")) {
                    zdail = zdail + map1.get("IZTICKETTYPEID") + "&"
                            + map1.get("ZSZTICKETTYPENAME") + "&"
                            + map1.get("DTBEGINDATE") + "&"
                            + map1.get("DTENDDATE") + "&" + map1.get("TRIPID")
                            + "&" + "" + "&" + map1.get("IPASSEDTIMES")+"&"+map1.get("BYCATEGORYTYPE")+ "#";
                } else {
                    zdail = zdail + map1.get("IZTICKETTYPEID") + "&"
                            + map1.get("ZSZTICKETTYPENAME") + "&"
                            + map1.get("DTBEGINDATE") + "&"
                            + map1.get("DTENDDATE") + "&" + map1.get("TRIPID")
                            + "&" + map1.get("TRIPNAME") + "&"
                            + map1.get("IPASSEDTIMES") +"&"+map1.get("BYCATEGORYTYPE")+ "#";
                }
            }
            if (!zdail.equals("")) {
                zdail = zdail.substring(0, zdail.length() - 1);
            }
            map.put("ZDAIL", zdail);
            String orderno = map.get("SZSALESVOUCHERNO").toString();

            if (orderno != null && !orderno.equals("")) {
                if (orderno.substring(8, 11).equals("000")) {
                    map.put("ORDERTYPE", "网络订单");
                } else {
                    map.put("ORDERTYPE", "窗口订单");
                }
            }
        }
        return MapToResultBean.toResultBean(stslist);
    }

    /**
     * Describe:显示个人结存明细列表
     *
     * @auth:aozhuozu
     * @param ihandler
     * @param itickettypeid
     * @return return:List Date:2012-8-1
     */
    public List findAllPersonalticket(long ihandler, long itickettypeid) {
        String hsql = " from Iompersonalticketdetails where itickettypeid="
                + itickettypeid + " and iamount!=0 and ireceiverid=" + ihandler
                + " order by istartserial";
        List list = null;
        try {
            list = timeSharingDao.find(hsql);
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        return list;
    }

    /**
     * Describe:获取售票员的最小票号
     *
     * @auth:aozhuozu
     * @param iscenicid
     *            服务商编号
     * @param ticketpriceid
     *            票价格
     * @param userid
     *            售票员编号
     * @param tourDate
     *            游览日期
     * @param otherParm
     * @return return:ResultBean Date:2012-8-8
     */
    public ResultBean checkingFirstBarcodet(Long iscenicid, Long ticketpriceid,
                                            Long userid, String tourDate, String... otherParm) {
        Edmcrowdkindpricetab edmprice = (Edmcrowdkindpricetab) timeSharingDao.get(
                Edmcrowdkindpricetab.class, ticketpriceid);
        Long ticketid = edmprice.getItickettypeid();
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        Long iserialnum = 0L;
        // 根据售票员ID以及票类型ID获取对应的销售门票表列表
        String hsql = " select max(sd.iserialnum) as iserialnum from Stssoldtickettab sd,Stssalesvouchertab s where sd.iscenicid="
                + iscenicid
                + " and s.ihandler="
                + userid
                + " and sd.itickettypeid="
                + ticketid
                + " and sd.id.isalesvoucherid=s.id.isalesvoucherid ";
        List stssoldticket = timeSharingDao.find(hsql);
        if (stssoldticket != null && stssoldticket.size() > 0) {
            Object o = (Object) stssoldticket.get(0);
            if (o != null) {
                Long maxno = (Long) o;
                if (iserialnum < maxno) {
                    iserialnum = maxno;
                }
            }
        }

        // 根据条件获取个人结存明细列表
        List perdetails = this.findAllPersonalticket(userid, ticketid);
        if (perdetails != null && perdetails.size() > 0) {
            // 在销售门票表存在此类票的基础上，在个人明细中寻找出比其偏大的流水票号
            String newiserialnum = null;
            if (iserialnum != null && iserialnum > 0) {
                for (int i = 0; i < perdetails.size(); i++) {
                    Iompersonalticketdetails newperdetaile = (Iompersonalticketdetails) perdetails
                            .get(i);
                    if (iserialnum < newperdetaile.getIstartserial()) {
                        newiserialnum = newperdetaile.getSzstartticketcode();
                        rs.addRow(new String[] { "true", newiserialnum });
                        break;
                    }
                }
                if (newiserialnum == null) {
                    Iompersonalticketdetails psd = (Iompersonalticketdetails) perdetails
                            .get(0);
                    newiserialnum = psd.getSzstartticketcode(); // 先设明细第一个流水号最小
                    rs.addRow(new String[] { "true", newiserialnum });
                }

            } else {
                // 在销售门票表不存在此类票的基础上，在个人明细中寻找出最小的流水票号
                Iompersonalticketdetails perdetaile = (Iompersonalticketdetails) perdetails
                        .get(0);
                newiserialnum = perdetaile.getSzstartticketcode(); // 先设明细第一个流水号最小
                rs.addRow(new String[] { "true", newiserialnum });
            }
        } else {
            // 个人结存明细不存在此类票
            rs.addRow(new String[] { "false", "个人结存明细不存在此类票" });
        }
        return rs;
    }

    /**
     *
     * Describe:获取数量为num后售票员手中的最小票号
     *
     * @auth:lijingrui
     * @param iscenicid
     *            服务商编号
     * @param ticketpriceid
     *            票类
     * @param userid
     *            售票员编号
     * @param tourDate
     *            游览日期
     * @param num
     *            数量
     * @param otherParm
     * @return return:ResultBean Date:2013-4-13
     */
    public ResultBean checkingFirstBarcodet(Long iscenicid, Long ticketpriceid,
                                            Long userid, String tourDate, int num, String... otherParm) {
        Edmcrowdkindpricetab edmprice = (Edmcrowdkindpricetab) timeSharingDao.get(
                Edmcrowdkindpricetab.class, ticketpriceid);
        Long ticketid = edmprice.getItickettypeid();
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        Long iserialnum = 0L;
        // 根据售票员ID以及票类型ID获取对应的销售门票表列表
        String hsql = " select max(sd.iserialnum) as iserialnum from Stssoldtickettab sd,Stssalesvouchertab s where sd.iscenicid="
                + iscenicid
                + " and s.ihandler="
                + userid
                + " and sd.itickettypeid="
                + ticketid
                + " and sd.id.isalesvoucherid=s.id.isalesvoucherid ";
        List stssoldticket = timeSharingDao.find(hsql);
        if (stssoldticket != null && stssoldticket.size() > 0) {
            Object o = (Object) stssoldticket.get(0);
            if (o != null) {
                Long maxno = (Long) o;
                if (iserialnum < maxno) {
                    iserialnum = maxno;
                }
            }
        }

        // 根据条件获取个人结存明细列表
        List perdetails = this.findAllPersonalticket(userid, ticketid);
        if (perdetails != null && perdetails.size() > 0) {
            // 在销售门票表存在此类票的基础上，在个人明细中寻找出比其偏大的流水票号
            String newiserialnum = null;
            if (iserialnum != null && iserialnum > 0) {
                for (int i = 0; i < perdetails.size(); i++) {
                    Iompersonalticketdetails newperdetaile = (Iompersonalticketdetails) perdetails
                            .get(i);
                    if (iserialnum < newperdetaile.getIstartserial()) {
                        newiserialnum = newperdetaile.getSzstartticketcode();

                        Long nums = 0L;
                        String msql = "select sum(pds.iamount) as iamount from Iompersonalticketdetails pds where pds.itickettypeid="
                                + ticketid
                                + " and pds.ireceiverid="
                                + userid
                                + " and pds.iendserial>="
                                + newperdetaile.getIstartserial();
                        nums = (Long) this.timeSharingDao.findTopNumb(msql, 1).get(
                                0);
                        if (nums == null || nums <= 0) {
                            rs.addRow(new String[] { "false", "此票类已售完!!!" });
                            return rs;
                        } else {
                            // 获取票号组合
                            if ((num + 1) > nums) {
                                rs.addRow(new String[] { "false",
                                        "售票员手中从" + newiserialnum + "起没有足够数量!!!" });
                                return rs;
                            }
                        }

                        if (num != 0) {
                            num = num + 1;
                            newiserialnum = showViewendcode(ticketid,
                                    newiserialnum, new Long(num), userid); // 根据票ID、起始票号和数量计算出截止票号
                        }

                        rs.addRow(new String[] { "true", newiserialnum });
                        break;
                    }
                }
                if (newiserialnum == null) {
                    Iompersonalticketdetails psd = (Iompersonalticketdetails) perdetails
                            .get(0);
                    newiserialnum = psd.getSzstartticketcode(); // 先设明细第一个流水号最小

                    if (num != 0) {
                        num = num + 1;
                        newiserialnum = showViewendcode(ticketid,
                                newiserialnum, new Long(num), userid); // 根据票ID、起始票号和数量计算出截止票号
                    }

                    rs.addRow(new String[] { "true", newiserialnum });
                }

            } else {
                // 在销售门票表不存在此类票的基础上，在个人明细中寻找出最小的流水票号
                Iompersonalticketdetails perdetaile = (Iompersonalticketdetails) perdetails
                        .get(0);
                newiserialnum = perdetaile.getSzstartticketcode(); // 先设明细第一个流水号最小

                Long nums = 0L;
                String msql = "select sum(pds.iamount) as iamount from Iompersonalticketdetails pds where pds.itickettypeid="
                        + ticketid
                        + " and pds.ireceiverid="
                        + userid
                        + " and pds.iendserial>="
                        + perdetaile.getIstartserial();
                nums = (Long) this.timeSharingDao.findTopNumb(msql, 1).get(0);
                if (nums == null || nums <= 0) {
                    rs.addRow(new String[] { "false", "此票类已售完!!!" });
                    return rs;
                } else {
                    // 获取票号组合
                    if ((num + 1) > nums) {
                        rs.addRow(new String[] { "false",
                                "售票员手中从" + newiserialnum + "起没有足够数量!!!" });
                        return rs;
                    }
                }

                if (num != 0) {
                    num = num + 1;
                    newiserialnum = showViewendcode(ticketid, newiserialnum,
                            new Long(num), userid); // 根据票ID、起始票号和数量计算出截止票号
                }

                rs.addRow(new String[] { "true", newiserialnum });
            }
        } else {
            // 个人结存明细不存在此类票
            rs.addRow(new String[] { "false", "个人结存明细不存在此类票" });
        }
        return rs;
    }

    /**
     * Describe:判断票号是否符合票号规则
     *
     * @auth:aozhuozu
     * @param ticketcode
     * @param itickettypeid
     * @return return:boolean Date:2012-7-31
     */
    public boolean reShowtickrule(String ticketcode, Long itickettypeid) {
        Edmtickettypetab edmticket = (Edmtickettypetab) timeSharingDao.get(
                Edmtickettypetab.class, itickettypeid);
        if (edmticket != null) {
            String sql = " from Edmticketnoruletab rule where rule.byisuse=1 and rule.iscenicid="
                    + edmticket.getIscenicid();
            List lst = timeSharingDao.find(sql);
            if (lst != null && lst.size() > 0) {
                Edmticketnoruletab ticketrule = (Edmticketnoruletab) lst.get(0);
                if (ticketcode.length() != ticketrule.getIticketnolen()) {
                    return true; // 输入的票总长度不对
                } else {
                    // 获取票号前缀
                    if (ticketrule.getIntons2() != null
                            && ticketrule.getIntons2() != 0) {
                        String start = ticketcode.substring(0,
                                ticketrule.getIntons2());
                        if (!ticketrule.getSzticketnoprefix().equals(start)) {
                            return true;
                        }
                    }

                    StringBuffer code = new StringBuffer();
                    code.append(edmticket.getSzticketprintcode());
                    // 获取票号中的票代码信息，并比较
                    String tkcode = ticketcode.substring(
                            ticketrule.getIntons2(), ticketrule.getIntons2()
                                    + ticketrule.getItickettypecodepos());
                    Integer zc = ticketrule.getItickettypecodepos();
                    if (edmticket.getSzticketprintcode().length() < zc
                            .intValue()) {
                        for (int b = 0; b < zc
                                - edmticket.getSzticketprintcode().length(); b++) {
                            code.append("0");
                        }
                    } else if (edmticket.getSzticketprintcode().length() > zc
                            .intValue()) {
                        return true;// 票号规则与编码冲突
                    }
                    if (code.toString().equals(tkcode)) {
                        String lsh = ticketcode.substring(
                                ticketrule.getIntons2()
                                        + ticketrule.getItickettypecodepos(),
                                ticketrule.getIntons2()
                                        + ticketrule.getItickettypecodepos()
                                        + ticketrule.getIserialnolen());
                        // 2012-10-16修改 根据票号规则判断是十进制还是三十六进制
                        Long serials = null;
                        if (ticketrule.getIntons1() != null
                                && ticketrule.getIntons1() == 1) {
                            Pattern p = Pattern.compile("^[0-9]*$");
                            boolean b = p.matcher(lsh).matches();
                            if (b == false) {
                                return true;// 您输入的流水号有误
                            }
                            serials = Long.parseLong(lsh);
                        } else {
                            serials = Tools.Text36ToConvert(lsh);
                        }

                        if (serials == null) {
                            return true;
                        } else {
                            Pattern p = Pattern.compile("^[0-9]*$");
                            boolean b = p.matcher(serials.toString()).matches();
                            if (b == false) {
                                return true;// 您输入的流水号有误
                            } else {
                                // 判断后缀
                                if (ticketrule.getSzticketnosuffix() != null
                                        && !"".equals(ticketrule
                                        .getSzticketnosuffix())
                                        && !"0".equals(ticketrule
                                        .getSzticketnosuffix())) {
                                    String endup = ticketcode
                                            .substring(
                                                    ticketcode.length()
                                                            - Integer
                                                            .parseInt(ticketrule
                                                                    .getSzticketnosuffix()),
                                                    ticketcode.length());
                                    if (ticketrule.getSztron1().equals(endup)) {
                                        return false;// 票号输入正确
                                    } else {
                                        return true;
                                    }
                                } else {
                                    return false;// 票号输入正确
                                }
                            }
                        }

                    } else {
                        return true;// 输入的票号中票代码有误
                    }

                }
            } else {
                return true; // 服务商下的票号规则未设置
            }

        } else {
            return true; // 产品ID不能为空
        }

    }

    /**
     * Describe:判断票号是否存在售票员手中
     *
     * @auth:aozhuozu
     * @param empid
     * @param itickettypeid
     * @param ticketcode
     * @return return:boolean Date:2012-8-1
     */
    public boolean isExist(Long empid, Long itickettypeid, String ticketcode) {
        List perDetail = findAllPersonalticket(empid, itickettypeid);
        Edmtickettypetab edmticket = (Edmtickettypetab) this.timeSharingDao.get(
                Edmtickettypetab.class, itickettypeid);
        Long istartserial = null;
        if (edmticket != null) {
            String sql = " from Edmticketnoruletab rule where rule.byisuse=1 and rule.iscenicid="
                    + edmticket.getIscenicid();
            List lst = this.timeSharingDao.find(sql);
            if (lst != null && lst.size() > 0) {
                Edmticketnoruletab ticketrule = (Edmticketnoruletab) lst.get(0);
                if (ticketrule.getIntons1() != null
                        && ticketrule.getIntons1() == 1) {
                    istartserial = Long.parseLong(ticketcode);
                } else {
                    istartserial = Tools.Text36ToConvert(ticketcode);
                }
            }
        }
        // Long istartserial = Tools.Text36ToConvert(ticketcode);

        if (perDetail.size() > 0) {
            for (int i = 0; i < perDetail.size(); i++) {
                Iompersonalticketdetails details = (Iompersonalticketdetails) perDetail
                        .get(i);
                if (istartserial >= details.getIstartserial()
                        && istartserial <= details.getIendserial()) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean isExistcode(Long empid, Long itickettypeid, String ticketcode) {
        List perDetail = findAllPersonalticket(empid, itickettypeid);
        Edmtickettypetab edmticket = (Edmtickettypetab) this.timeSharingDao.get(
                Edmtickettypetab.class, itickettypeid);
        Long istartserial = null;
        if (edmticket != null) {
            String sql = " from Edmticketnoruletab rule where rule.byisuse=1 and rule.iscenicid="
                    + edmticket.getIscenicid();
            List lst = this.timeSharingDao.find(sql);
            if (lst != null && lst.size() > 0) {
                Edmticketnoruletab ticketrule = (Edmticketnoruletab) lst.get(0);

                // 获取起始流水号
                String startial = ticketcode.substring(
                        ticketrule.getIntons2()
                                + ticketrule.getItickettypecodepos(),
                        ticketrule.getIntons2()
                                + ticketrule.getItickettypecodepos()
                                + ticketrule.getIserialnolen());

                if (ticketrule.getIntons1() != null
                        && ticketrule.getIntons1() == 1) {
                    istartserial = Long.parseLong(startial);
                } else {
                    istartserial = Tools.Text36ToConvert(startial);
                }
            }
        }

        if (perDetail.size() > 0) {
            for (int i = 0; i < perDetail.size(); i++) {
                Iompersonalticketdetails details = (Iompersonalticketdetails) perDetail
                        .get(i);
                if (istartserial >= details.getIstartserial()
                        && istartserial <= details.getIendserial()) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Describe:根据票ID、起始票号和数量计算出截止票号
     *
     * @auth:aozhuozu
     * @param itickettypeid
     *            选择的需售的票产品
     * @param ticketcode
     *            起始票号
     * @param iamount
     *            数量
     * @param empid
     *            登录售票软件的员工ID
     * @return return:List Date:2012-7-31
     */
    public String showViewendcode(Long itickettypeid, String ticketcode,
                                  Long iamount, Long empid) {
        // List perDetail=findAllPersonalticket(empid,itickettypeid);
        Edmtickettypetab edmticket = (Edmtickettypetab) timeSharingDao.get(
                Edmtickettypetab.class, itickettypeid);
        StringBuffer endcode = new StringBuffer();
        if (edmticket != null) {
            String sql = " from Edmticketnoruletab rule where rule.byisuse=1 and rule.iscenicid="
                    + edmticket.getIscenicid();
            List lst = timeSharingDao.find(sql);
            if (lst != null && lst.size() > 0) {
                Edmticketnoruletab ticketrule = (Edmticketnoruletab) lst.get(0);
                // 获取票号前缀
                String start = ticketcode.substring(0, ticketrule.getIntons2()
                        + ticketrule.getItickettypecodepos());
                // 获取票号后缀
                String end = ticketcode.substring(
                        ticketcode.length()
                                - Integer.parseInt(ticketrule
                                .getSzticketnosuffix()),
                        ticketcode.length());
                // 获取开始票号的流水号
                String lsh = ticketcode.substring(
                        ticketrule.getIntons2()
                                + ticketrule.getItickettypecodepos(),
                        ticketrule.getIntons2()
                                + ticketrule.getItickettypecodepos()
                                + ticketrule.getIserialnolen());

                Long istartserial = null;
                if (ticketrule.getIntons1() != null
                        && ticketrule.getIntons1() == 1) {
                    istartserial = Long.parseLong(lsh);
                } else {
                    istartserial = Tools.Text36ToConvert(lsh);
                }
                // Long istartserial = Tools.Text36ToConvert(lsh);
                Long szcodeend = null;
                Long num = null;
                String hsql = " from Iompersonalticketdetails where itickettypeid="
                        + itickettypeid
                        + " and ireceiverid="
                        + empid
                        + " and iendserial>="
                        + istartserial
                        + " order by istartserial";
                List perDetail = this.timeSharingDao.find(hsql);
                for (int i = 0; i < perDetail.size(); i++) {
                    Iompersonalticketdetails details = (Iompersonalticketdetails) perDetail
                            .get(i);
                    if (istartserial >= details.getIstartserial()
                            && istartserial <= details.getIendserial()) {
                        int sign = i + 1;
                        num = details.getIendserial() - istartserial + 1;
                        if (num >= iamount) {
                            szcodeend = istartserial + iamount - 1L;
                        } else {
                            iamount -= num;
                            for (; sign < perDetail.size(); sign++) {
                                Iompersonalticketdetails detailss = (Iompersonalticketdetails) perDetail
                                        .get(sign);
                                if (iamount <= detailss.getIamount()) {
                                    szcodeend = detailss.getIstartserial()
                                            + iamount - 1;
                                    break;
                                } else {
                                    iamount -= detailss.getIamount();
                                }
                            }
                        }
                        break;
                    }
                }
                // 截止票号
                StringBuffer szcodes = new StringBuffer();
                if (szcodeend.toString().length() < ticketrule
                        .getIserialnolen()) {
                    for (int b = 0; b < ticketrule.getIserialnolen()
                            - szcodeend.toString().length(); b++) {
                        szcodes.append("0");
                    }
                }
                szcodes.append(szcodeend);

                StringBuffer endcodesg = new StringBuffer();
                // String szflse =
                // Tools.ConvertTo36Text(Long.parseLong(szcodes.toString()), 0);
                // if(szflse.length()<ticketrule.getIserialnolen()){
                // for (int b = 0; b <ticketrule.getIserialnolen()
                // -szflse.length();
                // b++) {
                // endcodesg.append("0");
                // }
                // }
                // endcodesg.append(szflse);
                if (ticketrule.getIntons1() != null
                        && ticketrule.getIntons1() == 0) {
                    String szflse = Tools.ConvertTo36Text(
                            Long.parseLong(szcodes.toString()), 0);
                    if (szflse.length() < ticketrule.getIserialnolen()) {
                        for (int b = 0; b < ticketrule.getIserialnolen()
                                - szflse.length(); b++) {
                            endcodesg.append("0");
                        }
                    }
                    endcodesg.append(szflse);
                } else {
                    endcodesg.append(szcodes);
                }

                endcode.append(start);
                endcode.append(endcodesg);
                endcode.append(end);
            }
        }
        return endcode.toString();
    }

    /**
     *
     * Describe:根据数量计算出截止票号
     *
     * @auth:lijingrui
     * @param itickettypeid
     * @param ticketcode
     * @param iamount
     * @param empid
     * @return return:String Date:2013-3-4
     */
    public String showJishuanendcode(Long itickettypeid, String ticketcode,
                                     Long iamount, Long empid) {
        Edmtickettypetab edmticket = (Edmtickettypetab) timeSharingDao.get(
                Edmtickettypetab.class, itickettypeid);
        StringBuffer endcode = new StringBuffer();
        if (edmticket != null) {
            String sql = " from Edmticketnoruletab rule where rule.byisuse=1 and rule.iscenicid="
                    + edmticket.getIscenicid();
            List lst = timeSharingDao.find(sql);
            if (lst != null && lst.size() > 0) {
                Edmticketnoruletab ticketrule = (Edmticketnoruletab) lst.get(0);
                // 获取票号前缀
                String start = ticketcode.substring(0, ticketrule.getIntons2()
                        + ticketrule.getItickettypecodepos());
                // 获取票号后缀
                String end = ticketcode.substring(
                        ticketcode.length()
                                - Integer.parseInt(ticketrule
                                .getSzticketnosuffix()),
                        ticketcode.length());
                // 获取开始票号的流水号
                String lsh = ticketcode.substring(
                        ticketrule.getIntons2()
                                + ticketrule.getItickettypecodepos(),
                        ticketrule.getIntons2()
                                + ticketrule.getItickettypecodepos()
                                + ticketrule.getIserialnolen());

                Long istartserial = null;
                if (ticketrule.getIntons1() != null
                        && ticketrule.getIntons1() == 1) {
                    istartserial = Long.parseLong(lsh);
                } else {
                    istartserial = Tools.Text36ToConvert(lsh);
                }

                istartserial = istartserial + iamount - 1;

                StringBuffer szcodes = new StringBuffer();
                if (istartserial.toString().length() < ticketrule
                        .getIserialnolen()) {
                    for (int b = 0; b < ticketrule.getIserialnolen()
                            - istartserial.toString().length(); b++) {
                        szcodes.append("0");
                    }
                }
                szcodes.append(istartserial);

                StringBuffer endcodesg = new StringBuffer();

                if (ticketrule.getIntons1() != null
                        && ticketrule.getIntons1() == 0) {
                    String szflse = Tools.ConvertTo36Text(
                            Long.parseLong(szcodes.toString()), 0);
                    if (szflse.length() < ticketrule.getIserialnolen()) {
                        for (int b = 0; b < ticketrule.getIserialnolen()
                                - szflse.length(); b++) {
                            endcodesg.append("0");
                        }
                    }
                    endcodesg.append(szflse);
                } else {
                    endcodesg.append(szcodes);
                }

                endcode.append(start);
                endcode.append(endcodesg);
                endcode.append(end);
            }
        }
        return endcode.toString();
    }

    /**
     * Describe:取出票号组合
     *
     * @auth:aozhuozu
     * @param iscenicid
     *            服务商编号
     * @param ticketpriceid
     *            票价格
     * @param firstBarcode
     *            起始条码
     * @param count
     *            数量
     * @param tourDate
     *            游览日期
     * @param userid
     *            售票员编号
     * @param otherParm
     * @return return:ResultBean Date:2012-8-8
     */
    public ResultBean checkingPrefabricateTicket(Long iscenicid,
                                                 Long ticketpriceid, String firstBarcode, int count,
                                                 String tourDate, Long userid, String... otherParm) {

        Edmcrowdkindpricetab edmprice = (Edmcrowdkindpricetab) timeSharingDao.get(
                Edmcrowdkindpricetab.class, ticketpriceid);
        Long ticketid = edmprice.getItickettypeid();
        ResultBean success = new ResultBean();
        success.setColumnCount(2);
        success.setColumnNames(new String[] { "returnstats", "message" });
        ResultBean fail = new ResultBean();
        fail.setColumnCount(2);
        fail.setColumnNames(new String[] { "returnstats", "message" });
        List list = null;
        String message = null;
        Edmtickettypetab edmticket = (Edmtickettypetab) timeSharingDao.get(
                Edmtickettypetab.class, ticketid);
        String sql = " from Edmticketnoruletab rule where rule.byisuse=1 and rule.iscenicid="
                + iscenicid;
        list = timeSharingDao.find(sql);
        if (list != null && list.size() > 0) {
            Edmticketnoruletab ticketrule = (Edmticketnoruletab) list.get(0);
            String startial = "";
            if (firstBarcode.length() != ticketrule.getIticketnolen()) {
                fail.addRow(new String[] { "false", "起始条码位数不等于票号总长度,票号非法！！！" });
                return fail;
            } else {
                // 判断票号规则
                boolean b = reShowtickrule(firstBarcode, ticketid);
                if (b) {
                    fail.addRow(new String[] { "false", "不符票号规则，票号非法！！！" });
                    return fail;
                }
                // 获取起始流水号
                startial = firstBarcode.substring(
                        ticketrule.getIntons2()
                                + ticketrule.getItickettypecodepos(),
                        ticketrule.getIntons2()
                                + ticketrule.getItickettypecodepos()
                                + ticketrule.getIserialnolen());
                // 判断票号是否存在售票员手中
                if (!isExist(userid, ticketid, startial)) {
                    fail.addRow(new String[] { "false", "手中无此票号，已出售或者未领用!!!" });
                    return fail;
                }
            }

            Long serialcode = null;
            if (ticketrule.getIntons1() != null && ticketrule.getIntons1() == 1) {
                serialcode = Long.parseLong(startial);
            } else {
                serialcode = Tools.Text36ToConvert(startial);
            }

            // 比较数量是否足够
            List perDetail = findAllPersonalticket(userid, ticketid);
            Long num = 0L;
            if (perDetail.size() > 0) {
                String msql = "select sum(pds.iamount) as iamount from Iompersonalticketdetails pds where pds.itickettypeid="
                        + ticketid
                        + " and pds.ireceiverid="
                        + userid
                        + " and pds.iendserial>=" + serialcode;
                num = (Long) this.timeSharingDao.findTopNumb(msql, 1).get(0);
                if (num == null || num <= 0) {
                    fail.addRow(new String[] { "false", "此票类已售完!!!" });
                    return fail;
                } else {
                    // 获取票号组合
                    if (new Long(count) <= num) {

                        String qsql = " from Iompersonalticketdetails pds where pds.itickettypeid="
                                + ticketid
                                + " and pds.ireceiverid="
                                + userid
                                + " and pds.iendserial>="
                                + serialcode
                                + " order by pds.istartserial ";
                        List countlist = this.timeSharingDao.find(qsql);
                        if (countlist != null && countlist.size() > 0) {
                            Long jsmaount = 0L;
                            for (int z = 0; z < countlist.size(); z++) {
                                Iompersonalticketdetails jsdetails = (Iompersonalticketdetails) countlist
                                        .get(z);
                                if (serialcode >= jsdetails.getIstartserial()) {
                                    jsmaount += jsdetails.getIendserial()
                                            - serialcode + 1;
                                } else if (serialcode < jsdetails
                                        .getIstartserial()) {
                                    jsmaount += jsdetails.getIamount();
                                }
                            }

                            if (new Long(count) > jsmaount) {
                                fail.addRow(new String[] {
                                        "false",
                                        "从" + firstBarcode
                                                + "起没有足够数量,请输入最小票号!!!" });
                                return fail;
                            }
                        }

                        // 根据起始票号与数量获取截止票号
                        String startserial = null;
                        String endticket = showViewendcode(ticketid,
                                firstBarcode, new Long(count), userid);
                        if (firstBarcode.length() == ticketrule
                                .getIticketnolen()) {
                            startserial = firstBarcode.substring(
                                    ticketrule.getIntons2()
                                            + ticketrule
                                            .getItickettypecodepos(),
                                    ticketrule.getIntons2()
                                            + ticketrule
                                            .getItickettypecodepos()
                                            + ticketrule.getIserialnolen());
                            endticket = endticket.substring(
                                    ticketrule.getIntons2()
                                            + ticketrule
                                            .getItickettypecodepos(),
                                    ticketrule.getIntons2()
                                            + ticketrule
                                            .getItickettypecodepos()
                                            + ticketrule.getIserialnolen());
                        }
                        Long istartserial = null;
                        Long iendserial = null;
                        if (ticketrule.getIntons1() != null
                                && ticketrule.getIntons1() == 1) {
                            istartserial = Long.parseLong(startserial);// 起始票号流水号
                            iendserial = Long.parseLong(endticket);// 截止票号流水号
                        } else {
                            istartserial = Tools.Text36ToConvert(startserial);// 起始票号流水号
                            iendserial = Tools.Text36ToConvert(endticket);// 截止票号流水号
                        }
                        for (int i = 0; i < perDetail.size(); i++) {
                            Iompersonalticketdetails details = (Iompersonalticketdetails) perDetail
                                    .get(i);
                            String serial = null;// 流水号
                            // 判断传来的起始票号在个人明细的哪一段
                            if (istartserial >= details.getIstartserial()
                                    && istartserial <= details.getIendserial()) {
                                int sign = i;
                                int group = 1;
                                Long newistartserial = istartserial;
                                for (; sign < perDetail.size(); sign++) {
                                    Iompersonalticketdetails detailss = (Iompersonalticketdetails) perDetail
                                            .get(sign);
                                    // 把流水号列举出来
                                    for (int j = 0; j < detailss.getIamount(); j++) {
                                        if (newistartserial <= iendserial
                                                && newistartserial <= detailss
                                                .getIendserial()) {
                                            // 把起始流水号转换成起始票号
                                            Iompersonalticketdetails newdetail = (Iompersonalticketdetails) perDetail
                                                    .get(0);
                                            String start = newdetail
                                                    .getSzstartticketcode();
                                            StringBuffer startticket = new StringBuffer();
                                            // 获取票号前缀
                                            String prestart = start
                                                    .substring(
                                                            0,
                                                            ticketrule
                                                                    .getIntons2()
                                                                    + ticketrule
                                                                    .getItickettypecodepos());
                                            // 补充流水号
                                            StringBuffer szcodes = new StringBuffer();
                                            if (newistartserial.toString()
                                                    .length() < ticketrule
                                                    .getIserialnolen()) {
                                                for (int b = 0; b < ticketrule
                                                        .getIserialnolen()
                                                        - newistartserial
                                                        .toString()
                                                        .length(); b++) {
                                                    szcodes.append("0");
                                                }
                                            }
                                            szcodes.append(newistartserial);
                                            // 获取票号后缀
                                            String end = detailss
                                                    .getSzstartticketcode()
                                                    .substring(
                                                            start.length()
                                                                    - Integer
                                                                    .parseInt(ticketrule
                                                                            .getSzticketnosuffix()),
                                                            start.length());

                                            StringBuffer endcodesg = new StringBuffer();
                                            String szflse = "";
                                            if (ticketrule.getIntons1() != null
                                                    && ticketrule.getIntons1() == 1) {
                                                szflse = szcodes.toString();
                                            } else {
                                                szflse = Tools
                                                        .ConvertTo36Text(
                                                                Long.parseLong(szcodes
                                                                        .toString()),
                                                                0);
                                            }

                                            if (szflse.length() < ticketrule
                                                    .getIserialnolen()) {
                                                for (int b = 0; b < ticketrule
                                                        .getIserialnolen()
                                                        - szflse.length(); b++) {
                                                    endcodesg.append("0");
                                                }
                                            }
                                            endcodesg.append(szflse);

                                            startticket.append(prestart);
                                            startticket.append(endcodesg);
                                            startticket.append(end);
                                            serial = startticket.toString();
                                            success.addRow(new String[] {
                                                    serial, "" + group });
                                            newistartserial = newistartserial + 1;
                                        }
                                    }
                                    group += 1;
                                    if (sign < perDetail.size() - 1) {
                                        detailss = (Iompersonalticketdetails) perDetail
                                                .get(sign + 1);
                                        newistartserial = detailss
                                                .getIstartserial();
                                    }
                                }
                                break;
                            }
                        }
                    } else {
                        fail.addRow(new String[] { "false",
                                "从" + firstBarcode + "起没有足够数量!!!" });
                        return fail;
                    }
                }

            }
        }
        return success;
    }

    /**
     *
     * Describe:售票保存时 操作个人结存明细表
     *
     * @auth:lijingrui
     * @param empid
     *            售票员ID
     * @param salesvoucherdetail
     *            销售凭证明细 return:void Date:2012-8-15
     */
    public boolean addPersonaldetails(Long empid, String[] salesvoucherdetail) {
        try {
            for (int x = 0; x < salesvoucherdetail.length; x++) {
                String isalesvoucherdetail = salesvoucherdetail[x];
                String[] voudeta = isalesvoucherdetail.split("&");
                Long itickettypeid = new Long(voudeta[2]);
                Long amount = new Long(voudeta[3]);
                String bymaketicketway = "00";
                String szticketprintno = "";
                if (voudeta.length > 6) {
                    bymaketicketway = voudeta[6];
                    if (bymaketicketway.equals("01")) {
                        Edmtickettypetab edmtick = (Edmtickettypetab) this.timeSharingDao
                                .get(Edmtickettypetab.class, itickettypeid);
                        // 介质类型为 一维条码 二维条码的 是预制票
                        if (edmtick.getBymediatype().equals("00")
                                || edmtick.getBymediatype().equals("01")) {

                            szticketprintno = voudeta[8];
                            String[] sperialnum = szticketprintno.split("[|]");

                            // 取出票号规则
                            String sql = " from Edmticketnoruletab rule where rule.byisuse=1 and rule.iscenicid="
                                    + edmtick.getIscenicid();
                            List list = timeSharingDao.find(sql);
                            String startserial = null;
                            String endserial = null;
                            Long startnum = null; // 开始票号流水号
                            Long endnum = null;
                            if (list != null && list.size() > 0) {
                                Edmticketnoruletab ticketrule = (Edmticketnoruletab) list
                                        .get(0);

                                // 思路：传过来的票号是有分票段的，可以先获取最小、最大的票号，然后根据最小票号和数量来计算出截止票号
                                // 根据获取到的最大票号计算出的截止票号作对比
                                // 如果相等 那么传过来的票段好是连续的，可以直接删除
                                // 如果不相等，那么循环查询出连续票的段落，一段一段的修改或者删除。
                                if (sperialnum != null && sperialnum.length > 0) {
                                    String onecode = sperialnum[0];
                                    // 或者传过来的截止票号
                                    String endcode = sperialnum[sperialnum.length - 1];
                                    // 计算出截止票号
                                    String detailcode = this
                                            .showJishuanendcode(itickettypeid,
                                                    onecode, amount, empid);
                                    // 作对比 相等
                                    if (endcode.equals(detailcode)) {
                                        startserial = onecode
                                                .substring(
                                                        ticketrule.getIntons2()
                                                                + ticketrule
                                                                .getItickettypecodepos(),
                                                        ticketrule.getIntons2()
                                                                + ticketrule
                                                                .getItickettypecodepos()
                                                                + ticketrule
                                                                .getIserialnolen());
                                        endserial = endcode
                                                .substring(
                                                        ticketrule.getIntons2()
                                                                + ticketrule
                                                                .getItickettypecodepos(),
                                                        ticketrule.getIntons2()
                                                                + ticketrule
                                                                .getItickettypecodepos()
                                                                + ticketrule
                                                                .getIserialnolen());
                                        if (ticketrule.getIntons1() != null
                                                && ticketrule.getIntons1() == 1) {
                                            startnum = Long
                                                    .parseLong(startserial);
                                            endnum = Long.parseLong(endserial);
                                        } else {
                                            startnum = Tools
                                                    .Text36ToConvert(startserial);
                                            endnum = Tools
                                                    .Text36ToConvert(endserial);
                                        }

                                        // 取出个人结存明细列表
                                        String ksql = " from Iompersonalticketdetails where itickettypeid="
                                                + itickettypeid
                                                + " and ireceiverid="
                                                + empid
                                                + " and istartserial<="
                                                + startnum
                                                + " and iendserial>=" + endnum;
                                        List perDetail = timeSharingDao.find(ksql);
                                        if (perDetail != null
                                                && perDetail.size() > 1) {
                                            return true;
                                        } else if (perDetail == null
                                                || perDetail.size() < 1) {

                                            for (int y = 0; y < sperialnum.length; y++) {
                                                String startcode = sperialnum[y];
                                                String oneserial = null;
                                                Long onenum = null;
                                                if (list != null
                                                        && list.size() > 0) {
                                                    oneserial = startcode
                                                            .substring(
                                                                    ticketrule
                                                                            .getIntons2()
                                                                            + ticketrule
                                                                            .getItickettypecodepos(),
                                                                    ticketrule
                                                                            .getIntons2()
                                                                            + ticketrule
                                                                            .getItickettypecodepos()
                                                                            + ticketrule
                                                                            .getIserialnolen());

                                                    if (ticketrule.getIntons1() != null
                                                            && ticketrule
                                                            .getIntons1() == 1) {
                                                        onenum = Long
                                                                .parseLong(oneserial);
                                                    } else {
                                                        onenum = Tools
                                                                .Text36ToConvert(oneserial);
                                                    }

                                                }

                                                // 取出个人结存明细列表
                                                String msql = " from Iompersonalticketdetails where itickettypeid="
                                                        + itickettypeid
                                                        + " and ireceiverid="
                                                        + empid
                                                        + " and istartserial<="
                                                        + onenum
                                                        + " and iendserial>="
                                                        + onenum;
                                                List detalist = timeSharingDao
                                                        .find(msql);
                                                if (detalist != null
                                                        && detalist.size() > 0) {
                                                    boolean b = false; // 循环个人结存明细列表，判断传参进来的起始票号
                                                    for (int i = 0; i < detalist
                                                            .size(); i++) {
                                                        Iompersonalticketdetails details = (Iompersonalticketdetails) detalist
                                                                .get(i);
                                                        if (startcode
                                                                .equals(details
                                                                        .getSzstartticketcode())) { // 个人明细起始票号与参数起始票号做比较
                                                            if (startcode
                                                                    .equals(details
                                                                            .getSzendticketcode())) { // 个人明细截止票号与参数截止票号做比较
                                                                timeSharingDao
                                                                        .delete(details);
                                                                b = true;
                                                                break;
                                                            } else {
                                                                details.setSzstartticketcode(this
                                                                        .showViewendcode(
                                                                                itickettypeid,
                                                                                startcode,
                                                                                2L,
                                                                                empid));
                                                                details.setIstartserial(onenum + 1L);
                                                                details.setIamount(details
                                                                        .getIamount() - 1);
                                                                timeSharingDao
                                                                        .update(details);
                                                                b = true;
                                                                break;
                                                            }
                                                        } else if (startcode
                                                                .equals(details
                                                                        .getSzendticketcode())) { // 个人明细截止票号与参数截止票号做比较
                                                            details.setSzendticketcode(this
                                                                    .showViewendcode(
                                                                            itickettypeid,
                                                                            startcode,
                                                                            0L,
                                                                            empid));
                                                            details.setIendserial(onenum - 1L);
                                                            details.setIamount(details
                                                                    .getIamount() - 1);
                                                            timeSharingDao
                                                                    .update(details);
                                                            b = true;
                                                            break;
                                                        }
                                                        if (!b) {
                                                            Iompersonalticketdetails detail = new Iompersonalticketdetails();
                                                            detail.setSzstartticketcode(this
                                                                    .showViewendcode(
                                                                            itickettypeid,
                                                                            startcode,
                                                                            2L,
                                                                            empid));

                                                            Long maxid = timeSharingDao
                                                                    .getMaxPk(
                                                                            "idetailsid",
                                                                            "Iompersonalticketdetails") + 1L;
                                                            detail.setIdetailsid(maxid);
                                                            detail.setItickettypeid(itickettypeid);
                                                            detail.setIreceiverid(empid);
                                                            detail.setSzendticketcode(details
                                                                    .getSzendticketcode());
                                                            Long serial = onenum;
                                                            detail.setIstartserial(serial + 1L);
                                                            detail.setIendserial(details
                                                                    .getIendserial());
                                                            detail.setIamount(details
                                                                    .getIendserial()
                                                                    - serial);
                                                            timeSharingDao
                                                                    .save(detail);

                                                            details.setSzendticketcode(this
                                                                    .showViewendcode(
                                                                            itickettypeid,
                                                                            startcode,
                                                                            0L,
                                                                            empid));
                                                            Long startial = onenum;
                                                            details.setIendserial(startial - 1L);
                                                            details.setIamount(startial
                                                                    - details
                                                                    .getIstartserial());
                                                            timeSharingDao
                                                                    .update(details);
                                                            break;
                                                        }
                                                    }
                                                }
                                            }

                                        } else {
                                            Iompersonalticketdetails staDetail = (Iompersonalticketdetails) perDetail
                                                    .get(0);
                                            if (onecode.equals(staDetail
                                                    .getSzstartticketcode())) { // 个人明细起始票号与参数起始票号做比较
                                                if (endcode.equals(staDetail
                                                        .getSzendticketcode())) { // 个人明细截止票号与参数截止票号做比较
                                                    timeSharingDao
                                                            .delete(staDetail);
                                                } else {
                                                    staDetail
                                                            .setSzstartticketcode(this
                                                                    .showViewendcode(
                                                                            itickettypeid,
                                                                            endcode,
                                                                            2L,
                                                                            empid));
                                                    staDetail
                                                            .setIstartserial(endnum + 1L);
                                                    staDetail
                                                            .setIamount(staDetail
                                                                    .getIamount()
                                                                    - amount);
                                                    timeSharingDao
                                                            .update(staDetail);
                                                }
                                            } else if (endcode.equals(staDetail
                                                    .getSzendticketcode())) {
                                                staDetail
                                                        .setSzendticketcode(this
                                                                .showViewendcode(
                                                                        itickettypeid,
                                                                        onecode,
                                                                        0L,
                                                                        empid));
                                                Long startial = startnum;
                                                staDetail
                                                        .setIendserial(startial - 1L);
                                                staDetail
                                                        .setIamount(startial
                                                                - staDetail
                                                                .getIstartserial());
                                                timeSharingDao.update(staDetail);
                                            } else {

                                                Iompersonalticketdetails detail = new Iompersonalticketdetails();
                                                detail.setSzstartticketcode(this
                                                        .showViewendcode(
                                                                itickettypeid,
                                                                endcode, 2L,
                                                                empid));
                                                Long maxid = timeSharingDao
                                                        .getMaxPk("idetailsid",
                                                                "Iompersonalticketdetails") + 1L;
                                                detail.setIdetailsid(maxid);
                                                detail.setItickettypeid(itickettypeid);
                                                detail.setIreceiverid(empid);
                                                detail.setSzendticketcode(staDetail
                                                        .getSzendticketcode());
                                                Long serial = endnum;
                                                detail.setIstartserial(serial + 1L);
                                                detail.setIendserial(staDetail
                                                        .getIendserial());
                                                detail.setIamount(staDetail
                                                        .getIendserial()
                                                        - serial);
                                                timeSharingDao.save(detail);

                                                staDetail
                                                        .setSzendticketcode(this
                                                                .showViewendcode(
                                                                        itickettypeid,
                                                                        onecode,
                                                                        0L,
                                                                        empid));
                                                Long startial = startnum;
                                                staDetail
                                                        .setIendserial(startial - 1L);
                                                staDetail
                                                        .setIamount(startial
                                                                - staDetail
                                                                .getIstartserial());
                                                timeSharingDao.update(staDetail);

                                            }

                                            // 短信公告提醒
                                            // 获取售票员手中票的数量与系统参数中设置的数量做对比 不足
                                            // 添加站内公告信息
                                            String ksql1 = "select sum(ps.iamount) as iamount from Iompersonalticketdetails ps where ps.itickettypeid="
                                                    + itickettypeid
                                                    + " and ps.ireceiverid="
                                                    + empid;
                                            List mounList = this.timeSharingDao
                                                    .find(ksql1);
                                            if (mounList != null
                                                    && mounList.size() > 0) {
                                                Long numberount = (Long) mounList
                                                        .get(0);
                                                String sysql1 = "select sys1.pmvb as pmvb from Sysparv5 sys1 where sys1.id.pmky='REMD' and sys1.id.pmcd='0001' ";
                                                List pmvList = this.timeSharingDao
                                                        .find(sysql1);
                                                if (pmvList != null
                                                        && pmvList.size() > 0) {
                                                    Long pmvb = Long
                                                            .parseLong(pmvList
                                                                    .get(0)
                                                                    .toString());
                                                    if (numberount != null
                                                            && pmvb != null
                                                            && numberount < pmvb) {
                                                        Webinfotab webinfo = new Webinfotab();
                                                        Long maxid = this.timeSharingDao
                                                                .getMaxPk(
                                                                        "seq",
                                                                        "Webinfotab");
                                                        webinfo.setSeq(maxid + 1);
                                                        webinfo.setIemployeeid(empid);
                                                        webinfo.setIhadder(empid);
                                                        webinfo.setSzmemo(edmtick
                                                                .getSztickettypename()
                                                                + "剩余数量："
                                                                + numberount);
                                                        webinfo.setReminddate(Tools
                                                                .getDayTimes());
                                                        this.timeSharingDao
                                                                .save(webinfo);
                                                    }

                                                    if (numberount == null
                                                            || numberount
                                                            .equals("")) {

                                                        Webinfotab webinfo = new Webinfotab();
                                                        Long maxid = this.timeSharingDao
                                                                .getMaxPk(
                                                                        "seq",
                                                                        "Webinfotab");
                                                        webinfo.setSeq(maxid + 1);
                                                        webinfo.setIemployeeid(empid);
                                                        webinfo.setIhadder(empid);
                                                        webinfo.setSzmemo(edmtick
                                                                .getSztickettypename()
                                                                + "已售完,请重新领取!");
                                                        webinfo.setReminddate(Tools
                                                                .getDayTimes());
                                                        this.timeSharingDao
                                                                .save(webinfo);

                                                    }
                                                }

                                            } else {
                                                Webinfotab webinfo = new Webinfotab();
                                                Long maxid = this.timeSharingDao
                                                        .getMaxPk("seq",
                                                                "Webinfotab");
                                                webinfo.setSeq(maxid + 1);
                                                webinfo.setIemployeeid(empid);
                                                webinfo.setIhadder(empid);
                                                webinfo.setSzmemo(edmtick
                                                        .getSztickettypename()
                                                        + "已售完,请重新领取!");
                                                webinfo.setReminddate(Tools
                                                        .getDayTimes());
                                                this.timeSharingDao.save(webinfo);
                                            }

                                        }

                                    } else { // 俩截止票号不相等
                                        int bs = 0;
                                        for (int z = 0; z < sperialnum.length; z++) {
                                            String startcode = sperialnum[z];
                                            String endcodes = "";
                                            if (z < sperialnum.length - 1) {
                                                endcodes = sperialnum[z + 1];
                                            }
                                            String twocode = this
                                                    .showJishuanendcode(
                                                            itickettypeid,
                                                            startcode, 2L,
                                                            empid);
                                            if (endcodes.equals(twocode)) {
                                                bs++;
                                                continue;
                                            } else {
                                                String strcode = sperialnum[z
                                                        - bs]; // 开始票号
                                                // 开始流水号
                                                String serial1 = strcode
                                                        .substring(
                                                                ticketrule
                                                                        .getIntons2()
                                                                        + ticketrule
                                                                        .getItickettypecodepos(),
                                                                ticketrule
                                                                        .getIntons2()
                                                                        + ticketrule
                                                                        .getItickettypecodepos()
                                                                        + ticketrule
                                                                        .getIserialnolen());
                                                // 截止流水号
                                                String serial2 = startcode
                                                        .substring(
                                                                ticketrule
                                                                        .getIntons2()
                                                                        + ticketrule
                                                                        .getItickettypecodepos(),
                                                                ticketrule
                                                                        .getIntons2()
                                                                        + ticketrule
                                                                        .getItickettypecodepos()
                                                                        + ticketrule
                                                                        .getIserialnolen());
                                                if (ticketrule.getIntons1() != null
                                                        && ticketrule
                                                        .getIntons1() == 1) {
                                                    startnum = Long
                                                            .parseLong(serial1);
                                                    endnum = Long
                                                            .parseLong(serial2);
                                                } else {
                                                    startnum = Tools
                                                            .Text36ToConvert(serial1);
                                                    endnum = Tools
                                                            .Text36ToConvert(serial2);
                                                }

                                                // 取出个人结存明细列表
                                                String msql = " from Iompersonalticketdetails where itickettypeid="
                                                        + itickettypeid
                                                        + " and ireceiverid="
                                                        + empid
                                                        + " and istartserial<="
                                                        + startnum
                                                        + " and iendserial>="
                                                        + endnum;
                                                List perDetail = timeSharingDao
                                                        .find(msql);
                                                if (perDetail != null
                                                        && perDetail.size() > 1) {
                                                    return true;
                                                } else if (perDetail == null
                                                        || perDetail.size() < 1) {

                                                    for (int v = z - bs; v <= z; v++) {
                                                        String code = sperialnum[v]; // 票号
                                                        Long onenum = null;
                                                        // 开始流水号
                                                        String codeial = code
                                                                .substring(
                                                                        ticketrule
                                                                                .getIntons2()
                                                                                + ticketrule
                                                                                .getItickettypecodepos(),
                                                                        ticketrule
                                                                                .getIntons2()
                                                                                + ticketrule
                                                                                .getItickettypecodepos()
                                                                                + ticketrule
                                                                                .getIserialnolen());
                                                        if (ticketrule
                                                                .getIntons1() != null
                                                                && ticketrule
                                                                .getIntons1() == 1) {
                                                            onenum = Long
                                                                    .parseLong(codeial);
                                                        } else {
                                                            onenum = Tools
                                                                    .Text36ToConvert(codeial);
                                                        }

                                                        // 取出个人结存明细列表
                                                        String vsql = " from Iompersonalticketdetails where itickettypeid="
                                                                + itickettypeid
                                                                + " and ireceiverid="
                                                                + empid
                                                                + " and istartserial<="
                                                                + onenum
                                                                + " and iendserial>="
                                                                + onenum;
                                                        List detalist = timeSharingDao
                                                                .find(vsql);
                                                        if (detalist != null
                                                                && detalist
                                                                .size() > 0) {
                                                            boolean b = false; // 循环个人结存明细列表，判断传参进来的起始票号
                                                            for (int i = 0; i < detalist
                                                                    .size(); i++) {
                                                                Iompersonalticketdetails details = (Iompersonalticketdetails) detalist
                                                                        .get(i);
                                                                if (code.equals(details
                                                                        .getSzstartticketcode())) { // 个人明细起始票号与参数起始票号做比较
                                                                    if (code.equals(details
                                                                            .getSzendticketcode())) { // 个人明细截止票号与参数截止票号做比较
                                                                        timeSharingDao
                                                                                .delete(details);
                                                                        b = true;
                                                                        break;
                                                                    } else {
                                                                        details.setSzstartticketcode(this
                                                                                .showViewendcode(
                                                                                        itickettypeid,
                                                                                        code,
                                                                                        2L,
                                                                                        empid));
                                                                        details.setIstartserial(onenum + 1L);
                                                                        details.setIamount(details
                                                                                .getIamount() - 1);
                                                                        timeSharingDao
                                                                                .update(details);
                                                                        b = true;
                                                                        break;
                                                                    }
                                                                } else if (code
                                                                        .equals(details
                                                                                .getSzendticketcode())) { // 个人明细截止票号与参数截止票号做比较
                                                                    details.setSzendticketcode(this
                                                                            .showViewendcode(
                                                                                    itickettypeid,
                                                                                    code,
                                                                                    0L,
                                                                                    empid));
                                                                    details.setIendserial(onenum - 1L);
                                                                    details.setIamount(details
                                                                            .getIamount() - 1);
                                                                    timeSharingDao
                                                                            .update(details);
                                                                    b = true;
                                                                    break;
                                                                }
                                                                if (!b) {
                                                                    Iompersonalticketdetails detail = new Iompersonalticketdetails();
                                                                    detail.setSzstartticketcode(this
                                                                            .showViewendcode(
                                                                                    itickettypeid,
                                                                                    code,
                                                                                    2L,
                                                                                    empid));

                                                                    Long maxid = timeSharingDao
                                                                            .getMaxPk(
                                                                                    "idetailsid",
                                                                                    "Iompersonalticketdetails") + 1L;
                                                                    detail.setIdetailsid(maxid);
                                                                    detail.setItickettypeid(itickettypeid);
                                                                    detail.setIreceiverid(empid);
                                                                    detail.setSzendticketcode(details
                                                                            .getSzendticketcode());
                                                                    Long serial = onenum;
                                                                    detail.setIstartserial(serial + 1L);
                                                                    detail.setIendserial(details
                                                                            .getIendserial());
                                                                    detail.setIamount(details
                                                                            .getIendserial()
                                                                            - serial);
                                                                    timeSharingDao
                                                                            .save(detail);

                                                                    details.setSzendticketcode(this
                                                                            .showViewendcode(
                                                                                    itickettypeid,
                                                                                    code,
                                                                                    0L,
                                                                                    empid));
                                                                    Long startial = onenum;
                                                                    details.setIendserial(startial - 1L);
                                                                    details.setIamount(startial
                                                                            - details
                                                                            .getIstartserial());
                                                                    timeSharingDao
                                                                            .update(details);
                                                                    break;
                                                                }
                                                            }
                                                        }

                                                    }

                                                } else {
                                                    Iompersonalticketdetails staDetail = (Iompersonalticketdetails) perDetail
                                                            .get(0);
                                                    if (strcode
                                                            .equals(staDetail
                                                                    .getSzstartticketcode())) { // 个人明细起始票号与参数起始票号做比较
                                                        if (startcode
                                                                .equals(staDetail
                                                                        .getSzendticketcode())) { // 个人明细截止票号与参数截止票号做比较
                                                            timeSharingDao
                                                                    .delete(staDetail);
                                                        } else {
                                                            staDetail
                                                                    .setSzstartticketcode(this
                                                                            .showViewendcode(
                                                                                    itickettypeid,
                                                                                    startcode,
                                                                                    2L,
                                                                                    empid));
                                                            staDetail
                                                                    .setIstartserial(endnum + 1L);
                                                            staDetail
                                                                    .setIamount(staDetail
                                                                            .getIamount()
                                                                            - bs
                                                                            - 1);
                                                            timeSharingDao
                                                                    .update(staDetail);
                                                        }
                                                    } else if (startcode
                                                            .equals(staDetail
                                                                    .getSzendticketcode())) {
                                                        staDetail
                                                                .setSzendticketcode(this
                                                                        .showViewendcode(
                                                                                itickettypeid,
                                                                                strcode,
                                                                                0L,
                                                                                empid));
                                                        Long startial = startnum;
                                                        staDetail
                                                                .setIendserial(startial - 1L);
                                                        staDetail
                                                                .setIamount(startial
                                                                        - staDetail
                                                                        .getIstartserial());
                                                        timeSharingDao
                                                                .update(staDetail);
                                                    } else {
                                                        Iompersonalticketdetails detail = new Iompersonalticketdetails();
                                                        detail.setSzstartticketcode(this
                                                                .showViewendcode(
                                                                        itickettypeid,
                                                                        startcode,
                                                                        2L,
                                                                        empid));
                                                        Long maxid = timeSharingDao
                                                                .getMaxPk(
                                                                        "idetailsid",
                                                                        "Iompersonalticketdetails") + 1L;
                                                        detail.setIdetailsid(maxid);
                                                        detail.setItickettypeid(itickettypeid);
                                                        detail.setIreceiverid(empid);
                                                        detail.setSzendticketcode(staDetail
                                                                .getSzendticketcode());
                                                        Long serial = endnum;
                                                        detail.setIstartserial(serial + 1L);
                                                        detail.setIendserial(staDetail
                                                                .getIendserial());
                                                        detail.setIamount(staDetail
                                                                .getIendserial()
                                                                - serial);
                                                        timeSharingDao.save(detail);

                                                        staDetail
                                                                .setSzendticketcode(this
                                                                        .showViewendcode(
                                                                                itickettypeid,
                                                                                strcode,
                                                                                0L,
                                                                                empid));
                                                        Long startial = startnum;
                                                        staDetail
                                                                .setIendserial(startial - 1L);
                                                        staDetail
                                                                .setIamount(startial
                                                                        - staDetail
                                                                        .getIstartserial());
                                                        timeSharingDao
                                                                .update(staDetail);
                                                    }

                                                    // 短信公告提醒
                                                    // 获取售票员手中票的数量与系统参数中设置的数量做对比
                                                    // 不足 添加站内公告信息
                                                    String ksql2 = "select sum(ps.iamount) as iamount from Iompersonalticketdetails ps where ps.itickettypeid="
                                                            + itickettypeid
                                                            + " and ps.ireceiverid="
                                                            + empid;
                                                    List mounList = this.timeSharingDao
                                                            .find(ksql2);
                                                    if (mounList != null
                                                            && mounList.size() > 0) {
                                                        Long numberount = (Long) mounList
                                                                .get(0);
                                                        String sysql2 = "select sys1.pmvb as pmvb from Sysparv5 sys1 where sys1.id.pmky='REMD' and sys1.id.pmcd='0001' ";
                                                        List pmvList = this.timeSharingDao
                                                                .find(sysql2);
                                                        if (pmvList != null
                                                                && pmvList
                                                                .size() > 0) {
                                                            Long pmvb = Long
                                                                    .parseLong(pmvList
                                                                            .get(0)
                                                                            .toString());

                                                            if (numberount != null
                                                                    && pmvb != null
                                                                    && numberount < pmvb) {
                                                                Webinfotab webinfo = new Webinfotab();
                                                                Long maxid = this.timeSharingDao
                                                                        .getMaxPk(
                                                                                "seq",
                                                                                "Webinfotab");
                                                                webinfo.setSeq(maxid + 1);
                                                                webinfo.setIemployeeid(empid);
                                                                webinfo.setIhadder(empid);
                                                                webinfo.setSzmemo(edmtick
                                                                        .getSztickettypename()
                                                                        + "剩余数量："
                                                                        + numberount);
                                                                webinfo.setReminddate(Tools
                                                                        .getDayTimes());
                                                                this.timeSharingDao
                                                                        .save(webinfo);
                                                            }

                                                            if (numberount == null
                                                                    || numberount
                                                                    .equals("")) {
                                                                Webinfotab webinfo = new Webinfotab();
                                                                Long maxid = this.timeSharingDao
                                                                        .getMaxPk(
                                                                                "seq",
                                                                                "Webinfotab");
                                                                webinfo.setSeq(maxid + 1);
                                                                webinfo.setIemployeeid(empid);
                                                                webinfo.setIhadder(empid);
                                                                webinfo.setSzmemo(edmtick
                                                                        .getSztickettypename()
                                                                        + "已售完,请重新领取!");
                                                                webinfo.setReminddate(Tools
                                                                        .getDayTimes());
                                                                this.timeSharingDao
                                                                        .save(webinfo);
                                                            }

                                                        }

                                                    } else {
                                                        Webinfotab webinfo = new Webinfotab();
                                                        Long maxid = this.timeSharingDao
                                                                .getMaxPk(
                                                                        "seq",
                                                                        "Webinfotab");
                                                        webinfo.setSeq(maxid + 1);
                                                        webinfo.setIemployeeid(empid);
                                                        webinfo.setIhadder(empid);
                                                        webinfo.setSzmemo(edmtick
                                                                .getSztickettypename()
                                                                + "已售完,请重新领取!");
                                                        webinfo.setReminddate(Tools
                                                                .getDayTimes());
                                                        this.timeSharingDao
                                                                .save(webinfo);
                                                    }
                                                }

                                                bs = 0;
                                            }

                                        }

                                    }

                                }
                            }

                        } else {// IC卡

                            Hotelprovider provider = (Hotelprovider) this.timeSharingDao
                                    .get(Hotelprovider.class,
                                            edmtick.getIscenicid());
                            if (provider != null
                                    && provider.getInoteger5() == 1) {
                                String hsql = " from Kcpersonalticketdetailstab person where person.ireceiverid="
                                        + empid
                                        + " and person.itickettypeid="
                                        + itickettypeid;
                                Kcpersonalticketdetailstab kcperson = (Kcpersonalticketdetailstab) this.timeSharingDao
                                        .find(hsql).get(0);
                                Long mount = kcperson.getIamount() - amount;
                                if (mount > 0) {
                                    kcperson.setIamount(mount);
                                    this.timeSharingDao.update(kcperson);

                                    // 短信公告提醒
                                    // 获取售票员手中票的数量与系统参数中设置的数量做对比 不足 添加站内公告信息
                                    String sysql3 = "select sys1.pmvb as pmvb from Sysparv5 sys1 where sys1.id.pmky='REMD' and sys1.id.pmcd='0002' ";
                                    List pmvList = this.timeSharingDao.find(sysql3);
                                    if (pmvList != null && pmvList.size() > 0) {
                                        Long pmvb = Long.parseLong(pmvList.get(
                                                0).toString());

                                        if (mount < pmvb) {
                                            Webinfotab webinfo = new Webinfotab();
                                            Long maxid = this.timeSharingDao
                                                    .getMaxPk("seq",
                                                            "Webinfotab");
                                            webinfo.setSeq(maxid + 1);
                                            webinfo.setIemployeeid(empid);
                                            webinfo.setIhadder(empid);
                                            webinfo.setSzmemo(edmtick
                                                    .getSztickettypename()
                                                    + "剩余数量：" + mount);
                                            webinfo.setReminddate(Tools
                                                    .getDayTimes());
                                            this.timeSharingDao.save(webinfo);
                                        }
                                    }

                                } else if (mount == 0) {
                                    this.timeSharingDao.delete(kcperson);

                                    Webinfotab webinfo = new Webinfotab();
                                    Long maxid = this.timeSharingDao.getMaxPk(
                                            "seq", "Webinfotab");
                                    webinfo.setSeq(maxid + 1);
                                    webinfo.setIemployeeid(empid);
                                    webinfo.setIhadder(empid);
                                    webinfo.setSzmemo(edmtick
                                            .getSztickettypename()
                                            + "已售完,请重新领取!");
                                    webinfo.setReminddate(Tools.getDayTimes());
                                    this.timeSharingDao.save(webinfo);

                                }

                            }

                        }

                    }

                }

            }
        } catch (Exception e1) {
            LOGGER.info(""+StringUtil.toString_02(e1));
        }
        return false;
    }

    public List ticketreprintbylb(String cdcs, String cdz, Long iscenicid,String param) {

        List<Map> list = null;
		try {
			LOGGER.info("开始查询票重打印信息");
			list = findOderId(cdcs, cdz, iscenicid);
			if(list.size() == 0){
				String hql = "select a.szsalesvoucherno as szsalesvoucherno from Stssalesvouchertab a,Stssoldtickettab b where b.myzj = '"+param+"' and b.isalesvoucherid = a.isalesvoucherid order by a.szsalesvoucherno desc";
				List find = this.timeSharingService.findBySqlToMap(hql, new Object[]{});
				if(find != null && find.size()>0){
					
					list = findOderId(cdcs, ((Map)find.get(0)).get("SZSALESVOUCHERNO").toString(), iscenicid);
				}
			}
			Esbscenicareatab esbscenicareatab = (Esbscenicareatab) this.timeSharingDao
			        .get(Esbscenicareatab.class, iscenicid);

			Map map2 = list.get(0);
			String msql = "select nvl(count(*),0) as numb,s.iticketstationid as iticketstationid,esb.szstationcode as szstationcode from Stssalesvouchertab s,Esbticketstationtab esb where s.iticketstationid=esb.iticketstationid and s.bysalesvouchertype = '01' and substr(s.dtmakedate, 1, 10) = '"
			        + Tools.getDays()
			        + "' and s.iticketstationid="
			        + map2.get("ITICKETSTATIONID").toString()
			        + " and s.isalesvoucherid<="
			        + map2.get("ISALESVOUCHERID").toString()
			        + " group by s.iticketstationid ,esb.szstationcode ";
			StringBuffer tationcode = new StringBuffer();
			List<Map> tationList = new ArrayList();
			tationList = timeSharingDao.findBySqlToMap(msql);
			if (tationList != null && tationList.size() > 0) {
			    Map map1 = tationList.get(0);
			    tationcode.append(map1.get("SZSTATIONCODE").toString() + "-"
			            + map1.get("NUMB").toString());
			}
			Sysparv5 v5 = sysService.findOne("ZDCD", "01");
			for (Map map : list) {
			    String zdail = "";
			    String iztickettypeid = "";
			    String products = "";
			    String isvalid = "1";
			    if (esbscenicareatab.getScenictype().equals("01")) {
			        Sysparv5 sv5 = sysService.findOne("OFCK", "****");
			        if (sv5 != null && sv5.getPmva().equals("true")) {
			            zdail = zdail + map.get("SZTICKETTYPENAME").toString()
			                    + "&" + "0" + "&" + "" + "&"
			                    + map.get("DTSTARTDATE").toString() + "&"
			                    + map.get("DTENDDATE").toString() + "@";
			            products = products + map.get("ITICKETTYPEID").toString();
			        } else {
			            Long isalesvoucherdetailsid = new Long(map.get(
			                    "ISALESVOUCHERDETAILSID").toString());
			            String sql1 = " select sts.iztickettypeid,sts.tripid,sts.dtbegindate as dtstartdate,sts.dtenddate as dtenddate,edt.sztickettypename,t.tripname,sds.msplitprice from Stssoldticketsubtab sts left outer join trip t on t.tripid=sts.tripid,Edmtickettypetab edt,Stscomticketsalesdetailstab sds where sts.isalesvoucherid="
			                    + map.get("ISALESVOUCHERID").toString()
			                    + " and sts.isalesvoucherdetailsid="
			                    + map.get("ISALESVOUCHERDETAILSID").toString()
			                    + " and sts.iticketstationid="
			                    + map.get("ITICKETSTATIONID").toString()
			                    + " and sts.szsoldticketid="
			                    + map.get("SZSOLDTICKETID").toString()
			                    + " and sts.iztickettypeid=edt.itickettypeid and sts.isvalid=1 and sts.isalesvoucherid=sds.isalesvoucherid and sts.iticketstationid=sds.iticketstationid and sts.isalesvoucherdetailsid=sds.isalesvoucherdetailsid  and sts.iztickettypeid=sds.iztickettypeid";
			            List<Map> list1 = new ArrayList();
			            list1 = timeSharingService.findBySqlToMap(sql1);
			            for (Map map1 : list1) {
			                String szname = map1.get("SZTICKETTYPENAME").toString()
			                        + map1.get("MSPLITPRICE").toString() + "元";
			                try {
			                    if (v5 == null) {

			                        szname = map1.get("SZTICKETTYPENAME")
			                                .toString()
			                                + map1.get("MSPLITPRICE").toString()
			                                + "元";
			                    } else {

			                        int cdnumb = Integer.parseInt(v5.getPmva());
			                        if (cdnumb < 1) {
			                            szname = map1.get("SZTICKETTYPENAME")
			                                    .toString()
			                                    + map1.get("MSPLITPRICE")
			                                    .toString() + "元";
			                        } else {
			                            if (map1.get("SZTICKETTYPENAME").toString()
			                                    .length() > cdnumb) {

			                                szname = map1.get("SZTICKETTYPENAME")
			                                        .toString()
			                                        .substring(0, cdnumb)
			                                        + map1.get("MSPLITPRICE")
			                                        .toString() + "元";
			                            } else {
			                                szname = map1.get("SZTICKETTYPENAME")
			                                        .toString()
			                                        + map1.get("MSPLITPRICE")
			                                        .toString() + "元";
			                            }
			                        }
			                    }
			                } catch (Exception e) {
			                    e.printStackTrace();
			                }
			                if (!iztickettypeid.equals(map1.get("IZTICKETTYPEID")
			                        .toString())) {
			                    if (new Long(map1.get("TRIPID").toString()) > 0) {
			                        String sql3 = "select  vn.venueidname,vp.szprogramname,vs.szvenueseatsname,va.ivenueareaname from seatsaletab s ,venue vn,Venueprogram vp,Venueseats vs,Venuearea va where s.isalesvoucherid="
			                                + map.get("ISALESVOUCHERID").toString()
			                                + " and s.iticketstationid="
			                                + map.get("ITICKETSTATIONID")
			                                .toString()
			                                + "  and s.szsoldticketid="
			                                + map.get("SZSOLDTICKETID").toString()
			                                + " and isalesvoucherdetailsid="
			                                + map.get("ISALESVOUCHERDETAILSID")
			                                .toString()
			                                + " and vn.ivenueid=s.ivenueid and va.ivenueareaid=s.ivenueareaid and va.ivenueid=s.ivenueid and s.iprogramid=vp.iprogramid  and vs.ivenueid=s.ivenueid and vs.ivenueseatsid=s.iseatid and s.isvalid=1 ";
			                        List<Map> list3 = new ArrayList();
			                        Map map3 = null;
			                        try {
			                            System.out.println(sql1);
			                            list3 = timeSharingDao.findBySqlToMap(sql3);
			                            if (list3 != null && list3.size() > 0) {
			                                map3 = (Map) list3.get(0);
			                                zdail = zdail
			                                        + szname
			                                        + "&"
			                                        + map1.get("TRIPID").toString()
			                                        + "&"
			                                        + map1.get("TRIPNAME")
			                                        .toString()
			                                        + "&"
			                                        + map1.get("DTSTARTDATE")
			                                        .toString()
			                                        + "&"
			                                        + map1.get("DTENDDATE")
			                                        .toString()
			                                        + "&"
			                                        + map3.get("SZPROGRAMNAME")
			                                        .toString()
			                                        + "&"
			                                        + map3.get("VENUEIDNAME")
			                                        .toString()
			                                        + "&"
			                                        + map3.get("IVENUEAREANAME")
			                                        .toString()
			                                        + map3.get("SZVENUESEATSNAME")
			                                        .toString() + "@";
			                            } else {
			                                zdail = zdail
			                                        + szname
			                                        + "&"
			                                        + map1.get("TRIPID").toString()
			                                        + "&"
			                                        + map1.get("TRIPNAME")
			                                        .toString()
			                                        + "&"
			                                        + map1.get("DTSTARTDATE")
			                                        .toString()
			                                        + "&"
			                                        + map1.get("DTENDDATE")
			                                        .toString() + "@";
			                            }

			                        } catch (Exception e) {
			                            // TODO Auto-generated catch block
			                            e.printStackTrace();
			                        }

			                    } else {
			                        zdail = zdail + szname + "&" + "0" + "&" + ""
			                                + "&"
			                                + map1.get("DTSTARTDATE").toString()
			                                + "&"
			                                + map1.get("DTENDDATE").toString()
			                                + "@";
			                    }
			                    iztickettypeid = map1.get("IZTICKETTYPEID")
			                            .toString();
			                    products = products
			                            + map1.get("IZTICKETTYPEID").toString()
			                            + ":";
			                }
			            }
			            if (!zdail.equals("")) {
			                zdail = zdail.substring(0, zdail.length() - 1);

			            } else {
			                isvalid = "0";
			            }
			            if (!products.equals("")) {
			                products = products.substring(0, products.length() - 1);
			            }
			        }
			    } else {
			        zdail = zdail + map.get("SZTICKETTYPENAME").toString() + "&"
			                + "0" + "&" + "" + "&"
			                + map.get("DTSTARTDATE").toString() + "&"
			                + map.get("DTENDDATE").toString() + "@";
			        products = products + map.get("ITICKETTYPEID").toString();
			    }
			    map.put("PRODUCTS", products);
			    map.put("ZDAIL", zdail);
			    map.put("ISVALID", isvalid);

			    map.put("TATIONCODE", tationcode);
			    //修改票号信息，加上自定义数据
			    Long ticketId = Long.parseLong(map.get("ITICKETTYPEID").toString());
			    String szticketprintno = map.get("SZTICKETPRINTNO").toString();
			    Edmtickettypetab ticket = (Edmtickettypetab) timeSharingDao.get(Edmtickettypetab.class,ticketId);
			    String orid = map.get("SZSALESVOUCHERNO").toString();
			    Hotelprovider hp = (Hotelprovider) timeSharingDao.get(Hotelprovider.class,ticket.getIscenicid());
			    szticketprintno = changeSzprintNo(szticketprintno,orid,map.get("USID").toString(),ticket);
			    map.put("SZTICKETPRINTNO",szticketprintno);
			}
		}catch (Exception e) {
			LOGGER.info("查询票重打印信息异常："+StringUtil.toString_02(e));
		}
		LOGGER.info("完成查询票重打印信息");
        return list;
    }

	private List<Map> findOderId(String cdcs, String cdz, Long iscenicid) {
		String sql = "";
        if (cdcs.equals("02")) {
            // 票号
            sql = "select s.usid,e.szsoldticketid,e.isalesvoucherdetailsid,e.isalesvoucherid,e.iticketstationid,e.itickettypeid,szticketprintno,e.iserialnum,e.icrowdkindid,e.dtstartdate,e.dtenddate,e.iplayerperticket,ed.szcrowdkindname,edt.sztickettypename||'('||ed.szcrowdkindname||')' as sztickettypename,ebs.szbusinessname,e.mactualsaleprice,s.szsalesvoucherno,e.manyouno,e.myzj,edt.bymaketicketway,v5.pmva as strmaketype,edt.bymediatype,v51.pmva as strmediatype,e.name1,e.zjno1,sd.icrowdkindpriceid as icrowdkindpriceid,ep.ipeoplenumrange as ipeoplenumrange,c.corpname as corpname,s.dtmakedate,dy.lname as ornm,su.szinnername as szregionalname ,ep.listingprice as listingprice,ef.szemployeename as szemployeename ,es.szstationname as szstationname,ep.inote1 as inote1 from Stssoldtickettab e,Edpcrowdkindtab ed,Edmtickettypetab edt,Edmbusinesstab ebs,Stssalesvouchertab s left outer join custom dy on dy.usid=s.dyusid left outer join Galsourceregiontab su on su.iregionalid=s.iregionalid,Sysparv5 v5,Edmcrowdkindpricetab ep,stssalesvoucherdetailstab sd,Custom c,Sysparv5 v51,Esfemployeetab ef,Esbticketstationtab es where e.szticketprintno='"
                    + cdz
                    + "'  and e.iscenicid="
                    + iscenicid
                    + "  and e.isalesvoucherid=s.isalesvoucherid and e.iticketstationid=s.iticketstationid  and ed.icrowdkindid=e.icrowdkindid and edt.itickettypeid=e.itickettypeid and ebs.ibusinessid=e.ibusinessid and edt.bymaketicketway=v5.pmcd and v5.pmky='CPFS' and edt.bymediatype=v51.pmcd and v51.pmky='CKFS' and sd.isalesvoucherdetailsid=e.isalesvoucherdetailsid and sd.isalesvoucherid=e.isalesvoucherid and sd.iticketstationid=e.iticketstationid and sd.icrowdkindpriceid=ep.icrowdkindpriceid and c.usid=s.usid and ef.iemployeeid=s.ihandler and es.iticketstationid=s.iticketstationid order by e.byvalidity,e.dtmakedate desc,e.iserialnum";

        } else if (cdcs.equals("03")) {

            // 订单号
            sql = " select s.usid,e.szsoldticketid,e.isalesvoucherdetailsid,e.isalesvoucherid,e.iticketstationid,e.itickettypeid,szticketprintno,e.iserialnum,e.icrowdkindid,e.dtstartdate,e.dtenddate,e.iplayerperticket,ed.szcrowdkindname,edt.sztickettypename||'('||ed.szcrowdkindname||')' as sztickettypename,ebs.szbusinessname,e.mactualsaleprice,s.szsalesvoucherno,e.manyouno,e.myzj,edt.bymaketicketway,v5.pmva as strmaketype,edt.bymediatype,v51.pmva as strmediatype,e.name1,e.zjno1,sd.icrowdkindpriceid as icrowdkindpriceid,ep.ipeoplenumrange as ipeoplenumrange,c.corpname as corpname,dy.lname as ornm,su.szinnername as szregionalname,ep.listingprice as listingprice,ef.szemployeename as szemployeename ,es.szstationname as szstationname,ep.inote1 as inote1 from Stssoldtickettab e,Edpcrowdkindtab ed,Edmtickettypetab edt,Edmbusinesstab ebs,Stssalesvouchertab s left outer join custom dy on dy.usid=s.dyusid left outer join Galsourceregiontab su on su.iregionalid=s.iregionalid,Sysparv5 v5,Edmcrowdkindpricetab ep,stssalesvoucherdetailstab sd,Custom c,Sysparv5 v51,Esfemployeetab ef,Esbticketstationtab es where s.szsalesvoucherno='"
                    + cdz
                    + "'  and s.iscenicid="
                    + iscenicid
                    + "  and e.isalesvoucherid=s.isalesvoucherid and e.iticketstationid=s.iticketstationid  and ed.icrowdkindid=e.icrowdkindid and edt.itickettypeid=e.itickettypeid and ebs.ibusinessid=e.ibusinessid and edt.bymaketicketway=v5.pmcd and v5.pmky='CPFS' and edt.bymediatype=v51.pmcd and v51.pmky='CKFS' and sd.isalesvoucherdetailsid=e.isalesvoucherdetailsid and sd.isalesvoucherid=e.isalesvoucherid and sd.iticketstationid=e.iticketstationid and sd.icrowdkindpriceid=ep.icrowdkindpriceid and c.usid=s.usid and ef.iemployeeid=s.ihandler and es.iticketstationid=s.iticketstationid  order by e.dtmakedate desc,e.iserialnum ";

        } else if (cdcs.equals("04")) {

            // 年卡证件号
            sql = " select s.usid,e.szsoldticketid,e.isalesvoucherdetailsid,e.isalesvoucherid,e.iticketstationid,e.itickettypeid,szticketprintno,e.iserialnum,e.icrowdkindid,e.dtstartdate,e.dtenddate,e.iplayerperticket,ed.szcrowdkindname,edt.sztickettypename||'('||ed.szcrowdkindname||')' as sztickettypename,ebs.szbusinessname,e.mactualsaleprice,s.szsalesvoucherno,e.manyouno,e.myzj,edt.bymaketicketway,v5.pmva as strmaketype,edt.bymediatype,v51.pmva as strmediatype,e.name1,e.zjno1,sd.icrowdkindpriceid as icrowdkindpriceid,ep.ipeoplenumrange as ipeoplenumrange,c.corpname as corpname,dy.lname as ornm,su.szinnername as szregionalname,ep.listingprice as listingprice,ef.szemployeename as szemployeename ,es.szstationname as szstationname,ep.inote1 as inote1 from Stssoldtickettab e,Edpcrowdkindtab ed,Edmtickettypetab edt,Edmbusinesstab ebs,Stssalesvouchertab s left outer join custom dy on dy.usid=s.dyusid left outer join Galsourceregiontab su on su.iregionalid=s.iregionalid,Sysparv5 v5,Edmcrowdkindpricetab ep,stssalesvoucherdetailstab sd,Custom c,Sysparv5 v51,Esfemployeetab ef,Esbticketstationtab es where e.myzj='"
                    + cdz
                    + "'  and e.iscenicid="
                    + iscenicid
                    + "  and e.isalesvoucherid=s.isalesvoucherid and e.iticketstationid=s.iticketstationid  and ed.icrowdkindid=e.icrowdkindid and edt.itickettypeid=e.itickettypeid and ebs.ibusinessid=e.ibusinessid and edt.bymaketicketway=v5.pmcd and v5.pmky='CPFS' and edt.bymediatype=v51.pmcd and v51.pmky='CKFS' and sd.isalesvoucherdetailsid=e.isalesvoucherdetailsid and sd.isalesvoucherid=e.isalesvoucherid and sd.iticketstationid=e.iticketstationid and sd.icrowdkindpriceid=ep.icrowdkindpriceid and c.usid=s.usid and ef.iemployeeid=s.ihandler and es.iticketstationid=s.iticketstationid order by e.dtmakedate desc,e.iserialnum";

        } else if (cdcs.equals("05")) {

            // 年卡号
            sql = " select s.usid,e.szsoldticketid,e.isalesvoucherdetailsid,e.isalesvoucherid,e.iticketstationid,e.itickettypeid,szticketprintno,e.iserialnum,e.icrowdkindid,e.dtstartdate,e.dtenddate,e.iplayerperticket,ed.szcrowdkindname,edt.sztickettypename||'('||ed.szcrowdkindname||')' as sztickettypename,ebs.szbusinessname,e.mactualsaleprice,s.szsalesvoucherno,e.manyouno,e.myzj,edt.bymaketicketway,v5.pmva as strmaketype,edt.bymediatype,v51.pmva as strmediatype,e.name1,e.zjno1,sd.icrowdkindpriceid as icrowdkindpriceid,ep.ipeoplenumrange as ipeoplenumrange,c.corpname as corpname,dy.lname as ornm,su.szinnername as szregionalname,ep.listingprice as listingprice,ef.szemployeename as szemployeename ,es.szstationname as szstationname,ep.inote1 as inote1 from Stssoldtickettab e,Edpcrowdkindtab ed,Edmtickettypetab edt,Edmbusinesstab ebs,Stssalesvouchertab s left outer join custom dy on dy.usid=s.dyusid left outer join Galsourceregiontab su on su.iregionalid=s.iregionalid,Sysparv5 v5,Edmcrowdkindpricetab ep,stssalesvoucherdetailstab sd,Custom c,Sysparv5 v51,Esfemployeetab ef,Esbticketstationtab es where e.manyouno='"
                    + cdz
                    + "'  and e.iscenicid="
                    + iscenicid
                    + "  and e.isalesvoucherid=s.isalesvoucherid and e.iticketstationid=s.iticketstationid  and ed.icrowdkindid=e.icrowdkindid and edt.itickettypeid=e.itickettypeid and ebs.ibusinessid=e.ibusinessid and edt.bymaketicketway=v5.pmcd and v5.pmky='CPFS' and edt.bymediatype=v51.pmcd and v51.pmky='CKFS' and sd.isalesvoucherdetailsid=e.isalesvoucherdetailsid and sd.isalesvoucherid=e.isalesvoucherid and sd.iticketstationid=e.iticketstationid and sd.icrowdkindpriceid=ep.icrowdkindpriceid and c.usid=s.usid and ef.iemployeeid=s.ihandler and es.iticketstationid=s.iticketstationid order by e.dtmakedate desc,e.iserialnum";

        }

        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMap(sql);
            
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
		return list;
	}

    // 网上出票身份证绑定
    public List realNameTicketBound(List cdetaillist,
                                    Stssalesvoucherdetailstab sd, String szsalesvoucherno,
                                    Long ibusinessid) {
        List realnames = timeSharingDao.find(" from TRealname where orid='"
                + szsalesvoucherno + "'");
        if (realnames == null || realnames.size() < 1) {
            return cdetaillist;
        } else {

            for (int i = 0; i < cdetaillist.size(); i++) {
                Stssoldtickettab st = (Stssoldtickettab) cdetaillist.get(i);

                for (int j = 0; j < realnames.size(); j++) {
                    TRealname rn = (TRealname) realnames.get(j);
                    if (rn.getItickettypeid().intValue() == st
                            .getItickettypeid().intValue()
                            && st.getIcrowdkindid().intValue() == rn
                            .getIcrowdkindid().intValue()) {
                        st.setDyusid("daoyou");
                        st.setMyzj(rn.getIdcard());
                        realnames.remove(j);
                        break;
                    }
                }
            }
        }
        return cdetaillist;
    }

    // 凭证表
    public Stssalesvouchertab saveStssalesvouchertab(String salesvouchers,
                                                     Long maxid, String szsalesvoucherno, Stssalesvouchertab s) {
        String[] salesvoucher = salesvouchers.split("&");
        Long iscenicid = new Long(salesvoucher[0]);
        Long iticketwinid = new Long(salesvoucher[1]);
        Long ibusinessid = new Long(salesvoucher[2]);
        Long iemployeeid = new Long(salesvoucher[3]);// 出票员
        Double iaccountreceivable = new Double(salesvoucher[5]);
        Double iacceptmoney = new Double(salesvoucher[4]);
        Double igivechange = new Double(salesvoucher[6]);
        String usid = salesvoucher[7];
        Long forceemid = new Long(salesvoucher[8]);
        String pzlb = salesvoucher[9];// 默认 ０１ 销售 ０４ 补入

        s.setIscenicid(iscenicid);
        s.setIticketwinid(iticketwinid);
        s.setIbusinessid(ibusinessid);
        s.setIhandler(iemployeeid);
        s.setIpayeer(iemployeeid);
        s.setImaker(forceemid);
        s.setIauditor(iemployeeid);
        s.setIaccountreceivable(iaccountreceivable);
        s.setIacceptmoney(iacceptmoney);
        s.setIgivechange(igivechange);

        String today = Tools.getDays();
        String daytime = Tools.getDayTimes();
        s.setIyear(new Long(today.substring(0, 4)));
        s.setImonth(new Long(today.substring(5, 7)));
        s.setIday(new Long(today.substring(8, 10)));
        s.setDtmakedate(daytime);
        s.setDtauditdate(today);
        s.setUsid(usid);
        if (salesvoucher.length >= 12) {
            if (salesvoucher[11].equals("")) {
                s.setDyusid("daoyou");
            } else {
                s.setDyusid(salesvoucher[11]);
            }
        } else {
            s.setDyusid("daoyou");
        }
        if (salesvoucher.length >= 13) {
            if (salesvoucher[12].equals("")) {
                s.setIregionalid(new Long(1));
            } else {
                s.setIregionalid(new Long(salesvoucher[12]));
            }
        } else {
            s.setIregionalid(new Long(1));
        }

        s.setBisintegral(new Long(0));
        s.setByprintinvoice(new Long(0));
        s.setBysplitway(new Long(2));
        s.setBisreturn(new Long(1));
        s.setBysalesvouchertype(pzlb);
        s.setBypostrecord(new Long(0));
        s.setBysalesvoucherstate(new Long(1));
        s.setBispay(new Long(0));
        s.setBispayee(new Long(0));
        Esbticketwintab e = (Esbticketwintab) timeSharingDao.get(
                Esbticketwintab.class, s.getIticketwinid());
        StssalesvouchertabId id = new StssalesvouchertabId();
        id.setIticketstationid(e.getIticketstationid());
        id.setIsalesvoucherid(maxid);
        s.setId(id);
        s.setSzsalesvoucherno(szsalesvoucherno);
        return s;
    }

    // 结算凭证表
    public Stssalessettlementtab saveStssalessettlementtab(
            Stssalesvouchertab s, String zffs) {
        Stssalessettlementtab st = new Stssalessettlementtab();
        StssalessettlementtabId sid = new StssalessettlementtabId();
        sid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
        sid.setIticketstationid(s.getId().getIticketstationid());
        sid.setIsalessettlementid(new Long(1));
        st.setId(sid);
        st.setSettlementdata(s.getDtauditdate());
        st.setSettlementtime(Tools.getDayTimes().substring(11));
        st.setIsettlementid(zffs);
        st.setMsettlementmoney(s.getIacceptmoney());
        st.setIversion(new Long(1));
        st.setDtmakedate(Tools.getDayTimes());
        return st;
    }

    // 凭证明细表,按票保存
    public Stssalesvoucherdetailstab saveStssalesvoucherdetailstab(
            Stssalesvouchertab s, String isalesvoucherdetail,
            String szticketprintno) {
        String[] detail = isalesvoucherdetail.split("&");
        Long itickettypeid = new Long(detail[2]);
        long isalesvoucherdetailsid = new Long(detail[0]);
        Long icrowdkindpriceid = new Long(detail[1]);
        Long iticketnum = new Long(detail[3]);
        String dtstartdate = detail[4];
        String dtenddate = detail[5];
        Double mactualsaleprice = 0D;
        Debug.println("szticketprintno" + szticketprintno);
        String[] sperialnum = szticketprintno.split("[|]");
        Long timeId = 0L;
        if(detail.length >= 15) {
        	timeId = Long.parseLong(detail[14]);
        }
        Edmcrowdkindpricetab edmcrowdkindpricetab = (Edmcrowdkindpricetab) timeSharingDao
                .get(Edmcrowdkindpricetab.class, icrowdkindpriceid);

        // 2014-06-28 lijingrui修改 是否允许自定义价格
        Edmticketproduct tp = (Edmticketproduct) this.timeSharingDao.get(
                Edmticketproduct.class, itickettypeid);
        if (tp != null) {
            if (tp.getInoteger4() != null && tp.getInoteger4() != 0) {
                if (detail[13] != null && !detail[13].equals("")) {
                    mactualsaleprice = Double
                            .parseDouble(detail[13].toString());
                } else {
                    mactualsaleprice = edmcrowdkindpricetab
                            .getMactualsaleprice();
                }
            } else {
                mactualsaleprice = edmcrowdkindpricetab.getMactualsaleprice();
            }
        } else {
            mactualsaleprice = edmcrowdkindpricetab.getMactualsaleprice();
        }

        Double meventmoney = new Double(mactualsaleprice.doubleValue()
                * iticketnum.doubleValue());

        Stssalesvoucherdetailstab sd = new Stssalesvoucherdetailstab();
        StssalesvoucherdetailstabId sdid = new StssalesvoucherdetailstabId();
        sdid.setIsalesvoucherdetailsid(isalesvoucherdetailsid);
        sdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
        sdid.setIticketstationid(s.getId().getIticketstationid());
        sd.setId(sdid);
        sd.setIticketwinid(s.getIticketwinid());
        sd.setIcrowdkindpriceid(icrowdkindpriceid);
        sd.setItickettypeid(itickettypeid);
        sd.setIplayerperticket(new Long(1));// 人/张
        sd.setIticketnum(new Long(1));// 张数
        sd.setIticketplayer(new Long(1));// 人次
        sd.setDtstartdate(dtstartdate);
        sd.setDtenddate(dtenddate);
        sd.setTimeId(timeId);
        if (edmcrowdkindpricetab.getInote2() != null
                && edmcrowdkindpricetab.getInote2() == 1) {
            if (Tools.getDayNumb(dtenddate, edmcrowdkindpricetab.getEnddata()) < 1) {

                sd.setDtenddate(edmcrowdkindpricetab.getEnddata());
            }
        }
        sd.setIstartid(new Long(0));
        sd.setIendid(new Long(0));
        // 李进修改2012-08-29

        if (sperialnum == null) {
            Debug.println("sperialnum[0]" + sperialnum[0]);
            Debug.println("00000000000");
            sd.setSzstartserial("0");
            sd.setSzendserial("0");
        } else {

            if (sperialnum[0] == null || sperialnum[0].equals("")) {
                sd.setSzstartserial("0");
                sd.setSzendserial("0");
            } else {
                sd.setSzstartserial(sperialnum.length > 0 ? (sperialnum[0] == null ? "0"
                        : sperialnum[0])
                        : "0");
                sd.setSzendserial(sperialnum.length > 0 ? (sperialnum[sperialnum.length - 1] == null ? "0"
                        : sperialnum[sperialnum.length - 1])
                        : "0");
            }
        }

        sd.setIoffersschemeid(new Long(0));
        sd.setIamount(iticketnum);
        sd.setIpresentnums(new Long(0));// 退订数量
        sd.setIderatenums(new Long(0));
        sd.setIfactnum(new Long(0));
        sd.setIuseablenessnum(iticketnum);// 使用数量
        sd.setMactualsaleprice(mactualsaleprice);// 实际售价
        sd.setMeventmoney(meventmoney);// 实际发生金额
        sd.setMderatemoney(new Double(0));// 减免金额
        sd.setMpresentmoney(new Double(0));// 退订金额
        sd.setMnominalfee(new Double(0));// 工本费
        sd.setMdeposit(new Double(0));
        sd.setMhandcharge(new Double(0));
        sd.setByconsumetype("00");
        sd.setIconsumenum(new Double(0));
        sd.setMtotalamount(meventmoney);
        sd.setItotalnumber(iticketnum);// 总次数
        List edlist = timeSharingDao
                .find(" from Edpofferschemetab where itickettypeid="
                        + edmcrowdkindpricetab.getItickettypeid()
                        + " and ibusinessid="
                        + edmcrowdkindpricetab.getIbusinessid()
                        + " and icrowdkindid="
                        + edmcrowdkindpricetab.getIcrowdkindid()
                        + " and startdata<='" + dtstartdate
                        + "' and enddata>='" + dtstartdate + "' and byisuse=1");
        // 根据价格里面的业务，人群 ，产品 查询 对应的 事前人数优惠
        if (edlist != null && edlist.size() > 0) {
            Edpofferschemetab edsc = (Edpofferschemetab) edlist.get(0);
            if (iticketnum >= edsc.getImultiples()) {
                sd.setIoffersschemeid(edsc.getIoffersschemeid());
                sd.setIderatenums((iticketnum / edsc.getImultiples())
                        * edsc.getIoffernum());
                sd.setMderatemoney(sd.getIderatenums() * mactualsaleprice);// 减免金额
            }
        }
        sd.setItotalminutes(new Long(0));
        sd.setByisout(new Long(1));
        sd.setDtmakedate(Tools.getDayTimes());
        sd.setIversion(new Long(0));
        return sd;
    }

    // 一人一票,现场打印
    public List saveStssoldtickettabug0make00(List cdetaillist,
                                              Stssalesvoucherdetailstab sd, Stssalesvouchertab s,
                                              String szstationcode, String szsceniccode, String sztickettypecode,
                                              Long icrowdkindid) {

        for (int j = 1; j <= sd.getIticketnum().intValue(); j++) {
            Stssoldtickettab stsv = new Stssoldtickettab();
            StssoldtickettabId stsvid = new StssoldtickettabId();
            stsvid.setIsalesvoucherid(sd.getId().getIsalesvoucherid());
            stsvid.setIticketstationid(sd.getId().getIticketstationid());
            stsvid.setIsalesvoucherdetailsid(sd.getId()
                    .getIsalesvoucherdetailsid());
            stsvid.setSzsoldticketid(new Long(j));
            stsv.setId(stsvid);
            stsv.setIscenicid(s.getIscenicid());
            stsv.setIcrowdkindid(icrowdkindid);
            stsv.setItickettypeid(sd.getItickettypeid());
            stsv.setUsid(s.getUsid());
            stsv.setIbusinessid(s.getIbusinessid());
            stsv.setDyusid(s.getDyusid());
            stsv.setIplayerperticket(new Long(1));// 人次数
            stsv.setDtstartdate(sd.getDtstartdate());
            stsv.setDtenddate(sd.getDtenddate());
            stsv.setMhandcharge(new Double(0));
            stsv.setByvalidity("00");
            stsv.setDtmakedate(s.getDtmakedate());
            stsv.setBymaketicketway("00");
            if(sd.getTimeId() != null) {
            	 stsv.setZjno3(sd.getTimeId()+"");
            }
            List<Map> iserialnumlist = new ArrayList();
            try {
                iserialnumlist = timeSharingDao
                        .findBySqlToMapnocolsesession("select ticketid_sequence.nextval  from dual");
            } catch (Exception e1) {
                e1.printStackTrace();
            }
            Long iserialnum = new Long(
                    (((Map) iserialnumlist.get(0)).get("NEXTVAL")).toString());
            stsv.setIserialnum(iserialnum);
            String newmaxorno = Tools.ConvertTo36Text(iserialnum, 0);
            StringBuffer printno = new StringBuffer();
            printno.append(szstationcode);
            printno.append(szsceniccode);
            printno.append(sztickettypecode);
            if (newmaxorno.length() < 6) {
                for (int b = 0; b < 6 - newmaxorno.length(); b++) {
                    printno.append("0");
                }
            }

            printno.append(newmaxorno);
            String szprintno = Tools.ticketMakeMd5(printno.toString());
            stsv.setSzticketprintno(szprintno);
            stsv.setMremainmoney(new Double(0));
            stsv.setMpresentmoney(new Double(0));
            stsv.setMactualsaleprice(sd.getMactualsaleprice());
            stsv.setIpresentnum(new Long(0));
            stsv.setIremainnum(new Long(1));// 剩余数量
            stsv.setMnominalfee(new Double(0));
            stsv.setMdeposit(new Double(0));
            stsv.setByticketpurpose("00");
            stsv.setBisrefundbalance(new Long(1));
            stsv.setByactivation("02");
            Esbticketwintab e = (Esbticketwintab) timeSharingDao.get(
                    Esbticketwintab.class, s.getIticketwinid());

            if (e.getBywintype().equals("0003")) {
                // 窗口为年卡窗口
                stsv.setManyouno(sd.getManyouno());
                stsv.setMyzj(sd.getMyzj());
                stsv.setZjno1(sd.getZjno1());
                stsv.setName1(sd.getName1());
            } else {
                if (sd.getMyzj() != null && !sd.getMyzj().equals("")) {
                    stsv.setMyzj(sd.getMyzj());
                    stsv.setName1(sd.getName1());
                }
            }
            cdetaillist.add(stsv);

        }
        return cdetaillist;
    }

    // 一票多人 现场打印
    public List saveStssoldtickettabug1make00(List cdetaillist,
                                              Stssalesvoucherdetailstab sd, Stssalesvouchertab s,
                                              String szstationcode, String szsceniccode, String sztickettypecode,
                                              Long icrowdkindid) {

        Stssoldtickettab stsv = new Stssoldtickettab();
        StssoldtickettabId stsvid = new StssoldtickettabId();
        stsvid.setIsalesvoucherid(sd.getId().getIsalesvoucherid());
        stsvid.setIticketstationid(sd.getId().getIticketstationid());
        stsvid.setIsalesvoucherdetailsid(sd.getId().getIsalesvoucherdetailsid());
        stsvid.setSzsoldticketid(new Long(1));
        stsv.setId(stsvid);
        stsv.setIscenicid(s.getIscenicid());
        stsv.setIcrowdkindid(icrowdkindid);
        stsv.setItickettypeid(sd.getItickettypeid());
        stsv.setUsid(s.getUsid());
        stsv.setIbusinessid(s.getIbusinessid());
        stsv.setDyusid(s.getDyusid());
        stsv.setIplayerperticket(sd.getIticketplayer());// 人次数
        stsv.setDtstartdate(sd.getDtstartdate());
        stsv.setDtenddate(sd.getDtenddate());
        stsv.setMhandcharge(new Double(0));
        stsv.setByvalidity("00");
        stsv.setDtmakedate(s.getDtmakedate());
        stsv.setBymaketicketway("00");
        if(sd.getTimeId() != null) {
            stsv.setZjno3(sd.getTimeId()+"");
        }
        List<Map> iserialnumlist = new ArrayList();

        try {
            iserialnumlist = timeSharingDao
                    .findBySqlToMapnocolsesession("select ticketid_sequence.nextval  from dual");
        } catch (Exception e1) {
            e1.printStackTrace();
        }
        Long iserialnum = new Long(
                (((Map) iserialnumlist.get(0)).get("NEXTVAL")).toString());
        stsv.setIserialnum(iserialnum);
        String newmaxorno = Tools.ConvertTo36Text(iserialnum, 0);
        StringBuffer printno = new StringBuffer();
        printno.append(szstationcode);
        printno.append(szsceniccode);
        printno.append(sztickettypecode);
        Debug.print("newmaxorno" + newmaxorno);
        if (newmaxorno.length() < 6) {
            for (int b = 0; b < 6 - newmaxorno.length(); b++) {
                printno.append("0");
            }
        }

        printno.append(newmaxorno);
        String szprintno = Tools.ticketMakeMd5(printno.toString());
        stsv.setSzticketprintno(szprintno);
        stsv.setMremainmoney(new Double(0));
        stsv.setMpresentmoney(new Double(0));
        stsv.setMactualsaleprice(sd.getMactualsaleprice());
        stsv.setIpresentnum(new Long(0));
        stsv.setIremainnum(sd.getIplayerperticket());// 剩余数量
        stsv.setMnominalfee(new Double(0));
        stsv.setMdeposit(new Double(0));
        stsv.setByticketpurpose("00");
        stsv.setBisrefundbalance(new Long(1));
        stsv.setByactivation("02");
        cdetaillist.add(stsv);
        Debug.print("szprintno" + szprintno);
        return cdetaillist;
    }

    // 一人一票,现场激活
    public List saveStssoldtickettabug0make01(List cdetaillist,
                                              Stssalesvoucherdetailstab sd, Stssalesvouchertab s,
                                              String szticketprintno, Long icrowdkindid) {

        for (int j = 1; j <= sd.getIticketnum().intValue(); j++) {
            Stssoldtickettab stsv = new Stssoldtickettab();

            StssoldtickettabId stsvid = new StssoldtickettabId();
            stsvid.setIsalesvoucherid(sd.getId().getIsalesvoucherid());
            stsvid.setIticketstationid(sd.getId().getIticketstationid());
            stsvid.setIsalesvoucherdetailsid(sd.getId()
                    .getIsalesvoucherdetailsid());
            stsvid.setSzsoldticketid(new Long(j));
            stsv.setId(stsvid);

            stsv.setIscenicid(s.getIscenicid());
            stsv.setIcrowdkindid(icrowdkindid);
            stsv.setItickettypeid(sd.getItickettypeid());
            stsv.setUsid(s.getUsid());
            stsv.setIbusinessid(s.getIbusinessid());
            stsv.setDyusid(s.getDyusid());
            stsv.setIplayerperticket(new Long(1));// 人次数
            stsv.setDtstartdate(sd.getDtstartdate());
            stsv.setDtenddate(sd.getDtenddate());
            stsv.setMhandcharge(new Double(0));

            stsv.setByvalidity("00");
            stsv.setDtmakedate(s.getDtmakedate());
            stsv.setBymaketicketway("01");
            if(sd.getTimeId() != null) {
                stsv.setZjno3(sd.getTimeId()+"");
            }
            Edmtickettypetab edmticket = (Edmtickettypetab) this.timeSharingDao
                    .get(Edmtickettypetab.class, sd.getItickettypeid());
            if (!edmticket.getBymediatype().equals("00")
                    && !edmticket.getBymediatype().equals("01")) {
                // 不是 一维二维条码
                List<Map> iserialnumlist = new ArrayList();
                try {

                    iserialnumlist = timeSharingDao
                            .findBySqlToMapnocolsesession("select ticketid_sequence.nextval  from dual");
                } catch (Exception e1) {
                    e1.printStackTrace();
                }

                Long iserialnum = new Long(
                        (((Map) iserialnumlist.get(0)).get("NEXTVAL"))
                                .toString());
                stsv.setIserialnum(iserialnum);
                String newmaxorno = Tools.ConvertTo36Text(iserialnum, 0);
                StringBuffer printno = new StringBuffer();
                Esbscenicareatab scenic = (Esbscenicareatab) this.timeSharingDao
                        .get(Esbscenicareatab.class, s.getIscenicid());
                Esbticketstationtab esbticketstation = (Esbticketstationtab) this.timeSharingDao
                        .get(Esbticketstationtab.class, sd.getId()
                                .getIticketstationid());

                printno.append(esbticketstation.getSzstationcode());
                printno.append(scenic.getSzsceniccode());
                printno.append(edmticket.getSztickettypecode());
                if (newmaxorno.length() < 6) {
                    for (int b = 0; b < 6 - newmaxorno.length(); b++) {
                        printno.append("0");
                    }
                }
                printno.append(newmaxorno);
                String szprintno = Tools.ticketMakeMd5(printno.toString());
                stsv.setSzticketprintno(szprintno);

            } else {
                if(edmticket.getBymaketicketway().equals("01")){//现场激活
                    String[] sperialnum = szticketprintno.split("[|]");
                    String szprintnocode = sperialnum[j - 1];
                    String tsql = " from Edmticketnoruletab rule where rule.byisuse=1 and rule.iscenicid="
                            + s.getIscenicid();
                    List lst = this.timeSharingDao.find(tsql);
                    if (lst != null && lst.size() > 0) {
                        Edmticketnoruletab ticketrule = (Edmticketnoruletab) lst
                                .get(0);
                        String lsh = szprintnocode.substring(
                                ticketrule.getIntons2()
                                        + ticketrule.getItickettypecodepos(),
                                ticketrule.getIntons2()
                                        + ticketrule.getItickettypecodepos()
                                        + ticketrule.getIserialnolen());
                        if (ticketrule.getIntons1() != null
                                && ticketrule.getIntons1() == 1) {
                            stsv.setIserialnum(Long.parseLong(lsh));// 流水号
                        } else {
                            stsv.setIserialnum(Tools.Text36ToConvert(lsh));// 流水号
                        }

                    }
                    stsv.setSzticketprintno(sperialnum[j - 1]);
                }else if(edmticket.getBymaketicketway().equals("03")){//自选票号
                    String[] sperialnum = szticketprintno.split("[|]");
                    String szprintnocode = sperialnum[j - 1];
                    String hsql = "from TicketPrintNo where ticketPrintno = '"+szprintnocode+"' ";
                    List lst = this.timeSharingDao.find(hsql);
                    if(lst != null && !lst.isEmpty()){
                        TicketPrintNo ticket = (TicketPrintNo) lst.get(0);
                        stsv.setIserialnum(ticket.getSerialNumber());
                    }
                    stsv.setSzticketprintno(szprintnocode);
                }
            }

            stsv.setMremainmoney(new Double(0));
            stsv.setMpresentmoney(new Double(0));
            stsv.setMactualsaleprice(sd.getMactualsaleprice());
            stsv.setIpresentnum(new Long(0));
            stsv.setIremainnum(new Long(1));// 剩余数量
            stsv.setMnominalfee(new Double(0));
            stsv.setMdeposit(new Double(0));
            stsv.setByticketpurpose("00");
            stsv.setBisrefundbalance(new Long(1));
            stsv.setByactivation("02");
            Esbticketwintab e = (Esbticketwintab) timeSharingDao.get(
                    Esbticketwintab.class, s.getIticketwinid());
            if (e.getBywintype().equals("0003")) {
                // 窗口为年卡窗口
                stsv.setManyouno(sd.getManyouno());
                stsv.setMyzj(sd.getMyzj());
                stsv.setZjno1(sd.getZjno1());
                stsv.setName1(sd.getName1());
            } else {
                Edmcrowdkindpricetab edmcrowdkindpricetab = (Edmcrowdkindpricetab) timeSharingDao
                        .get(Edmcrowdkindpricetab.class,
                                sd.getIcrowdkindpriceid());
                if (edmcrowdkindpricetab.getIpeoplenumrange().longValue() == 1) {
                    if (sd.getMyzj() != null && !sd.getMyzj().equals("")) {
                        stsv.setMyzj(sd.getMyzj());
                        stsv.setName1(sd.getName1());
                    }
                }
            }
            cdetaillist.add(stsv);

        }
        return cdetaillist;
    }

    /**
     * 凭证明细表
     *
     * @param zdetaillist
     *            凭证明细表中票号
     * @param s
     * @param sd
     * @param comticketsalesdetails
     *            s * @return
     */
    public List SaveStscomticketsalesdetailstab(List zdetaillist,
                                                Stssalesvouchertab s, Stssalesvoucherdetailstab sd,
                                                String comticketsalesdetails) {
        String[] comticketsalesdetail = comticketsalesdetails.split(":");

        long n = 0;
        Long ss = new Long(0);
        Long oisplitamount = new Long(0);
        long yisalsvoucherdetailid = 0;
        for (int i = 0; i < comticketsalesdetail.length; i++) {
            String[] zdetail = comticketsalesdetail[i].split("&");
            Stscomticketsalesdetailstab zstd = new Stscomticketsalesdetailstab();
            StscomticketsalesdetailstabId zstdid = new StscomticketsalesdetailstabId();
            Long isalesvoucherdetailsid = new Long(zdetail[0]);
            if (isalesvoucherdetailsid.longValue() == sd.getId()
                    .getIsalesvoucherdetailsid()) {
                Long icrowdkindpriceid = new Long(zdetail[1]);
                Long itickettypeid = new Long(zdetail[2]);
                Long iztickettypeid = new Long(zdetail[3]);
                Long isplitamount = new Long(zdetail[4]);
                Long tripid = new Long(zdetail[5]);
                Long ivenueareaid = new Long(zdetail[6]);
                Long ivenueseatsid = new Long(zdetail[7]);
                String dtstartdate = zdetail[8];
                String dtenddate = zdetail[9];
                /**
                 * 判断产品是按子产品自己有效期还是套票有效期
                 */
                Edmticketproduct et = (Edmticketproduct) timeSharingDao.get(
                        Edmticketproduct.class, itickettypeid);
                if (et == null) {
                    dtstartdate = sd.getDtstartdate();
                    dtenddate = sd.getDtenddate();
                } else {
                    if (et.getInoteger1() == null || et.getInoteger1() == 0) {
                        dtstartdate = sd.getDtstartdate();
                        dtenddate = sd.getDtenddate();
                    }
                }
                zstdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
                zstdid.setIticketstationid(s.getId().getIticketstationid());
                zstdid.setIsalesvoucherdetailsid(isalesvoucherdetailsid);
                zstd.setIcrowdkindpriceid(icrowdkindpriceid);
                zstd.setItickettypeid(itickettypeid);
                zstd.setIztickettypeid(iztickettypeid);
                zstd.setMhandcharge(new Double(0));
                zstd.setDtmakedate(Tools.getDayTimes());
                Prdtripvenuemanage p = null;
				/*
				 * if (tripid.longValue() > 0) { List plist = timeSharingDao
				 * .find(" from Prdtripvenuemanage where tripid=" + tripid +
				 * " and itickettypeid=" + iztickettypeid + " and startdata<='"
				 * + dtstartdate + "' and enddata>='" + dtstartdate + "'"); p =
				 * (Prdtripvenuemanage) plist.get(0); zstd.setTripid(tripid);
				 * zstd.setDtstartdate(dtstartdate + " " + p.getStarttime() +
				 * ":00"); zstd.setDtenddate(dtstartdate + " " + p.getEndtime()
				 * + ":00"); Calendar now = Calendar.getInstance(TimeZone
				 * .getTimeZone("GMT+08:00")); SimpleDateFormat df = new
				 * SimpleDateFormat( "yyyy-MM-dd HH:mm:ss"); if (ivenueareaid ==
				 * 0) { zstd.setIvenueareaid(p.getIvenueareaid());
				 * zstd.setIvenueid(p.getIvenueid()); } else {
				 * zstd.setIvenueareaid(ivenueareaid);
				 * zstd.setIvenueid(p.getIvenueid()); }
				 * zstd.setIvenueseatsid(ivenueseatsid); } else {
				 */
                zstd.setTripid(tripid);
                zstd.setIvenueareaid(new Long(0));
                zstd.setIvenueid(new Long(0));
                zstd.setIvenueseatsid(new Long(0));
                zstd.setDtstartdate(dtstartdate + " 00:00:00");
                zstd.setDtenddate(dtenddate + " 23:59:59");
                // }
                zstd.setIversion(new Long(0));
                List list = timeSharingDao
                        .find(" from Edmticketcomposepricetab where id.icrowdkindpriceid="
                                + icrowdkindpriceid
                                + " and itickettypeid='"
                                + iztickettypeid + "'");
                Edmticketcomposepricetab edt = (Edmticketcomposepricetab) list
                        .get(0);
                zstdid.setIcomticketsalesdetailsid(edt.getId()
                        .getIticketcomposepriceid());
                zstd.setId(zstdid);
                zstd.setIsplitamount(isplitamount * edt.getNumb());
                zstd.setMsplitprice(edt.getMactualsaleprice());
                zstd.setMsplitmoney(edt.getMactualsaleprice() * edt.getNumb()
                        * isplitamount);
                zstd.setIderatenums(sd.getIderatenums());
                zstd.setMderatemoney(sd.getIderatenums()
                        * edt.getMactualsaleprice());
                zdetaillist.add(zstd);
            }
        }
        return zdetaillist;
    }

    // 一票一人售出门票子表保存
    public List SaveStssoldticketsubtabug0(List cdzetaillist, List zdetaillist,
                                           Stssalesvouchertab s, Stssalesvoucherdetailstab sd,
                                           Long icrowdkindid) {
        for (int i = 0; i < zdetaillist.size(); i++) {
            Stscomticketsalesdetailstab zstd = (Stscomticketsalesdetailstab) zdetaillist
                    .get(i);
            if (zstd.getId().getIsalesvoucherdetailsid().longValue() == sd
                    .getId().getIsalesvoucherdetailsid()) {
                List opwwlist = timeSharingDao
                        .find(" from Opwwicketsettab where itickettypeid="
                                + zstd.getItickettypeid()
                                + " and izticktypeid="
                                + zstd.getIztickettypeid() + " and byisuse=1");
                int a = cdzetaillist.size();
                for (int j = 0; j < opwwlist.size(); j++) {
                    Opwwicketsettab opww = (Opwwicketsettab) opwwlist.get(j);
                    for (int m = 1; m <= zstd.getIsplitamount().intValue(); m++) {
                        Stssoldticketsubtab stss = new Stssoldticketsubtab();
                        StssoldticketsubtabId stssid = new StssoldticketsubtabId();
                        stssid.setIticketstationid(s.getId()
                                .getIticketstationid());
                        stssid.setSzsoldticketid(new Long(m));
                        stssid.setSzsoldticketsubid(new Long(a + 1));
                        a++;
                        stssid.setIsalesvoucherid(s.getId()
                                .getIsalesvoucherid());
                        stssid.setIsalesvoucherdetailsid(zstd.getId()
                                .getIsalesvoucherdetailsid());
                        stss.setId(stssid);
                        stss.setIgardengateid(opww.getIgardengateid());
                        stss.setIscenicid(s.getIscenicid());
                        stss.setItickettypeid(zstd.getItickettypeid());
                        stss.setIztickettypeid(zstd.getIztickettypeid());
                        stss.setBychecktype(new Long(0));
                        stss.setByconsumemode(opww.getByconsumemode());
                        stss.setIpasstimes(opww.getIlimittotaltimes());
                        stss.setIpassedtimes(new Long(0));
                        stss.setMsingletimes(new Long(1));
                        stss.setMpasstimes(new Long(1));
                        stss.setMsingledtimes(new Long(0));
                        stss.setMlimitconsume(new Double(0));
                        stss.setMsingleconsume(new Double(0));
                        stss.setMconsumed(new Double(0));
                        stss.setByisout(new Long(1));
                        

                        // 李经锐 2012-09-13 IC卡需求 先无效
                        Edmtickettypetab edmticket = (Edmtickettypetab) this.timeSharingDao
                                .get(Edmtickettypetab.class,
                                        zstd.getItickettypeid());
                        if (edmticket.getBymaketicketway().equals("02")) {
                        	stss.setIsvalid(new Long(1));
                           // stss.setIsvalid(new Long(-1));
                        } else if (edmticket.getBymaketicketway().equals("01")
                                && !edmticket.getBymediatype().equals("00")
                                && !edmticket.getBymediatype().equals("01")) {
                            stss.setIsvalid(new Long(-1));
                        } else {
                        	stss.setIsvalid(new Long(1));
                        }

                        stss.setDtmakedate(Tools.getDayTimes());
                        stss.setBylastcheckdir(new Long(0));
                        stss.setIcrowdkindid(icrowdkindid);
                        stss.setTripid(zstd.getTripid());
                        stss.setDtbegindate(zstd.getDtstartdate());
                        stss.setDtenddate(zstd.getDtenddate());
                        stss.setTimeStart(zstd.getTimeStart());
                        stss.setTimeEnd(zstd.getTimeEnd());
                        stss.setTimeId(zstd.getTimeId());
                        cdzetaillist.add(stss);
                    }
                }
            }
        }
        return cdzetaillist;
    }

    // 一票多人售出门票子表保存
    public List SaveStssoldticketsubtabug1(List cdzetaillist, List zdetaillist,
                                           Stssalesvouchertab s, Stssalesvoucherdetailstab sd,
                                           Long icrowdkindid) {
        for (int i = 0; i < zdetaillist.size(); i++) {
            Stscomticketsalesdetailstab zstd = (Stscomticketsalesdetailstab) zdetaillist
                    .get(i);
            if (zstd.getId().getIsalesvoucherdetailsid().longValue() == sd
                    .getId().getIsalesvoucherdetailsid()) {
                List opwwlist = timeSharingDao
                        .find(" from Opwwicketsettab where itickettypeid="
                                + zstd.getItickettypeid()
                                + " and izticktypeid="
                                + zstd.getIztickettypeid());
                int a = cdzetaillist.size();
                for (int j = 1; j <= opwwlist.size(); j++) {
                    Debug.print(" SaveStssoldticketsubtabug1 opwwlist == " + j);
                    int jj = j - 1;
                    Opwwicketsettab opww = (Opwwicketsettab) opwwlist.get(jj);
                    Stssoldticketsubtab stss = new Stssoldticketsubtab();
                    StssoldticketsubtabId stssid = new StssoldticketsubtabId();
                    stssid.setIticketstationid(s.getId().getIticketstationid());
                    stssid.setSzsoldticketid(new Long(1));
                    stssid.setSzsoldticketsubid(new Long(a + 1));
                    a++;
                    stssid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
                    stssid.setIsalesvoucherdetailsid(zstd.getId()
                            .getIsalesvoucherdetailsid());
                    stss.setId(stssid);
                    stss.setIgardengateid(opww.getIgardengateid());
                    stss.setIscenicid(s.getIscenicid());
                    stss.setItickettypeid(zstd.getItickettypeid());
                    stss.setIztickettypeid(zstd.getIztickettypeid());
                    stss.setBychecktype(new Long(0));
                    stss.setByconsumemode(opww.getByconsumemode());

                    if (opww.getIlimittotaltimes().longValue() == 0) {
                        // 多次进园门
                        stss.setIpasstimes(opww.getIlimittotaltimes());
                    } else {
                        // 限制次数进园门
                        stss.setIpasstimes(zstd.getIsplitamount()
                                * opww.getIlimittotaltimes());
                    }
                    if (opww.getBywicketconsumetype().equals("01")) {
                        // 一检一人
                        stss.setMpasstimes(new Long(1));
                    } else {
                        // 一检多人、一单一检
                        stss.setMpasstimes(zstd.getIsplitamount());
                    }
                    stss.setIpassedtimes(new Long(0));
                    stss.setMsingletimes(zstd.getIsplitamount());
                    stss.setMsingledtimes(new Long(0));
                    stss.setMlimitconsume(new Double(0));
                    stss.setMsingleconsume(new Double(0));
                    stss.setMconsumed(new Double(0));
                    stss.setByisout(new Long(1));
                    Edmtickettypetab edmticket = (Edmtickettypetab) this.timeSharingDao
                            .get(Edmtickettypetab.class,
                                    zstd.getItickettypeid());
                    if (edmticket.getBymaketicketway().equals("02")) {
                        stss.setIsvalid(new Long(-1));
                    } else if (edmticket.getBymaketicketway().equals("01")
                            && !edmticket.getBymediatype().equals("00")
                            && !edmticket.getBymediatype().equals("01")) {
                        stss.setIsvalid(new Long(-1));
                    } else {
                        stss.setIsvalid(new Long(1));
                    }

                    stss.setDtmakedate(Tools.getDayTimes());
                    stss.setBylastcheckdir(new Long(0));
                    stss.setIcrowdkindid(icrowdkindid);
                    stss.setTripid(zstd.getTripid());
                    stss.setDtbegindate(zstd.getDtstartdate());
                    stss.setDtenddate(zstd.getDtenddate());
                    //add by koka on 20170729
                    stss.setTimeStart(zstd.getTimeStart());
                    stss.setTimeEnd(zstd.getTimeEnd());
                    
                    cdzetaillist.add(stss);

                }
            }
        }
        return cdzetaillist;
    }

    // 网上订单取票保存 2014-03-03李经锐修改 添加 传入参数 param1(结算方式,应收款,实收款,找零)
    public ResultBean savetorder41(T_order t_order, List listorder,
                                   List listzorder, Long iemployeeid, Long iticketwinid, Long maxid,
                                   List trlist, String param1) throws Exception {
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });

        // 2014-03-03李经锐修改 添加 传入参数 param1(结算方式,应收款,实收款,找零)
        Stssalesvouchertab s = this.savetStssalesvouchertab(t_order,
                iemployeeid, maxid, iticketwinid, param1);

        Esbscenicareatab scenic = (Esbscenicareatab) timeSharingDao.get(
                Esbscenicareatab.class, new Long(t_order.getIscenicid()));

        // 2014-03-03李经锐修改 添加 传入参数 param1(结算方式,应收款,实收款,找零)
        Stssalessettlementtab st = this.savetStssalessettlementtab(s, t_order,
                param1);
        Esbticketwintab e = (Esbticketwintab) timeSharingDao.get(
                Esbticketwintab.class, s.getIticketwinid());
        Esbticketstationtab esbticketstation = (Esbticketstationtab) timeSharingDao
                .get(Esbticketstationtab.class, e.getIticketstationid());
        for (int i = 0; i < listzorder.size(); i++) {
            T_zorderlist zlist = (T_zorderlist) listzorder.get(i);
            Edmtickettypetab edticket = (Edmtickettypetab) timeSharingDao.get(
                    Edmtickettypetab.class, new Long(zlist.getItickettypeid()));
            if (Tools.getDayTimes().compareTo(zlist.getDtenddate()) > 0) {

                rs.addRow(new String[] { "false",
                        "产品" + edticket.getSztickettypename() + "已过期" });

                return rs;
            }
            if (scenic.getScenictype().equals("01")) {
                Sysparv5 sv5 = (Sysparv5) timeSharingDao.get(Sysparv5.class,
                        new Sysparv5Id("OFCK", "****"));
                if (sv5 == null) {
                    List opwwlist = timeSharingDao
                            .find(" from Opwwicketsettab where itickettypeid="
                                    + zlist.getItickettypeid()
                                    + " and izticktypeid="
                                    + zlist.getIztickettypeid());
                    if (opwwlist.size() == 0) {
                        rs.addRow(new String[] {
                                "false",
                                "产品" + edticket.getSztickettypename()
                                        + "没有检票园门，不能出票" });
                        return rs;
                    }
                } else {
                    if (!sv5.getPmva().equals("true")) {
                        List opwwlist = timeSharingDao
                                .find(" from Opwwicketsettab where itickettypeid="
                                        + zlist.getItickettypeid()
                                        + " and izticktypeid="
                                        + zlist.getIztickettypeid());
                        if (opwwlist.size() == 0) {
                            rs.addRow(new String[] {
                                    "false",
                                    "产品" + edticket.getSztickettypename()
                                            + "没有检票园门，不能出票" });
                            return rs;
                        }
                    }
                }

            }
        }

        // timeSharingDao.save(st);
        List detaillist = new ArrayList();
        List cdetaillist = new ArrayList();
        List zdetaillist = new ArrayList();
        List cdzetaillist = new ArrayList();
        List cdchecklist = new ArrayList();
        Long szsoldticketid = new Long(1);

        for (int i = 0; i < listorder.size(); i++) {
            T_orderlist tlist = (T_orderlist) listorder.get(i);
            // 售出凭证明细

            Stssalesvoucherdetailstab sd = this.savetStssalesvoucherdetailstab(
                    s, tlist);

            Edmtickettypetab eticket = (Edmtickettypetab) timeSharingDao.get(
                    Edmtickettypetab.class, new Long(tlist.getItickettypeid()));

            if (eticket.getByusage() == 0) {
                sd.setIticketnum(new Long(tlist.getNumb()));
                sd.setIticketplayer(new Long(tlist.getNumb()));
            } else {
                sd.setIplayerperticket(new Long(tlist.getNumb()));
                sd.setIticketplayer(new Long(tlist.getNumb()));
            }

            detaillist.add(sd);
            // 售出凭证子明细

            // timeSharingDao.save(sd);
            // 添加售出门票表
            zdetaillist = this.SavetStscomticketsalesdetailstab(zdetaillist, s,
                    tlist, listzorder);

            if (eticket.getByusage() == 0) {
                // 一票一人

                if (eticket.getBymaketicketway().equals("00")) {
                    if (trlist != null && trlist.size() > 0) {

                        for (int w = 0; w < cdetaillist.size(); w++) {
                            Stssoldtickettab soldticket = (Stssoldtickettab) cdetaillist
                                    .get(w);
                            if (t_order.getDyusid() == null
                                    || t_order.getDyusid().equals("")) {
                                soldticket.setDyusid("daoyou");
                            }
                            for (int r = 0; r < trlist.size(); r++) {
                                Trealname realname = (Trealname) trlist.get(r);
                                if (Long.parseLong(realname.getIcrowdkindid()) == soldticket
                                        .getIcrowdkindid().longValue()
                                        && Long.parseLong(realname
                                        .getItickettypeid()) == soldticket
                                        .getItickettypeid().longValue()) {
                                    soldticket.setMyzj(realname.getIdcard());
                                    soldticket.setName1(realname.getCname());
                                    trlist.remove(r);
                                    break;
                                }
                            }
                        }
                    }
                    // 现场打 印
                    cdetaillist = this.saveStssoldtickettabug0make00(
                            cdetaillist, sd, s,
                            esbticketstation.getSzstationcode(),
                            scenic.getSzsceniccode(),
                            eticket.getSztickettypecode(),
                            new Long(tlist.getIcrowdkindid()));

                    Edmcrowdkindpricetab edmcrowdkindpricetab = (Edmcrowdkindpricetab) timeSharingDao
                            .get(Edmcrowdkindpricetab.class,
                                    sd.getIcrowdkindpriceid());

                    // 判断是否只有一张票且为散客业务

                } else if (eticket.getBymaketicketway().equals("01")) {
                    // 现场激活
                    // System.out.println("一票一人现场激活开始");
                    cdetaillist = this.saveStssoldtickettabug0make01(
                            cdetaillist, sd, s, tlist.getSzticketprintno(),
                            new Long(tlist.getIcrowdkindid()));
                }
            } else if (eticket.getByusage() == 1) {
                // 一票多人
                if (eticket.getBymaketicketway().equals("00")) {
                    // 现场打印
                    cdetaillist = this.saveStssoldtickettabug1make00(
                            cdetaillist, sd, s,
                            esbticketstation.getSzstationcode(),
                            scenic.getSzsceniccode(),
                            eticket.getSztickettypecode(),
                            new Long(tlist.getIcrowdkindid()));
                } else if (eticket.getBymaketicketway().equals("01")) {
                    // 现场激活
                    rs.addRow(new String[] {
                            "false",
                            "产品" + eticket.getSztickettypename()
                                    + "激活票，不支持一票多人" });
                    return rs;
                }
            }
            if (eticket.getByusage() == 0) {
                // 一票一人
                cdzetaillist = this.SaveStssoldticketsubtabug0(cdzetaillist,
                        zdetaillist, s, sd, new Long(tlist.getIcrowdkindid()));
                cdchecklist = this.SaveStsschecktabug0(cdchecklist,
                        zdetaillist, cdetaillist, s, sd,
                        new Long(tlist.getIcrowdkindid()));
            } else if (eticket.getByusage() == 1) {
                // 一票多人
                cdzetaillist = this.SaveStssoldticketsubtabug1(cdzetaillist,
                        zdetaillist, s, sd, new Long(tlist.getIcrowdkindid()));
                cdchecklist = this.SaveStsschecktabug1(cdchecklist,
                        zdetaillist, cdetaillist, s, sd,
                        new Long(tlist.getIcrowdkindid()));
            }

        }

        timeSharingDao.save(s);
        timeSharingDao.save(st);
        for (int i = 0; i < detaillist.size(); i++) {
            Stssalesvoucherdetailstab sd = (Stssalesvoucherdetailstab) detaillist
                    .get(i);
            timeSharingDao.save(sd);
        }
        Sysparv5 sv5 = (Sysparv5) timeSharingDao.get(Sysparv5.class,
                new Sysparv5Id("PRCS", "01"));
        String printcs = "0";
        if (sv5 != null) {
            printcs = sv5.getPmva();
        }

        for (int i = 0; i < cdetaillist.size(); i++) {
            Stssoldtickettab stsv = (Stssoldtickettab) cdetaillist.get(i);
            timeSharingDao.save(stsv);
            if (stsv.getBymaketicketway().equals("00")) {
                if (printcs.equals("1")) {
                    Ticketprintlist t = new Ticketprintlist();
                    // timeSharingDao.save(stsv);
                    t.setIemployeeid(iemployeeid);
                    t.setSzsalesvoucherno(s.getSzsalesvoucherno());
                    t.setPrinttype("01");
                    t.setSzticketprintno(stsv.getSzticketprintno());
                    t.setPrinttime(Tools.getDayTimes());
                    t.setIsok(new Long(0));
                    Long printid = timeSharingDao.getSequenceId("PRINT_ID");
                    t.setPrintid(printid);
                }
            }
        }

        for (int i = 0; i < zdetaillist.size(); i++) {
            Stscomticketsalesdetailstab zstd = (Stscomticketsalesdetailstab) zdetaillist
                    .get(i);
            timeSharingDao.save(zstd);
        }
        for (int i = 0; i < cdzetaillist.size(); i++) {
            Stssoldticketsubtab stss = (Stssoldticketsubtab) cdzetaillist
                    .get(i);
            stss.setIpassedtimes(stss.getIpasstimes());
            timeSharingDao.save(stss);
        }
        for (int i = 0; i < cdchecklist.size(); i++) {

            Stsschecktab stss = (Stsschecktab) cdchecklist.get(i);

            timeSharingDao.save(stss);
        }

        // lijingrui修改 2012-08-30 订单中含有预制票 操作个人结存明细表
        for (int i = 0; i < listorder.size(); i++) {
            T_orderlist tlist = (T_orderlist) listorder.get(i);
            Edmtickettypetab edmticket = (Edmtickettypetab) this.timeSharingDao
                    .get(Edmtickettypetab.class,
                            Long.parseLong(tlist.getItickettypeid()));
            if (tlist.getBymaketicketway().equals("01")) {
                if (edmticket.getBymediatype().equals("00")
                        || edmticket.getBymediatype().equals("01")) {
                    String szticketprintno = tlist.getSzticketprintno();
                    String[] iserial = szticketprintno.split("[|]");
                    boolean sf = checkEditIompersonHouse(s.getIhandler(),
                            iserial, s.getIscenicid(),
                            Long.parseLong(tlist.getItickettypeid()),
                            Long.parseLong(tlist.getNumb()));
                    if (sf) {
                        rs.addRow(new String[] { "false",
                                "售票员手中没售出票号或者售出票号与售票员手中票号冲突" });
                        return rs;
                    }
                } else {
                    Hotelprovider provider = (Hotelprovider) this.timeSharingDao
                            .get(Hotelprovider.class, s.getIscenicid());
                    if (provider != null && provider.getInoteger5() == 1) {
                        String psql = " from Kcpersonalticketdetailstab per where per.itickettypeid="
                                + Long.parseLong(tlist.getItickettypeid())
                                + " and per.ireceiverid=" + s.getIhandler();
                        List kcList = this.timeSharingDao.findTopNumb(psql, 1);
                        if (kcList != null && kcList.size() > 0) {
                            Kcpersonalticketdetailstab person = (Kcpersonalticketdetailstab) kcList
                                    .get(0);
                            if (person.getIamount() > Long.parseLong(tlist
                                    .getNumb())) {
                                person.setIamount(person.getIamount()
                                        - Long.parseLong(tlist.getNumb()));
                                this.timeSharingDao.update(person);
                            } else if (person.getIamount() == Long
                                    .parseLong(tlist.getNumb())) {
                                this.timeSharingDao.delete(person);
                            } else {
                                rs.addRow(new String[] {
                                        "false",
                                        "现场激活感应卡"
                                                + edmticket
                                                .getSztickettypename()
                                                + "数量不足" });
                            }

                            // 短信公告提醒
                            // 获取售票员手中票的数量与系统参数中设置的数量做对比 不足 添加站内公告信息
                            String ksql1 = "select sum(ps.iamount) as iamount from Kcpersonalticketdetailstab ps where ps.itickettypeid="
                                    + Long.parseLong(tlist.getItickettypeid())
                                    + " and ps.ireceiverid=" + s.getIhandler();
                            List mounList = this.timeSharingDao.find(ksql1);
                            if (mounList != null && mounList.size() > 0) {
                                Long numberount = (Long) mounList.get(0);
                                String sysql1 = "select sys1.pmvb as pmvb from Sysparv5 sys1 where sys1.id.pmky='REMD' and sys1.id.pmcd='0002' ";
                                List pmvList = this.timeSharingDao.find(sysql1);
                                if (pmvList != null && pmvList.size() > 0) {
                                    Long pmvb = Long.parseLong(pmvList.get(0)
                                            .toString());

                                    if (numberount != null && pmvb != null
                                            && numberount < pmvb) {
                                        Webinfotab webinfo = new Webinfotab();
                                        Long maxids = this.timeSharingDao.getMaxPk(
                                                "seq", "Webinfotab");
                                        webinfo.setSeq(maxids + 1);
                                        webinfo.setIemployeeid(s.getIhandler());
                                        webinfo.setIhadder(s.getIhandler());
                                        webinfo.setSzmemo(edmticket
                                                .getSztickettypename()
                                                + "剩余数量：" + numberount);
                                        webinfo.setReminddate(Tools
                                                .getDayTimes());
                                        this.timeSharingDao.save(webinfo);
                                    }

                                    if (numberount == null
                                            || numberount.equals("")) {
                                        Webinfotab webinfo = new Webinfotab();
                                        Long maxids = this.timeSharingDao.getMaxPk(
                                                "seq", "Webinfotab");
                                        webinfo.setSeq(maxids + 1);
                                        webinfo.setIemployeeid(s.getIhandler());
                                        webinfo.setIhadder(s.getIhandler());
                                        webinfo.setSzmemo(edmticket
                                                .getSztickettypename()
                                                + "已售完,请重新领取!");
                                        webinfo.setReminddate(Tools
                                                .getDayTimes());
                                        this.timeSharingDao.save(webinfo);
                                    }
                                }

                            } else {
                                Webinfotab webinfo = new Webinfotab();
                                Long maxids = this.timeSharingDao.getMaxPk("seq",
                                        "Webinfotab");
                                webinfo.setSeq(maxids + 1);
                                webinfo.setIemployeeid(s.getIhandler());
                                webinfo.setIhadder(s.getIhandler());
                                webinfo.setSzmemo(edmticket
                                        .getSztickettypename() + "已售完,请重新领取!");
                                webinfo.setReminddate(Tools.getDayTimes());
                                this.timeSharingDao.save(webinfo);
                            }

                        }

                    }

                }
            }
        }

        rs.addRow(new String[] { "true",
                s.getId().getIsalesvoucherid().toString() });
        return rs;

    }

    public Stssalesvouchertab savetStssalesvouchertab(T_order t_order,
                                                      Long iemployeeid, Long maxid, Long iticketwinid, String param1) {
        Stssalesvouchertab s = new Stssalesvouchertab();
        s.setIscenicid(new Long(t_order.getIscenicid()));
        s.setIticketwinid(iticketwinid);
        s.setIbusinessid(new Long(t_order.getIbusinessid()));
        s.setIhandler(iemployeeid);
        s.setIpayeer(iemployeeid);
        s.setImaker(iemployeeid);
        s.setIauditor(iemployeeid);

        // 2014-03-03 李经锐修改 网上现场支付
        if (param1 != null && !param1.equals("")) {

            String[] pn = param1.split(",");
            s.setIaccountreceivable(new Double(pn[1].toString()));// 实收
            s.setIacceptmoney(new Double(pn[2].toString()));// 应收
            s.setIgivechange(new Double(pn[3].toString()));// 找零
            s.setOrnote10("1"); // 现场支付
        } else {
            s.setIaccountreceivable(new Double(t_order.getZfmont()));// 实收
            s.setIacceptmoney(new Double(t_order.getZfmont()));// 应收
            s.setIgivechange(new Double(0));// 找零
            s.setOrnote10(t_order.getOrnote10());
        }
        s.setSzsalesvoucherno(t_order.getOrid());
        s.setIyear(new Long(Tools.getDays().substring(0, 4)));
        s.setImonth(new Long(Tools.getDays().substring(5, 7)));
        s.setIday(new Long(Tools.getDays().substring(8, 10)));
        s.setDtmakedate(Tools.getDayTimes());
        s.setDtauditdate(t_order.getDtstartdate());
        s.setUsid(t_order.getUsid());
        s.setBisintegral(new Long(0));
        s.setByprintinvoice(new Long(0));
        s.setBysplitway(new Long(2));
        s.setBisreturn(new Long(1));
        s.setBysalesvouchertype("01");
        s.setBypostrecord(new Long(0));
        s.setBysalesvoucherstate(new Long(1));
        s.setBispay(new Long(0));
        s.setBispayee(new Long(0));
        s.setSztravelbillno(t_order.getSztravelbillno());
        s.setIregionalid(new Long(t_order.getIregionalid()));
        if (t_order.getDyusid() == null || t_order.getDyusid().equals("")) {
            s.setDyusid("daoyou");
        } else {
            s.setDyusid(t_order.getDyusid());
        }
        s.setOrnote1(t_order.getOrnote1());
        s.setOrnote2(t_order.getOrnote2());
        s.setOrnote3(t_order.getOrnote3());
        s.setOrnote4(t_order.getOrnote4());
        s.setOrnote5(t_order.getOrnote5());
        s.setOrnote6(t_order.getOrnote6());
        s.setOrnote7(t_order.getOrnote7());
        s.setOrnote8(t_order.getOrnote8());
        s.setOrnote9(t_order.getOrnote9());
        // s.setOrnote10(t_order.getOrnote10());
        s.setTdlx(t_order.getTdlx());
        Esbticketwintab e = (Esbticketwintab) timeSharingDao.get(
                Esbticketwintab.class, s.getIticketwinid());
        StssalesvouchertabId id = new StssalesvouchertabId();
        id.setIticketstationid(e.getIticketstationid());
        id.setIsalesvoucherid(maxid);
        s.setId(id);
        // s.getId().setIsalesvoucherid(maxid);
        return s;
    }

    public Stssalessettlementtab savetStssalessettlementtab(
            Stssalesvouchertab s, T_order t_order, String param1) {
        System.out.println("savetStssalessettlementtab1111111111111111111111111111111111111111111111111111111");
        Stssalessettlementtab st = new Stssalessettlementtab();
        StssalessettlementtabId sid = new StssalessettlementtabId();
        sid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
        sid.setIticketstationid(s.getId().getIticketstationid());
        sid.setIsalessettlementid(new Long(1));
        st.setId(sid);
        st.setSettlementdata(Tools.getDays());
        st.setSettlementtime(Tools.getDayTimes().substring(11));
        st.setDtmakedate(Tools.getDayTimes());
        if (t_order.getDdzt().equals("02")) {
            // st.setIsettlementid("01");
            // 如果是易旅宝订单，则改为OTA预付款支付
            st.setIsettlementid((t_order.getOrid().matches("^\\d{8}999\\d{6}") || t_order
                    .getOrid().matches("^\\d{8}888\\d{6}") || t_order
                    .getOrid().matches("^\\d{8}777\\d{6}")) ? "08" : "01");
        } else {
            // 2014-03-03 李经锐修改 网上订单现场支付
            if (param1 != null) {
                String[] pn = param1.split(",");
                st.setIsettlementid(pn[0].toString());
            } else {
                st.setIsettlementid("00");
            }

        }
        st.setMsettlementmoney(new Double(t_order.getZfmont()));
        st.setIversion(new Long(1));
        return st;
    }

    public Stssalesvoucherdetailstab savetStssalesvoucherdetailstab(
            Stssalesvouchertab s, T_orderlist tlist) {

        Stssalesvoucherdetailstab sd = new Stssalesvoucherdetailstab();
        StssalesvoucherdetailstabId sdid = new StssalesvoucherdetailstabId();
        sdid.setIsalesvoucherdetailsid(new Long(tlist.getOrderlistid()));
        sdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
        sdid.setIticketstationid(s.getId().getIticketstationid());
        sd.setId(sdid);

        sd.setIticketwinid(s.getIticketwinid());
        sd.setIcrowdkindpriceid(new Long(tlist.getIcrowdkindpriceid()));
        sd.setItickettypeid(new Long(tlist.getItickettypeid()));
        sd.setIplayerperticket(new Long(1));// 人/张
        sd.setIticketnum(new Long(1));// 张数
        sd.setIticketplayer(new Long(1));// 人次
        sd.setDtstartdate(tlist.getDtstartdate());
        sd.setDtenddate(tlist.getDtenddate());
        sd.setIstartid(new Long(0));
        sd.setIendid(new Long(0));
        sd.setSzstartserial("0");
        sd.setSzendserial("0");

        if (tlist.getIoffersschemeid() != null
                && !tlist.getIoffersschemeid().equals("")
                && !tlist.getIoffersschemeid().equals("null")
                && !tlist.getIoffersschemeid().equals("NULL")) {
            sd.setIoffersschemeid(new Long(tlist.getIoffersschemeid()));
        } else {
            sd.setIoffersschemeid(new Long(0));
        }

        sd.setIamount(new Long(tlist.getNumb()));
        sd.setIpresentnums(new Long(0));
        sd.setIderatenums(new Long(tlist.getYhnumb()));
        sd.setIfactnum(new Long(0));
        sd.setIuseablenessnum(new Long(tlist.getNumb()));// 使用数量
        sd.setMactualsaleprice(new Double(tlist.getPric()));// 实际售价
        sd.setMeventmoney(new Double(tlist.getAmnt()));// 实际发生金额
        sd.setMderatemoney(new Double(tlist.getYhamnt()));// 减免金额
        sd.setMpresentmoney(new Double(0));// 赠送金额
        sd.setMnominalfee(new Double(0));// 工本费
        sd.setMdeposit(new Double(0));
        sd.setMhandcharge(new Double(0));
        sd.setByconsumetype("00");
        sd.setIconsumenum(new Double(0));
        sd.setMtotalamount(new Double(tlist.getAmnt()));
        sd.setItotalnumber(new Long(tlist.getNumb()));
        sd.setItotalminutes(new Long(0));
        sd.setByisout(new Long(0));
        sd.setDtmakedate(Tools.getDayTimes());
        sd.setIversion(new Long(0));

        return sd;
    }

    public List SavetStscomticketsalesdetailstab(List zdetaillist,
                                                 Stssalesvouchertab s, T_orderlist tlist, List listzorder) {
        int yxq = 1;
        Edmticketproduct et = (Edmticketproduct) timeSharingDao.get(
                Edmticketproduct.class, new Long(tlist.getItickettypeid()));
        if (et == null) {
            yxq = 0;
        } else {
            if (et.getInoteger1() == null || et.getInoteger1() == 0) {
                yxq = 0;
            }
        }

        for (int i = 0; i < listzorder.size(); i++) {
            T_zorderlist zlist = (T_zorderlist) listzorder.get(i);

            if (zlist.getOrderlistid().equals(tlist.getOrderlistid())) {

                Stscomticketsalesdetailstab zstd = new Stscomticketsalesdetailstab();
                StscomticketsalesdetailstabId zstdid = new StscomticketsalesdetailstabId();
                zstdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
                zstdid.setIticketstationid(s.getId().getIticketstationid());
                zstdid.setIsalesvoucherdetailsid(new Long(zlist
                        .getOrderlistid()));
                zstdid.setIcomticketsalesdetailsid(new Long(zlist
                        .getZorderlistid()));
                zstd.setId(zstdid);
                zstd.setIcrowdkindpriceid(new Long(zlist.getIcrowdkindpriceid()));
                zstd.setItickettypeid(new Long(zlist.getItickettypeid()));
                zstd.setIztickettypeid(new Long(zlist.getIztickettypeid()));
                zstd.setTripid(new Long(zlist.getTripid()));
                zstd.setMhandcharge(new Double(0));
                zstd.setDtmakedate(Tools.getDayTimes());
                zstd.setIvenueareaid(new Long(zlist.getIvenueareaid()));
                zstd.setIvenueid(new Long(zlist.getIvenueid()));
                zstd.setIvenueseatsid(new Long(zlist.getIvenueseatsid()));

                /**
                 * 判断产品是按子产品自己有效期还是套票有效期
                 */
                if (zstd.getTripid().longValue() > 0) {
                    zstd.setDtstartdate(zlist.getDtstartdate());
                    zstd.setDtenddate(zlist.getDtenddate());
                } else {
                    if (yxq == 0) {
                        if (tlist.getDtstartdate().length() > 10) {
                            zstd.setDtstartdate(tlist.getDtstartdate());
                            zstd.setDtenddate(tlist.getDtenddate());
                        } else {
                            zstd.setDtstartdate(tlist.getDtstartdate()
                                    + " 00:00:00");
                            zstd.setDtenddate(tlist.getDtenddate()
                                    + " 23:59:59");
                        }
                    } else {

                        if (zlist.getDtstartdate().length() > 10) {

                            zstd.setDtstartdate(zlist.getDtstartdate());
                            zstd.setDtenddate(zlist.getDtenddate());
                        } else {
                            zstd.setDtstartdate(zlist.getDtstartdate()
                                    + " 00:00:00");
                            zstd.setDtenddate(zlist.getDtenddate()
                                    + " 23:59:59");
                        }
                    }
                }

                Edmtickettypetab eticket = (Edmtickettypetab) this.timeSharingDao
                        .get(Edmtickettypetab.class,
                                new Long(tlist.getItickettypeid()));
                if (eticket != null && eticket.getInt1() != null
                        && eticket.getInt1() == 1) {
                    // 有效开始时间已当前时间开始
                    if(zstd.getDtstartdate().substring(0,10).equals(Tools.getDays())){
                        String nowtime=Tools.getNowTime();
                        zstd.setDtstartdate(zstd.getDtstartdate().substring(0,10)+" "+nowtime);
                        zstd.setDtenddate(Tools.getDate(zstd.getDtenddate().substring(0,10), 1) + " "
                                + nowtime);
                    }else{
                        zstd.setDtstartdate(zstd.getDtstartdate().substring(0,10)+" 00:00:00");
                        zstd.setDtenddate(zstd.getDtenddate().substring(0,10) + " 23:59:59");
                    }

                }

                zstd.setIversion(new Long(0));
                zstd.setIsplitamount(new Long(zlist.getZnumb()));
                zstd.setMsplitprice(new Double(zlist.getZpric()));
                zstd.setMsplitmoney(new Double(zlist.getZamnt()));
                zstd.setIderatenums(new Long(zlist.getZyhnumb()));
                zstd.setMderatemoney(new Double(zlist.getZyhamnt()));
                zstd.setSeatsid(zlist.getSeats());
                
                //add by koka on 20170729
                zstd.setTimeStart(tlist.getStarttime());
                zstd.setTimeEnd(tlist.getEndtime());
               /* zstd.setTimeId(tlist);*/

                zdetaillist.add(zstd);
            }
        }

        return zdetaillist;
    }

    // 李进增加方法 getICID
    public ResultBean getICID(String typeid, Long id) {

        IICcardService ICcardService = (IICcardService) SpringUtil
                .getBean("iICcardService");
        // 01--票类,02--业务,03--人群,04--售票窗,05--售票员
        String rc_id = ICcardService.getICID(typeid, id);
        ResultBean rs = new ResultBean();
        if (rc_id == null || rc_id.equals("")) {

            rs.setColumnCount(2);
            rs.setColumnNames(new String[] { "returnstats", "message" });
            rs.addRow(new String[] { "false", "没有找到对应的ICID" });
        } else {
            rs.setColumnCount(2);
            rs.setColumnNames(new String[] { "returnstats", "message" });
            rs.addRow(new String[] { "true", rc_id });
        }
        return rs;
    }

    /**
     *
     * Describe:网上订单保存时 预制票 操作个人结存明细表
     *
     * @auth:lijingrui
     * @param empid
     * @param iserial
     * @param iscenicid
     * @param itickettypeid
     * @param amount
     *            return:void Date:2012-8-30
     */
    public boolean checkEditIompersonHouse(Long empid, String[] iserial,
                                           Long iscenicid, Long itickettypeid, Long amount) {
        try {

            // 取出票号规则
            String sql = " from Edmticketnoruletab rule where rule.byisuse=1 and rule.iscenicid="
                    + iscenicid;
            List list = timeSharingDao.find(sql);
            Edmticketnoruletab ticketrule = null;
            if (list != null && list.size() > 0) {
                ticketrule = (Edmticketnoruletab) list.get(0);
            } else {
                return true;
            }

            String startserial = null;
            String endserial = null;
            Long startnum = null; // 开始票号流水号
            Long endnum = null;

            // 思路：传过来的票号是没有分票段的，只能先获取最小、最大的票号，然后根据最小票号的流水号和数量来计算出可能出现的截止票号的流水号
            // 根据获取到的最大票号的流水号与计算出的截止票号的流水号作对比
            // 如果相等 那么传过来的票段好是连续的，可以直接删除 如果不相等，那么循环查询出现连续票的段落，一段一段的修改或者删除。
            String onecode = iserial[0];
            String endcode = iserial[iserial.length - 1];

            startserial = onecode.substring(
                    ticketrule.getIntons2()
                            + ticketrule.getItickettypecodepos(),
                    ticketrule.getIntons2()
                            + ticketrule.getItickettypecodepos()
                            + ticketrule.getIserialnolen());
            endserial = endcode.substring(
                    ticketrule.getIntons2()
                            + ticketrule.getItickettypecodepos(),
                    ticketrule.getIntons2()
                            + ticketrule.getItickettypecodepos()
                            + ticketrule.getIserialnolen());
            if (ticketrule.getIntons1() != null && ticketrule.getIntons1() == 1) {
                startnum = Long.parseLong(startserial);
                endnum = Long.parseLong(endserial);
            } else {
                startnum = Tools.Text36ToConvert(startserial);
                endnum = Long.parseLong(endserial);
            }
            Long detailnum = startnum + amount - 1;// 计算出顺序下的流水号（十进制）

            // 获取到的最大票号的流水号与计算出的截止票号的流水号相等
            if (detailnum.toString().equals(endnum.toString())) {

                // 取出个人结存明细列表
                String ksql = " from Iompersonalticketdetails where itickettypeid="
                        + itickettypeid
                        + " and ireceiverid="
                        + empid
                        + " and istartserial<="
                        + startnum
                        + " and iendserial>=" + endnum;
                List perDetail = timeSharingDao.find(ksql);
                if (perDetail != null && perDetail.size() > 1) {
                    return true;
                } else if (perDetail == null || perDetail.size() < 1) {

                    for (int x = 0; x < iserial.length; x++) {
                        String startcode = iserial[x];
                        String oneserial = null;
                        Long onenum = null;
                        if (list != null && list.size() > 0) {
                            oneserial = startcode.substring(
                                    ticketrule.getIntons2()
                                            + ticketrule
                                            .getItickettypecodepos(),
                                    ticketrule.getIntons2()
                                            + ticketrule
                                            .getItickettypecodepos()
                                            + ticketrule.getIserialnolen());

                            if (ticketrule.getIntons1() != null
                                    && ticketrule.getIntons1() == 1) {
                                onenum = Long.parseLong(oneserial);
                            } else {
                                onenum = Tools.Text36ToConvert(oneserial);
                            }

                        }

                        // 取出个人结存明细列表
                        String msql = " from Iompersonalticketdetails where itickettypeid="
                                + itickettypeid
                                + " and ireceiverid="
                                + empid
                                + " and istartserial<="
                                + onenum
                                + " and iendserial>=" + onenum;
                        List detalist = timeSharingDao.find(msql);
                        if (detalist != null && detalist.size() > 0) {
                            boolean b = false; // 循环个人结存明细列表，判断传参进来的起始票号
                            for (int i = 0; i < detalist.size(); i++) {
                                Iompersonalticketdetails details = (Iompersonalticketdetails) detalist
                                        .get(i);
                                if (startcode.equals(details
                                        .getSzstartticketcode())) { // 个人明细起始票号与参数起始票号做比较
                                    if (startcode.equals(details
                                            .getSzendticketcode())) { // 个人明细截止票号与参数截止票号做比较
                                        timeSharingDao.delete(details);
                                        b = true;
                                        break;
                                    } else {
                                        details.setSzstartticketcode(this
                                                .showViewendcode(itickettypeid,
                                                        startcode, 2L, empid));
                                        details.setIstartserial(onenum + 1L);
                                        details.setIamount(details.getIamount() - 1);
                                        timeSharingDao.update(details);
                                        b = true;
                                        break;
                                    }
                                } else if (startcode.equals(details
                                        .getSzendticketcode())) { // 个人明细截止票号与参数截止票号做比较
                                    details.setSzendticketcode(this
                                            .showViewendcode(itickettypeid,
                                                    startcode, 0L, empid));
                                    details.setIendserial(onenum - 1L);
                                    details.setIamount(details.getIamount() - 1);
                                    timeSharingDao.update(details);
                                    b = true;
                                    break;
                                }
                                if (!b) {
                                    Iompersonalticketdetails detail = new Iompersonalticketdetails();
                                    detail.setSzstartticketcode(this
                                            .showViewendcode(itickettypeid,
                                                    startcode, 2L, empid));

                                    Long maxid = timeSharingDao.getMaxPk(
                                            "idetailsid",
                                            "Iompersonalticketdetails") + 1L;
                                    detail.setIdetailsid(maxid);
                                    detail.setItickettypeid(itickettypeid);
                                    detail.setIreceiverid(empid);
                                    detail.setSzendticketcode(details
                                            .getSzendticketcode());
                                    Long serial = onenum;
                                    detail.setIstartserial(serial + 1L);
                                    detail.setIendserial(details
                                            .getIendserial());
                                    detail.setIamount(details.getIendserial()
                                            - serial);
                                    timeSharingDao.save(detail);

                                    details.setSzendticketcode(this
                                            .showViewendcode(itickettypeid,
                                                    startcode, 0L, empid));
                                    Long startial = onenum;
                                    details.setIendserial(startial - 1L);
                                    details.setIamount(startial
                                            - details.getIstartserial());
                                    timeSharingDao.update(details);
                                    break;
                                }
                            }
                        }
                    }

                } else {
                    Iompersonalticketdetails staDetail = (Iompersonalticketdetails) perDetail
                            .get(0);
                    if (onecode.equals(staDetail.getSzstartticketcode())) { // 个人明细起始票号与参数起始票号做比较
                        if (endcode.equals(staDetail.getSzendticketcode())) { // 个人明细截止票号与参数截止票号做比较
                            timeSharingDao.delete(staDetail);
                        } else {
                            staDetail.setSzstartticketcode(this
                                    .showViewendcode(itickettypeid, endcode,
                                            2L, empid));
                            staDetail.setIstartserial(endnum + 1L);
                            staDetail.setIamount(staDetail.getIamount()
                                    - amount);
                            timeSharingDao.update(staDetail);
                        }
                    } else if (endcode.equals(staDetail.getSzendticketcode())) {
                        staDetail.setSzendticketcode(this.showViewendcode(
                                itickettypeid, onecode, 0L, empid));
                        Long startial = startnum;
                        staDetail.setIendserial(startial - 1L);
                        staDetail.setIamount(startial
                                - staDetail.getIstartserial());
                        timeSharingDao.update(staDetail);
                    } else {

                        Iompersonalticketdetails detail = new Iompersonalticketdetails();
                        detail.setSzstartticketcode(this.showViewendcode(
                                itickettypeid, endcode, 2L, empid));
                        detail.setIdetailsid(timeSharingDao.getMaxPk("idetailsid",
                                "Iompersonalticketdetails") + 1);
                        detail.setItickettypeid(itickettypeid);
                        detail.setIreceiverid(empid);
                        detail.setSzendticketcode(staDetail
                                .getSzendticketcode());
                        Long serial = endnum;
                        detail.setIstartserial(serial + 1L);
                        detail.setIendserial(staDetail.getIendserial());
                        detail.setIamount(staDetail.getIendserial() - serial);
                        timeSharingDao.save(detail);

                        staDetail.setSzendticketcode(this.showViewendcode(
                                itickettypeid, onecode, 0L, empid));
                        Long startial = startnum;
                        staDetail.setIendserial(startial - 1L);
                        staDetail.setIamount(startial
                                - staDetail.getIstartserial());
                        timeSharingDao.update(staDetail);

                    }

                    // 短信公告提醒
                    // 获取售票员手中票的数量与系统参数中设置的数量做对比 不足 添加站内公告信息
                    Edmtickettypetab edmtick = (Edmtickettypetab) this.timeSharingDao
                            .get(Edmtickettypetab.class, itickettypeid);
                    String ksql1 = "select sum(ps.iamount) as iamount from Iompersonalticketdetails ps where ps.itickettypeid="
                            + itickettypeid + " and ps.ireceiverid=" + empid;
                    List mounList = this.timeSharingDao.find(ksql1);
                    if (mounList != null && mounList.size() > 0) {
                        Long numberount = (Long) mounList.get(0);
                        String sysql1 = "select sys1.pmvb as pmvb from Sysparv5 sys1 where sys1.id.pmky='REMD' and sys1.id.pmcd='0001' ";
                        List pmvList = this.timeSharingDao.find(sysql1);
                        if (pmvList != null && pmvList.size() > 0) {
                            Long pmvb = Long.parseLong(pmvList.get(0)
                                    .toString());

                            if (numberount != null && pmvb != null
                                    && numberount < pmvb) {
                                Webinfotab webinfo = new Webinfotab();
                                Long maxid = this.timeSharingDao.getMaxPk("seq",
                                        "Webinfotab");
                                webinfo.setSeq(maxid + 1);
                                webinfo.setIemployeeid(empid);
                                webinfo.setIhadder(empid);
                                webinfo.setSzmemo(edmtick.getSztickettypename()
                                        + "剩余数量：" + numberount);
                                webinfo.setReminddate(Tools.getDayTimes());
                                this.timeSharingDao.save(webinfo);
                            }

                            if (numberount == null || numberount.equals("")) {
                                Webinfotab webinfo = new Webinfotab();
                                Long maxid = this.timeSharingDao.getMaxPk("seq",
                                        "Webinfotab");
                                webinfo.setSeq(maxid + 1);
                                webinfo.setIemployeeid(empid);
                                webinfo.setIhadder(empid);
                                webinfo.setSzmemo(edmtick.getSztickettypename()
                                        + "已售完,请重新领取!");
                                webinfo.setReminddate(Tools.getDayTimes());
                                this.timeSharingDao.save(webinfo);
                            }
                        }

                    } else {
                        Webinfotab webinfo = new Webinfotab();
                        Long maxid = this.timeSharingDao.getMaxPk("seq",
                                "Webinfotab");
                        webinfo.setSeq(maxid + 1);
                        webinfo.setIemployeeid(empid);
                        webinfo.setIhadder(empid);
                        webinfo.setSzmemo(edmtick.getSztickettypename()
                                + "已售完,请重新领取!");
                        webinfo.setReminddate(Tools.getDayTimes());
                        this.timeSharingDao.save(webinfo);
                    }

                }

            } else {// 获取到的最大票号的流水号与计算出的截止票号的流水号不相等
                int bs = 0;

                for (int z = 0; z < iserial.length; z++) {
                    startnum = null;
                    endnum = null;

                    String startcode = iserial[z];
                    // 开始流水号
                    String startcodeserial = startcode.substring(
                            ticketrule.getIntons2()
                                    + ticketrule.getItickettypecodepos(),
                            ticketrule.getIntons2()
                                    + ticketrule.getItickettypecodepos()
                                    + ticketrule.getIserialnolen());
                    String endcodes = "";
                    String endcodesserial = "";
                    if (z < iserial.length - 1) {
                        endcodes = iserial[z + 1];
                        endcodesserial = endcodes.substring(
                                ticketrule.getIntons2()
                                        + ticketrule.getItickettypecodepos(),
                                ticketrule.getIntons2()
                                        + ticketrule.getItickettypecodepos()
                                        + ticketrule.getIserialnolen());
                    }

                    if (ticketrule.getIntons1() != null
                            && ticketrule.getIntons1() == 1) {
                        startnum = Long.parseLong(startcodeserial);
                        if (!endcodesserial.equals("")
                                && endcodesserial != null) {
                            endnum = Long.parseLong(endcodesserial);
                        }
                    } else {
                        startnum = Tools.Text36ToConvert(startcodeserial);
                        if (!endcodesserial.equals("")
                                && endcodesserial != null) {
                            endnum = Tools.Text36ToConvert(endcodesserial);
                        }
                    }

                    Long loadnum = startnum + 1;// 计算出顺序下的流水号（十进制）
                    if (endnum != null
                            && loadnum.toString().equals(endnum.toString())) {
                        bs++;
                        continue;
                    } else {
                        String strcode = iserial[z - bs]; // 开始票号
                        // 开始流水号
                        String serial1 = strcode.substring(
                                ticketrule.getIntons2()
                                        + ticketrule.getItickettypecodepos(),
                                ticketrule.getIntons2()
                                        + ticketrule.getItickettypecodepos()
                                        + ticketrule.getIserialnolen());
                        // 截止流水号
                        String serial2 = startcode.substring(
                                ticketrule.getIntons2()
                                        + ticketrule.getItickettypecodepos(),
                                ticketrule.getIntons2()
                                        + ticketrule.getItickettypecodepos()
                                        + ticketrule.getIserialnolen());
                        if (ticketrule.getIntons1() != null
                                && ticketrule.getIntons1() == 1) {
                            startnum = Long.parseLong(serial1);
                            endnum = Long.parseLong(serial2);
                        } else {
                            startnum = Tools.Text36ToConvert(serial1);
                            endnum = Tools.Text36ToConvert(serial2);
                        }
                        // 取出个人结存明细列表
                        String msql = " from Iompersonalticketdetails where itickettypeid="
                                + itickettypeid
                                + " and ireceiverid="
                                + empid
                                + " and istartserial<="
                                + startnum
                                + " and iendserial>=" + endnum;
                        List detailList = timeSharingDao.find(msql);
                        if (detailList != null && detailList.size() > 1) {
                            return true;
                        } else if (detailList == null || detailList.size() < 1) {

                            // for (int v = bs - 1; v > 0; v--) {
                            // String code = iserial[z-v]; // 票号
                            for (int v = z - bs; v <= z; v++) {
                                String code = iserial[v]; // 票号
                                Long onenum = null;
                                // 开始流水号
                                String codeial = code
                                        .substring(
                                                ticketrule.getIntons2()
                                                        + ticketrule
                                                        .getItickettypecodepos(),
                                                ticketrule.getIntons2()
                                                        + ticketrule
                                                        .getItickettypecodepos()
                                                        + ticketrule
                                                        .getIserialnolen());
                                if (ticketrule.getIntons1() != null
                                        && ticketrule.getIntons1() == 1) {
                                    onenum = Long.parseLong(codeial);
                                } else {
                                    onenum = Tools.Text36ToConvert(codeial);
                                }

                                // 取出个人结存明细列表
                                String vsql = " from Iompersonalticketdetails where itickettypeid="
                                        + itickettypeid
                                        + " and ireceiverid="
                                        + empid
                                        + " and istartserial<="
                                        + onenum + " and iendserial>=" + onenum;
                                List detalist = timeSharingDao.find(vsql);
                                if (detalist != null && detalist.size() > 0) {
                                    boolean b = false; // 循环个人结存明细列表，判断传参进来的起始票号
                                    for (int i = 0; i < detalist.size(); i++) {
                                        Iompersonalticketdetails details = (Iompersonalticketdetails) detalist
                                                .get(i);
                                        if (code.equals(details
                                                .getSzstartticketcode())) { // 个人明细起始票号与参数起始票号做比较
                                            if (code.equals(details
                                                    .getSzendticketcode())) { // 个人明细截止票号与参数截止票号做比较
                                                timeSharingDao.delete(details);
                                                b = true;
                                                break;
                                            } else {
                                                details.setSzstartticketcode(this
                                                        .showViewendcode(
                                                                itickettypeid,
                                                                code, 2L, empid));
                                                details.setIstartserial(onenum + 1L);
                                                details.setIamount(details
                                                        .getIamount() - 1);
                                                timeSharingDao.update(details);
                                                b = true;
                                                break;
                                            }
                                        } else if (code.equals(details
                                                .getSzendticketcode())) { // 个人明细截止票号与参数截止票号做比较
                                            details.setSzendticketcode(this
                                                    .showViewendcode(
                                                            itickettypeid,
                                                            code, 0L, empid));
                                            details.setIendserial(onenum - 1L);
                                            details.setIamount(details
                                                    .getIamount() - 1);
                                            timeSharingDao.update(details);
                                            b = true;
                                            break;
                                        }
                                        if (!b) {
                                            Iompersonalticketdetails detail = new Iompersonalticketdetails();
                                            detail.setSzstartticketcode(this
                                                    .showViewendcode(
                                                            itickettypeid,
                                                            code, 2L, empid));

                                            Long maxid = timeSharingDao.getMaxPk(
                                                    "idetailsid",
                                                    "Iompersonalticketdetails") + 1L;
                                            detail.setIdetailsid(maxid);
                                            detail.setItickettypeid(itickettypeid);
                                            detail.setIreceiverid(empid);
                                            detail.setSzendticketcode(details
                                                    .getSzendticketcode());
                                            Long serial = onenum;
                                            detail.setIstartserial(serial + 1L);
                                            detail.setIendserial(details
                                                    .getIendserial());
                                            detail.setIamount(details
                                                    .getIendserial() - serial);
                                            timeSharingDao.save(detail);

                                            details.setSzendticketcode(this
                                                    .showViewendcode(
                                                            itickettypeid,
                                                            code, 0L, empid));
                                            Long startial = onenum;
                                            details.setIendserial(startial - 1L);
                                            details.setIamount(startial
                                                    - details.getIstartserial());
                                            timeSharingDao.update(details);
                                            break;
                                        }
                                    }
                                }

                            }

                        } else {
                            Iompersonalticketdetails staDetail = (Iompersonalticketdetails) detailList
                                    .get(0);
                            if (strcode
                                    .equals(staDetail.getSzstartticketcode())) { // 个人明细起始票号与参数起始票号做比较
                                if (startcode.equals(staDetail
                                        .getSzendticketcode())) { // 个人明细截止票号与参数截止票号做比较
                                    timeSharingDao.delete(staDetail);
                                } else {
                                    staDetail.setSzstartticketcode(this
                                            .showViewendcode(itickettypeid,
                                                    startcode, 2L, empid));
                                    staDetail.setIstartserial(endnum + 1L);
                                    staDetail.setIamount(staDetail.getIamount()
                                            - bs - 1);
                                    timeSharingDao.update(staDetail);
                                }
                            } else if (startcode.equals(staDetail
                                    .getSzendticketcode())) {
                                staDetail.setSzendticketcode(this
                                        .showViewendcode(itickettypeid,
                                                strcode, 0L, empid));
                                Long startial = startnum;
                                staDetail.setIendserial(startial - 1L);
                                staDetail.setIamount(startial
                                        - staDetail.getIstartserial());
                                timeSharingDao.update(staDetail);
                            } else {
                                Iompersonalticketdetails detail = new Iompersonalticketdetails();
                                detail.setSzstartticketcode(this
                                        .showViewendcode(itickettypeid,
                                                startcode, 2L, empid));
                                Long maxid = timeSharingDao.getMaxPk("idetailsid",
                                        "Iompersonalticketdetails") + 1L;
                                detail.setIdetailsid(maxid);
                                detail.setItickettypeid(itickettypeid);
                                detail.setIreceiverid(empid);
                                detail.setSzendticketcode(staDetail
                                        .getSzendticketcode());
                                Long serial = endnum;
                                detail.setIstartserial(serial + 1L);
                                detail.setIendserial(staDetail.getIendserial());
                                detail.setIamount(staDetail.getIendserial()
                                        - serial);
                                timeSharingDao.save(detail);

                                staDetail.setSzendticketcode(this
                                        .showViewendcode(itickettypeid,
                                                strcode, 0L, empid));
                                Long startial = startnum;
                                staDetail.setIendserial(startial - 1L);
                                staDetail.setIamount(startial
                                        - staDetail.getIstartserial());
                                timeSharingDao.update(staDetail);
                            }

                            // 短信公告提醒
                            // 获取售票员手中票的数量与系统参数中设置的数量做对比 不足 添加站内公告信息
                            Edmtickettypetab edmtick = (Edmtickettypetab) this.timeSharingDao
                                    .get(Edmtickettypetab.class, itickettypeid);
                            String ksql2 = "select sum(ps.iamount) as iamount from Iompersonalticketdetails ps where ps.itickettypeid="
                                    + itickettypeid
                                    + " and ps.ireceiverid="
                                    + empid;
                            List mounList = this.timeSharingDao.find(ksql2);
                            if (mounList != null && mounList.size() > 0) {
                                Long numberount = (Long) mounList.get(0);
                                String sysql2 = "select sys1.pmvb as pmvb from Sysparv5 sys1 where sys1.id.pmky='REMD' and sys1.id.pmcd='0001' ";
                                List pmvList = this.timeSharingDao.find(sysql2);
                                if (pmvList != null && pmvList.size() > 0) {
                                    Long pmvb = Long.parseLong(pmvList.get(0)
                                            .toString());

                                    if (numberount != null && pmvb != null
                                            && numberount < pmvb) {
                                        Webinfotab webinfo = new Webinfotab();
                                        Long maxid = this.timeSharingDao.getMaxPk(
                                                "seq", "Webinfotab");
                                        webinfo.setSeq(maxid + 1);
                                        webinfo.setIemployeeid(empid);
                                        webinfo.setIhadder(empid);
                                        webinfo.setSzmemo(edmtick
                                                .getSztickettypename()
                                                + "剩余数量：" + numberount);
                                        webinfo.setReminddate(Tools
                                                .getDayTimes());
                                        this.timeSharingDao.save(webinfo);
                                    }

                                    if (numberount == null
                                            || numberount.equals("")) {
                                        Webinfotab webinfo = new Webinfotab();
                                        Long maxid = this.timeSharingDao.getMaxPk(
                                                "seq", "Webinfotab");
                                        webinfo.setSeq(maxid + 1);
                                        webinfo.setIemployeeid(empid);
                                        webinfo.setIhadder(empid);
                                        webinfo.setSzmemo(edmtick
                                                .getSztickettypename()
                                                + "已售完,请重新领取!");
                                        webinfo.setReminddate(Tools
                                                .getDayTimes());
                                        this.timeSharingDao.save(webinfo);
                                    }
                                }

                            } else {
                                Webinfotab webinfo = new Webinfotab();
                                Long maxid = this.timeSharingDao.getMaxPk("seq",
                                        "Webinfotab");
                                webinfo.setSeq(maxid + 1);
                                webinfo.setIemployeeid(empid);
                                webinfo.setIhadder(empid);
                                webinfo.setSzmemo(edmtick.getSztickettypename()
                                        + "已售完,请重新领取!");
                                webinfo.setReminddate(Tools.getDayTimes());
                                this.timeSharingDao.save(webinfo);
                            }

                        }

                        bs = 0;
                    }

                }

            }

        } catch (Exception e) {
            System.out.println("预制票取票出错");
            throw new RuntimeException("运行出错，预制票取票出错");
        }

        return false;

		/*
		 * for (int x = 0; x < iserial.length; x++) { String startcode =
		 * iserial[x]; String startserial = null; Long startnum = null; if (list
		 * != null && list.size() > 0) { ticketrule = (Edmticketnoruletab)
		 * list.get(0); // 取出参数起始流水号 startserial = startcode
		 * .substring(ticketrule.getIntons2() +
		 * ticketrule.getItickettypecodepos(), ticketrule.getIntons2() +
		 * ticketrule.getItickettypecodepos() + ticketrule.getIserialnolen());
		 * 
		 * if (ticketrule.getIntons1() != null && ticketrule.getIntons1() == 1)
		 * { startnum = Long.parseLong(startserial); } else { startnum =
		 * Tools.Text36ToConvert(startserial); }
		 * 
		 * } else { startserial = startcode.substring(6, 12);
		 * 
		 * startnum = Tools.Text36ToConvert(startserial); }
		 * 
		 * // 取出个人结存明细列表 String msql =
		 * " from Iompersonalticketdetails where itickettypeid=" + itickettypeid
		 * + " and ireceiverid=" + empid + " and istartserial<=" + startnum +
		 * " and iendserial>=" + startnum; List perDetail =
		 * timeSharingDao.find(msql); if (perDetail != null && perDetail.size() > 0)
		 * { boolean b = false; // 循环个人结存明细列表，判断传参进来的起始票号 for (int i = 0; i <
		 * perDetail.size(); i++) { Iompersonalticketdetails staDetail =
		 * (Iompersonalticketdetails) perDetail .get(i); if
		 * (startcode.equals(staDetail.getSzstartticketcode())) { //
		 * 个人明细起始票号与参数起始票号做比较 if
		 * (startcode.equals(staDetail.getSzendticketcode())) { //
		 * 个人明细截止票号与参数截止票号做比较 timeSharingDao.delete(staDetail); b = true; break; }
		 * else { staDetail.setSzstartticketcode(this.showViewendcode(
		 * itickettypeid, startcode, 2L, empid));
		 * staDetail.setIstartserial(startnum + 1L);
		 * staDetail.setIamount(staDetail.getIamount() - 1);
		 * timeSharingDao.update(staDetail); b = true; break; } } else if
		 * (startcode.equals(staDetail.getSzendticketcode())) { //
		 * 个人明细截止票号与参数截止票号做比较
		 * staDetail.setSzendticketcode(this.showViewendcode(itickettypeid,
		 * startcode, 0L, empid)); staDetail.setIendserial(startnum - 1L);
		 * staDetail.setIamount(staDetail.getIamount() - 1);
		 * timeSharingDao.update(staDetail); b = true; break; } if (!b) {
		 * Iompersonalticketdetails detail = new Iompersonalticketdetails();
		 * detail.setSzstartticketcode(this.showViewendcode(itickettypeid,
		 * startcode, 2L, empid));
		 * 
		 * Long maxid = timeSharingDao.getMaxPk("idetailsid",
		 * "Iompersonalticketdetails") + 1L; detail.setIdetailsid(maxid);
		 * detail.setItickettypeid(itickettypeid); detail.setIreceiverid(empid);
		 * detail.setSzendticketcode(staDetail.getSzendticketcode()); Long
		 * serial = startnum; detail.setIstartserial(serial + 1L);
		 * detail.setIendserial(staDetail.getIendserial());
		 * detail.setIamount(staDetail.getIendserial() - serial);
		 * timeSharingDao.save(detail);
		 * 
		 * staDetail.setSzendticketcode(this.showViewendcode(itickettypeid,
		 * startcode, 0L, empid)); Long startial = startnum;
		 * staDetail.setIendserial(startial - 1L); staDetail.setIamount(startial
		 * - staDetail.getIstartserial()); timeSharingDao.update(staDetail); break;
		 * } } } }
		 */

    }

    /**
     *
     * Describe:判断IC库存数量
     *
     * @auth:lijingrui
     * @param iscenicid
     *            服务商ID
     * @param ticketpriceid
     *            票价格ID
     * @param count
     *            数量
     * @param tourDate
     *            日期
     * @param userid
     *            售票员编号
     * @param otherParm
     * @return return:String Date:2012-8-31
     */
    public String personCheckoutiaMount(Long iscenicid, Long ticketpriceid,
                                        int count, String tourDate, Long userid, String... otherParm) {
        Edmcrowdkindpricetab edmprice = (Edmcrowdkindpricetab) timeSharingDao.get(
                Edmcrowdkindpricetab.class, ticketpriceid);
        Long ticketid = edmprice.getItickettypeid();
        String sql = "select person.iamount as iamount from Kcpersonalticketdetailstab person where person.ireceiverid="
                + userid + " and person.itickettypeid=" + ticketid;
        List list = this.timeSharingDao.findTopNumb(sql, 1);
        if (list != null && list.size() > 0) {
            Long iamount = (Long) list.get(0);
            if (iamount == null || iamount <= 0) {
                return "0"; // 此票类无库存
            } else {
                if (iamount.intValue() >= count) {
                    return iamount.toString();
                } else {
                    return iamount.toString(); // 数量不足
                }

            }
        } else {
            return "0"; // 此票类无库存
        }

    }

    public ResultBean getsodeprintmanage(Long iscenicid, Long ibusinessid) {
        String sql = " select p.ibusinessid,p.iscenicid ,p.printno,e.szscenicname,b.szbusinessname,v5.pmva as szprintno,p.ordernum from Soderollprintmanage p,Sysparv5 v5,Edmbusinesstab b,Esbscenicareatab e where p.iscenicid="
                + iscenicid
                + " and p.ibusinessid="
                + ibusinessid
                + " and  v5.pmky='PRSZ' and v5.pmcd=p.printno and p.iscenicid=e.iscenicid and p.ibusinessid=b.ibusinessid order by p.ordernum ";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMap(sql);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        ResultBean rs = MapToResultBean.toResultBean(list);
        return rs;
    }

    // 读取指纹信息
    public ResultBean getzhiwen(String carno) {
        ResultBean rs = new ResultBean();
        rs.setColumnCount(1);
        rs.setColumnNames(new String[] { "values" });
        List sstlist = timeSharingDao
                .find("select new map( s.id.szsoldticketid as szsoldticketid,s.id.isalesvoucherdetailsid as isalesvoucherdetailsid,s.id.isalesvoucherid as isalesvoucherid,s.id.iticketstationid as iticketstationid,s.mactualsaleprice as mactualsaleprice,s.byvalidity as byvalidity ,edw.szcrowdkindname as szcrowdkindname,edw.szmemo as szmemo,s.icrowdkindid as icrowdkindid, et.sztickettypename as sztickettypename,s.itickettypeid as itickettypeid,s.ibusinessid as ibusinessid,s.ipartitionsign as ipartitionsign) from Stssoldtickettab s ,Edmtickettypetab et,Edpcrowdkindtab edw where szticketprintno='"
                        + carno
                        + "' and et.itickettypeid=s.itickettypeid and edw.icrowdkindid=s.icrowdkindid");
        if (sstlist == null || sstlist.size() == 0) {
            rs.addRow(new String[] { "" });// 中心服务器无票务信息
        } else {
            Stssoldtickettab stss = new Stssoldtickettab();
            try {
                BeanUtils.populate(stss, (Map) sstlist.get(0));
            } catch (IllegalAccessException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (InvocationTargetException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            StssoldticketattesttabId sttsid = new StssoldticketattesttabId();
            sttsid.setIsalesvoucherdetailsid(stss.getIsalesvoucherdetailsid());
            sttsid.setIsalesvoucherid(stss.getIsalesvoucherid());
            sttsid.setIticketstationid(stss.getIticketstationid());
            sttsid.setSzsoldticketid(stss.getSzsoldticketid());
            Stssoldticketattesttab stset = (Stssoldticketattesttab) timeSharingDao
                    .get(Stssoldticketattesttab.class, sttsid);
            if (stset == null) {
                rs.addRow(new String[] { "" });// 中心服务器无票务信息
            } else {
                rs.addRow(new String[] { stset.getBsfilebinary() });
            }
        }
        return rs;
    }

    /**
     *
     * Describe:预制票退票时，返回到售票员的手中
     *
     * @auth:lijingrui
     * @param returnmodellist
     * @param iscenicid
     * @param iemployeeid
     *            return:void Date:2012-11-15
     */
    public void getWarehouseCheck(List returnmodellist, Long iscenicid,
                                  Long iemployeeid) {

        String hsql = " from Edmticketnoruletab rule where rule.byisuse=1 and rule.iscenicid="
                + iscenicid;
        List rulelist = this.timeSharingDao.find(hsql);
        Edmticketnoruletab ticketrule = null;
        if (rulelist != null && rulelist.size() > 0) {
            ticketrule = (Edmticketnoruletab) rulelist.get(0);
        }

        for (int i = 0; i < returnmodellist.size(); i++) {

            Returnmodel returnmodel = (Returnmodel) returnmodellist.get(i);
            // System.out.println("根据票号读取该售出票信息" +
            // returnmodel.getSzticketprintno());
            List list = timeSharingDao
                    .find("from Stssoldtickettab where szticketprintno='"
                            + returnmodel.getSzticketprintno()
                            + "' order by id.isalesvoucherid desc");
            Stssoldtickettab stssoldtickettab = (Stssoldtickettab) list.get(0);

            Edmtickettypetab edmticket = (Edmtickettypetab) this.timeSharingDao
                    .get(Edmtickettypetab.class,
                            stssoldtickettab.getItickettypeid());
            if (edmticket.getBymaketicketway().equals("01")
                    && (edmticket.getBymediatype().equals("00") || edmticket
                    .getBymediatype().equals("01"))) {
                // 判断是否全退
                List detailList = this.timeSharingDao
                        .find(" from Stssoldticketsubtab st where st.id.isalesvoucherid="
                                + stssoldtickettab.getId().getIsalesvoucherid()
                                + " and st.id.isalesvoucherdetailsid="
                                + stssoldtickettab.getId()
                                .getIsalesvoucherdetailsid()
                                + "  and st.isvalid=1 and st.id.szsoldticketid="
                                + stssoldtickettab.getId().getSzsoldticketid()
                                + " and st.id.iticketstationid="
                                + stssoldtickettab.getId()
                                .getIticketstationid());
                if (detailList != null && detailList.size() > 0) {
                    continue;
                } else {

                    // 流水号
                    String istartserial = returnmodel
                            .getSzticketprintno()
                            .substring(
                                    ticketrule.getIntons2()
                                            + ticketrule
                                            .getItickettypecodepos(),
                                    ticketrule.getIntons2()
                                            + ticketrule
                                            .getItickettypecodepos()
                                            + ticketrule.getIserialnolen());
                    Long lsh = null;
                    if (ticketrule.getIntons1() != null
                            && ticketrule.getIntons1() == 1) {
                        lsh = Long.parseLong(istartserial);
                    } else {
                        lsh = Tools.Text36ToConvert(istartserial);
                    }

                    Iompersonalticketdetails personaldetail = new Iompersonalticketdetails();
                    Long maxid = this.timeSharingDao.getMaxPk("idetailsid",
                            "Iompersonalticketdetails") + 1;
                    personaldetail.setIdetailsid(maxid);
                    personaldetail.setIreceiverid(iemployeeid);
                    personaldetail.setItickettypeid(stssoldtickettab
                            .getItickettypeid());
                    personaldetail.setSzstartticketcode(returnmodel
                            .getSzticketprintno());
                    personaldetail.setSzendticketcode(returnmodel
                            .getSzticketprintno());
                    personaldetail.setIstartserial(lsh);
                    personaldetail.setIendserial(lsh);
                    personaldetail.setIamount(1L);
                    this.timeSharingDao.save(personaldetail);

                }
            } else {
                continue;
            }

        }

    }

    public void getICkupCheck(List returnmodellist, Long iemployeeid) {

        for (int i = 0; i < returnmodellist.size(); i++) {
            Returnmodel returnmodel = (Returnmodel) returnmodellist.get(i);
            List list = timeSharingDao
                    .find("from Stssoldtickettab where szticketprintno='"
                            + returnmodel.getSzticketprintno()
                            + "' order by id.isalesvoucherid desc");
            Stssoldtickettab stssoldtickettab = (Stssoldtickettab) list.get(0);

            Edmtickettypetab edmticket = (Edmtickettypetab) this.timeSharingDao
                    .get(Edmtickettypetab.class,
                            stssoldtickettab.getItickettypeid());
            if (edmticket.getBymaketicketway().equals("01")
                    && !edmticket.getBymediatype().equals("00")
                    && !edmticket.getBymediatype().equals("01")) {

                String psql = "from Kcpersonalticketdetailstab per where per.itickettypeid="
                        + edmticket.getItickettypeid()
                        + " and per.ireceiverid=" + iemployeeid;
                List kcList = this.timeSharingDao.find(psql);
                if (kcList != null && kcList.size() > 0) {
                    Kcpersonalticketdetailstab person = (Kcpersonalticketdetailstab) kcList
                            .get(0);
                    person.setIamount(person.getIamount() + 1L);
                    this.timeSharingDao.update(person);

                } else {
                    Kcpersonalticketdetailstab personal = new Kcpersonalticketdetailstab();
                    Long mdetid = this.timeSharingDao.getMaxPk("idetailsid",
                            "Kcpersonalticketdetailstab");
                    personal.setIdetailsid(mdetid + 1L);
                    personal.setIreceiverid(iemployeeid);
                    personal.setItickettypeid(edmticket.getItickettypeid());
                    personal.setIamount(1L);
                    this.timeSharingDao.save(personal);
                }

            } else {
                continue;
            }
        }
    }

    public void addOrderLog(String orid, Long iscenicid, Long iemployeeid,
                            String yorid) {
        MOrder editmorder = (MOrder) timeSharingDao.get(MOrder.class, orid);// 获取修改的订单
        // 若为空则下次循环

        if (editmorder != null) {

            Orderlog log = new Orderlog();
            log.setLogid(timeSharingDao.getMaxPk("logid", "Orderlog") + 1);
            log.setOrid(yorid);// 原订单编号
            log.setStlg("0158");
            log.setBrief("修改订单");
            log.setNote("");
            log.setLogtype(2l);
            List editlist = timeSharingDao
                    .find("select new map(y.id.orid as orid,y.id.iscenicid as iscenicid,y.dtstartdate as dtstartdate,y.dtenddate as dtenddate,y.pric as pric,y.numb as numb,y.amnt as amnt,e.sztickettypename as sztickettypename,kind.szcrowdkindname as szcrowdkindname,(select substr(z.dtstartdate,0,10) from YZorderlist z where z.id.orderlistid = y.id.orderlistid and z.tripid != 0 and z.id.orid = y.id.orid and z.id.iscenicid = y.id.iscenicid) as wharfdate,(select trip.tripname from YZorderlist z,Trip trip where z.id.orderlistid = y.id.orderlistid and z.tripid != 0 and z.id.orid = y.id.orid and z.id.iscenicid = y.id.iscenicid and z.tripid=trip.tripid) as tripname,(select substr(z.dtstartdate,12,5) from YZorderlist z where z.id.orderlistid = y.id.orderlistid and z.tripid != 0 and z.id.orid = y.id.orid and z.id.iscenicid = y.id.iscenicid) as wharftime,(select v1.ivenueareaname from YZorderlist z,Venuearea v1,Venue v2 where z.id.orderlistid = y.id.orderlistid and z.tripid != 0 and z.id.orid =y.id.orid and z.id.iscenicid = y.id.iscenicid and z.ivenueid=v1.ivenueid and z.ivenueareaid=v1.ivenueareaid and z.ivenueid=v2.ivenueid) as wharfname,provider.szscenicname as szscenicname)  from YOrderlist y,Edmtickettypetab e,Edpcrowdkindtab kind,Esbscenicareatab provider  where kind.icrowdkindid=y.icrowdkindid and  y.id.orid='"
                            + orid
                            + "' and y.id.iscenicid='"
                            + iscenicid
                            + "' and y.itickettypeid=e.itickettypeid  and provider.iscenicid=y.id.iscenicid order by e.sztickettypename,y.dtstartdate,10,11,12,13");
            if (editlist != null && editlist.size() > 0) {
                for (int j = 0; j < editlist.size(); j++) {
                    Map editMap = (Map) editlist.get(j);
                    if (Integer.parseInt(editMap.get("numb").toString()) > 0) {
                        if (log.getNote() != null
                                && !log.getNote().trim().equals("")) {
                            log.setNote(log.getNote() + "</br>");
                        }
                        log.setNote(log.getNote() + "退票&nbsp;&nbsp;");
                    } else if (Integer.parseInt(editMap.get("numb").toString()) < 0) {
                        if (log.getNote() != null
                                && !log.getNote().trim().equals("")) {
                            log.setNote(log.getNote() + "</br>");
                        }
                        log.setNote(log.getNote() + "添加&nbsp;&nbsp;");
                    }
                    log.setNote(log.getNote()
                            + "["
                            + editMap.get("szscenicname").toString()
                            + "]&nbsp;&nbsp;["
                            + editMap.get("sztickettypename").toString()
                            + "]&nbsp;&nbsp;["
                            + editMap.get("szcrowdkindname").toString()
                            + "]&nbsp;&nbsp;"
                            + Math.abs(Integer.parseInt(editMap.get("numb")
                            .toString())) + "张");
                }

            }
            if (log.getNote().length() > 1500) {
                log.setNote(log.getNote().substring(0, 1500) + "...");
            }
            log.setIemployeeid(iemployeeid);
            log.setUsid("");
            log.setLogtype(Long.parseLong("0"));
            log.setLogdatetime(Tools.getDays() + " " + Tools.getNowTime());
            timeSharingDao.save(log);
        } else {
            System.out.println("editmorder== null");
        }

    }

    public ResultBean saveguashi(Long iemployeeid, String szticketprintno) {
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        List list = timeSharingDao
                .find("from Stssoldtickettab where szticketprintno='"
                        + szticketprintno + "' order by dtmakedate desc");
        if (list == null || list.size() == 0) {
            rs.addRow(new String[] { "false", "未找到对应的票务数据" });
        } else {
            Stssoldtickettab st = (Stssoldtickettab) list.get(0);
            if (st.getByvalidity().equals("02")) {
                rs.addRow(new String[] { "false", "该票已挂失" });
            } else if (st.getByvalidity().equals("01")) {
                rs.addRow(new String[] { "false", "该票已全部退订" });
            } else {
                st.setByvalidity("02");
                timeSharingDao.save(st);
                Ticketprintlist t = new Ticketprintlist();
                t.setIemployeeid(iemployeeid);
                StssalesvouchertabId sid = new StssalesvouchertabId();
                sid.setIsalesvoucherid(st.getId().getIsalesvoucherid());
                sid.setIticketstationid(st.getId().getIticketstationid());
                Stssalesvouchertab s = (Stssalesvouchertab) timeSharingDao.get(
                        Stssalesvouchertab.class, sid);
                t.setSzsalesvoucherno(s.getSzsalesvoucherno());
                t.setPrinttype("04");
                t.setSzticketprintno(szticketprintno);
                t.setPrinttime(Tools.getNowString());
                t.setIsok(new Long(1));
                try {
                    Long printid = timeSharingDao.getSequenceId("PRINT_ID");
                    t.setPrintid(printid);
                    timeSharingDao.save(t);
                } catch (Exception e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
                rs.addRow(new String[] { "true", "该票挂失成功" });
            }
        }
        return rs;
    }

    public ResultBean savejiegua(Long iemployeeid, String szticketprintno) {
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        List list = timeSharingDao
                .find("from Stssoldtickettab where szticketprintno='"
                        + szticketprintno + "' order by dtmakedate desc");
        if (list == null || list.size() == 0) {
            rs.addRow(new String[] { "false", "未找到对应的票务数据" });
        } else {
            Stssoldtickettab st = (Stssoldtickettab) list.get(0);
            if (st.getByvalidity().equals("00")) {
                rs.addRow(new String[] { "false", "该票已是有效票" });
            } else {
                st.setByvalidity("00");
                timeSharingDao.save(st);
                Ticketprintlist t = new Ticketprintlist();
                t.setIemployeeid(iemployeeid);
                StssalesvouchertabId sid = new StssalesvouchertabId();
                sid.setIsalesvoucherid(st.getId().getIsalesvoucherid());
                sid.setIticketstationid(st.getId().getIticketstationid());
                Stssalesvouchertab s = (Stssalesvouchertab) timeSharingDao.get(
                        Stssalesvouchertab.class, sid);
                t.setSzsalesvoucherno(s.getSzsalesvoucherno());
                t.setPrinttype("05");
                t.setSzticketprintno(szticketprintno);
                t.setPrinttime(Tools.getNowString());
                t.setIsok(new Long(1));
                try {
                    Long printid = timeSharingDao.getSequenceId("PRINT_ID");
                    t.setPrintid(printid);
                    timeSharingDao.save(t);
                } catch (Exception e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
                rs.addRow(new String[] { "true", "该票解挂成功" });
            }
        }
        return rs;
    }

    public ResultBean saveyanqi(Long iemployeeid, Long iscenicid,
                                Long iticketwinid, String szticketprintno,
                                double iaccountreceivable, double iacceptmoney, double igivechange,
                                String zffs, String szsalesvoucherno, Long maxid)
            throws SQLException {
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        List list = timeSharingDao
                .find("from Stssoldtickettab where szticketprintno='"
                        + szticketprintno
                        + "' order by id.isalesvoucherid desc");
        if (list == null || list.size() == 0) {
            rs.addRow(new String[] { "false", "未找到对应的票务数据" });
            return rs;
        } else {
            Stssoldtickettab sst = (Stssoldtickettab) list.get(0);
            if (sst.getMactualsaleprice() * sst.getIplayerperticket() != iaccountreceivable) {
                rs.addRow(new String[] { "false", "实际收款金额不对" });
                return rs;
            }

            Stssalesvouchertab s = new Stssalesvouchertab();

            s.setIscenicid(iscenicid);
            s.setIticketwinid(iticketwinid);
            s.setIbusinessid(sst.getIbusinessid());
            s.setIhandler(iemployeeid);
            s.setIpayeer(iemployeeid);
            s.setImaker(iemployeeid);
            s.setIauditor(iemployeeid);
            s.setIaccountreceivable(iaccountreceivable);
            s.setIacceptmoney(iacceptmoney);
            s.setIgivechange(igivechange);
            String today = Tools.getDays();
            String daytime = Tools.getDayTimes();
            s.setIyear(new Long(today.substring(0, 4)));
            s.setImonth(new Long(today.substring(5, 7)));
            s.setIday(new Long(today.substring(8, 10)));
            s.setDtmakedate(daytime);
            s.setDtauditdate(today);
            s.setUsid(sst.getUsid());
            s.setDyusid(sst.getDyusid());
            s.setBisintegral(new Long(0));
            s.setByprintinvoice(new Long(0));
            s.setBysplitway(new Long(2));
            s.setBisreturn(new Long(1));
            s.setBysalesvouchertype("01");
            s.setBypostrecord(new Long(0));
            s.setBysalesvoucherstate(new Long(1));
            s.setBispay(new Long(0));
            s.setBispayee(new Long(0));
            Esbticketwintab e = (Esbticketwintab) timeSharingDao.get(
                    Esbticketwintab.class, s.getIticketwinid());
            StssalesvouchertabId id = new StssalesvouchertabId();
            id.setIticketstationid(e.getIticketstationid());

            id.setIsalesvoucherid(maxid);
            s.setId(id);
            s.setSzsalesvoucherno(szsalesvoucherno);
            timeSharingDao.save(s);
            // 目前结算只有一种方式 （现金）直接生成结算数据
            Stssalessettlementtab st = new Stssalessettlementtab();
            StssalessettlementtabId sid = new StssalessettlementtabId();

            sid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
            sid.setIticketstationid(s.getId().getIticketstationid());
            sid.setIsalessettlementid(new Long(1));
            st.setId(sid);
            st.setSettlementdata(today);
            st.setSettlementtime(daytime.substring(11));
            st.setIsettlementid(zffs);
            st.setMsettlementmoney(iacceptmoney);
            st.setIversion(new Long(1));
            st.setDtmakedate(daytime);
            timeSharingDao.save(st);
            // 读取原销售凭证明细
            StssalesvoucherdetailstabId ydid = new StssalesvoucherdetailstabId();
            ydid.setIsalesvoucherdetailsid(sst.getId()
                    .getIsalesvoucherdetailsid());
            ydid.setIsalesvoucherid(sst.getId().getIsalesvoucherid());
            ydid.setIticketstationid(sst.getId().getIticketstationid());
            Stssalesvoucherdetailstab yd = (Stssalesvoucherdetailstab) timeSharingDao
                    .get(Stssalesvoucherdetailstab.class, ydid);
            // 保存新的销售凭证明细
            Stssalesvoucherdetailstab sd = new Stssalesvoucherdetailstab();
            StssalesvoucherdetailstabId sdid = new StssalesvoucherdetailstabId();
            sdid.setIsalesvoucherdetailsid(new Long(1));
            sdid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
            sdid.setIticketstationid(s.getId().getIticketstationid());
            sd.setId(sdid);
            sd.setIticketwinid(s.getIticketwinid());
            sd.setIcrowdkindpriceid(yd.getIcrowdkindpriceid());
            sd.setItickettypeid(sst.getItickettypeid());
            sd.setIplayerperticket(sst.getIplayerperticket());// 人/张
            sd.setIticketnum(new Long(1));// 张数
            sd.setIticketplayer(sst.getIplayerperticket());// 人次
            // 读取票信息
            Edmtickettypetab ticket = (Edmtickettypetab) timeSharingDao.get(
                    Edmtickettypetab.class, sst.getItickettypeid());

            sd.setDtstartdate(today);
            if (Tools.getDayNumb(today, sst.getDtenddate()) >= 1) {
                // 该票有效期未结束

                String yenddata = sst.getDtenddate();
                String enddata = Tools.getDate(yenddata, ticket
                        .getValidityday().intValue() - 1);
                sst.setDtenddate(Tools.getDate(today, -1));

                sd.setDtenddate(enddata);
            } else {

                String enddata = Tools.getDate(today, ticket.getValidityday()
                        .intValue() - 1);
                sd.setDtenddate(enddata);
            }
            // sd.setDtenddate();
            sd.setIstartid(new Long(0));
            sd.setIendid(new Long(0));
            // 李进修改2012-08-29
            sd.setIoffersschemeid(new Long(0));
            sd.setIamount(new Long(1));
            sd.setIpresentnums(new Long(0));
            sd.setIderatenums(new Long(0));
            sd.setSzstartserial("0");
            sd.setSzendserial("0");
            sd.setIfactnum(new Long(0));
            sd.setIuseablenessnum(sst.getIplayerperticket());// 使用数量
            sd.setMactualsaleprice(yd.getMactualsaleprice());// 实际售价
            sd.setMeventmoney(iaccountreceivable);// 实际发生金额
            sd.setMderatemoney(new Double(0));// 减免金额
            sd.setMpresentmoney(new Double(0));// 赠送金额
            sd.setMnominalfee(new Double(0));// 工本费
            sd.setMdeposit(new Double(0));
            sd.setMhandcharge(new Double(0));
            sd.setByconsumetype("00");
            sd.setIconsumenum(new Double(0));
            sd.setMtotalamount(iaccountreceivable);
            sd.setItotalnumber(sst.getIplayerperticket());// 总次数
            sd.setItotalminutes(new Long(0));
            sd.setByisout(new Long(1));
            sd.setDtmakedate(Tools.getDayTimes());
            sd.setIversion(new Long(0));
            timeSharingDao.save(sd);
            // 保存新的销售凭证子票明细
            List stclist = timeSharingDao
                    .find(" from Stscomticketsalesdetailstab where id.isalesvoucherdetailsid="
                            + yd.getId().getIsalesvoucherdetailsid()
                            + " and id.isalesvoucherid="
                            + yd.getId().getIsalesvoucherid()
                            + " and id.iticketstationid="
                            + yd.getId().getIticketstationid());
            for (int i = 0; i < stclist.size(); i++) {
                Stscomticketsalesdetailstab ystc = (Stscomticketsalesdetailstab) stclist
                        .get(i);
                Stscomticketsalesdetailstab zstd = new Stscomticketsalesdetailstab();
                StscomticketsalesdetailstabId stsid = new StscomticketsalesdetailstabId();
                stsid.setIcomticketsalesdetailsid(ystc.getId()
                        .getIcomticketsalesdetailsid());
                stsid.setIsalesvoucherdetailsid(sd.getId()
                        .getIsalesvoucherdetailsid());
                stsid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
                stsid.setIticketstationid(s.getId().getIticketstationid());
                zstd.setId(stsid);
                zstd.setIcrowdkindpriceid(ystc.getIcrowdkindpriceid());
                zstd.setItickettypeid(ystc.getItickettypeid());
                zstd.setIztickettypeid(ystc.getIztickettypeid());
                zstd.setMhandcharge(new Double(0));
                zstd.setDtmakedate(Tools.getDayTimes());
                zstd.setTripid(new Long(0));
                zstd.setIvenueareaid(new Long(0));
                zstd.setIvenueid(new Long(0));
                zstd.setIvenueseatsid(new Long(0));
                zstd.setDtstartdate(sd.getDtstartdate() + " 00:00:00");
                zstd.setDtenddate(sd.getDtenddate() + " 23:59:59");
                zstd.setIversion(new Long(0));
                zstd.setIsplitamount(yd.getIplayerperticket());
                zstd.setMsplitprice(ystc.getMsplitprice());
                zstd.setMsplitmoney(ystc.getMsplitprice()
                        * yd.getIplayerperticket());
                timeSharingDao.save(zstd);
            }
            // 新的售出门票表
            Stssoldtickettab yst = new Stssoldtickettab();
            StssoldtickettabId ystid = new StssoldtickettabId();
            ystid.setIsalesvoucherdetailsid(sd.getId()
                    .getIsalesvoucherdetailsid());
            ystid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
            ystid.setIticketstationid(s.getId().getIticketstationid());
            ystid.setSzsoldticketid(sst.getId().getSzsoldticketid());
            yst.setId(ystid);
            yst.setIscenicid(s.getIscenicid());
            yst.setIcrowdkindid(sst.getIcrowdkindid());
            yst.setItickettypeid(sd.getItickettypeid());
            yst.setUsid(s.getUsid());
            yst.setIbusinessid(s.getIbusinessid());
            yst.setDyusid(s.getDyusid());
            yst.setIplayerperticket(new Long(1));// 人次数
            yst.setDtstartdate(sd.getDtstartdate());
            yst.setDtenddate(sd.getDtenddate());
            yst.setMhandcharge(new Double(0));
            yst.setByvalidity("00");
            yst.setDtmakedate(s.getDtmakedate());
            yst.setBymaketicketway("00");
            yst.setIserialnum(sst.getIserialnum());
            yst.setSzticketprintno(sst.getSzticketprintno());
            yst.setMremainmoney(new Double(0));
            yst.setMpresentmoney(new Double(0));
            yst.setMactualsaleprice(sd.getMactualsaleprice());
            yst.setIpresentnum(new Long(0));
            yst.setIremainnum(new Long(1));// 剩余数量
            yst.setMnominalfee(new Double(0));
            yst.setMdeposit(new Double(0));
            yst.setByticketpurpose("00");
            yst.setBisrefundbalance(new Long(1));
            yst.setByactivation("02");
            yst.setManyouno(sst.getManyouno());
            yst.setMyzj(sst.getMyzj());
            yst.setZjno1(sst.getZjno1());
            yst.setName1(sst.getName1());
            timeSharingDao.save(yst);
            // 新的售出门票子表
            List sublist = timeSharingDao
                    .find("from Stssoldticketsubtab s where s.id.isalesvoucherid="
                            + sst.getId().getIsalesvoucherid()
                            + " and s.id.iticketstationid="
                            + sst.getId().getIticketstationid()
                            + " and s.id.isalesvoucherdetailsid="
                            + sst.getId().getIsalesvoucherdetailsid()
                            + " and s.id.szsoldticketid="
                            + sst.getId().getSzsoldticketid());
            for (int i = 0; i < sublist.size(); i++) {
                Stssoldticketsubtab sub = (Stssoldticketsubtab) sublist.get(i);
                sub.setDtenddate(sst.getDtenddate() + " 23:59:59");
                if (sub.getIpasstimes() != 0) {
                    throw new RuntimeException("指定次数的入园票不能延期");
                }
                timeSharingDao.save(yst);
                Stssoldticketsubtab nsub = new Stssoldticketsubtab();
                StssoldticketsubtabId nsubid = new StssoldticketsubtabId();
                nsubid.setIsalesvoucherdetailsid(yst.getId()
                        .getIsalesvoucherdetailsid());
                nsubid.setIsalesvoucherid(yst.getId().getIsalesvoucherid());
                nsubid.setIticketstationid(yst.getId().getIticketstationid());
                nsubid.setSzsoldticketid(yst.getId().getSzsoldticketid());
                nsubid.setSzsoldticketsubid(sub.getId().getSzsoldticketsubid());
                nsub.setId(nsubid);
                nsub.setIgardengateid(sub.getIgardengateid());
                nsub.setIscenicid(s.getIscenicid());
                nsub.setItickettypeid(yst.getItickettypeid());
                nsub.setIztickettypeid(sub.getIztickettypeid());
                nsub.setBychecktype(new Long(0));
                nsub.setByconsumemode(sub.getByconsumemode());
                nsub.setIpasstimes(sub.getIpasstimes());
                nsub.setIpassedtimes(sub.getIpassedtimes());
                nsub.setMsingletimes(sub.getMsingletimes());
                nsub.setMpasstimes(sub.getIpasstimes());
                nsub.setMsingledtimes(sub.getMsingledtimes());
                nsub.setMlimitconsume(sub.getMlimitconsume());
                nsub.setMsingleconsume(sub.getMsingleconsume());
                nsub.setMconsumed(sub.getMconsumed());
                nsub.setByisout(new Long(1));
                nsub.setIsvalid(new Long(1));
                nsub.setDtmakedate(Tools.getDayTimes());
                nsub.setBylastcheckdir(new Long(0));
                nsub.setIcrowdkindid(sub.getIcrowdkindid());
                nsub.setTripid(sub.getTripid());
                nsub.setDtbegindate(yst.getDtstartdate() + " 00:00:00");
                nsub.setDtenddate(yst.getDtenddate() + " 23:59:59");
                timeSharingDao.save(nsub);
            }
            // 将指纹数据复制到新票务数据中
            List stestlist = timeSharingDao
                    .find("from Stssoldticketattesttab s where s.id.isalesvoucherid="
                            + sst.getId().getIsalesvoucherid()
                            + " and s.id.iticketstationid="
                            + sst.getId().getIticketstationid()
                            + " and s.id.isalesvoucherdetailsid="
                            + sst.getId().getIsalesvoucherdetailsid()
                            + " and s.id.szsoldticketid="
                            + sst.getId().getSzsoldticketid());
            for (int i = 0; i < stestlist.size(); i++) {
                Stssoldticketattesttab stest = (Stssoldticketattesttab) stestlist
                        .get(i);
                Stssoldticketattesttab nstest = new Stssoldticketattesttab();
                StssoldticketattesttabId nstestid = new StssoldticketattesttabId();
                nstestid.setIsalesvoucherdetailsid(yst.getId()
                        .getIsalesvoucherdetailsid());
                nstestid.setIsalesvoucherid(yst.getId().getIsalesvoucherid());
                nstestid.setIticketstationid(yst.getId().getIticketstationid());
                nstestid.setSzsoldticketid(yst.getId().getSzsoldticketid());
                nstest.setId(nstestid);
                nstest.setBsfilebinary(stest.getBsfilebinary());
                nstest.setByfactregtype(stest.getByfactregtype());
                nstest.setSzidcard(stest.getSzidcard());
                nstest.setSzimagepath(stest.getSzimagepath());
                nstest.setIpartitionsign(stest.getIpartitionsign());
                nstest.setDtmakedate(stest.getDtmakedate());
                nstest.setByisout(stest.getByisout());
                timeSharingDao.save(nstest);

            }
            // 将检票数据复制到新票务数据中
            rs.addRow(new String[] { "true",
                    s.getId().getIsalesvoucherid().toString() });
            return rs;
        }

    }

    public ResultBean savechongzhi(Long iemployeeid, Long iticketwinid,
                                   String szticketprintno) {
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        List list = timeSharingDao
                .find("from Stssoldtickettab where szticketprintno='"
                        + szticketprintno + "' order by dtmakedate desc");
        if (list == null || list.size() == 0) {
            rs.addRow(new String[] { "false", "未找到对应的票务数据" });
        } else {
            Stssoldtickettab st = (Stssoldtickettab) list.get(0);
            if (st.getByvalidity().equals("02")) {
                rs.addRow(new String[] { "false", "该票已挂失" });
            } else {
                Esbticketwintab e = (Esbticketwintab) timeSharingDao.get(
                        Esbticketwintab.class, iticketwinid);
                Esbticketstationtab esbticketstation = (Esbticketstationtab) timeSharingDao
                        .get(Esbticketstationtab.class, e.getIticketstationid());
                Edmtickettypetab edticket = (Edmtickettypetab) timeSharingDao.get(
                        Edmtickettypetab.class, st.getItickettypeid());
                Esbscenicareatab scenic = (Esbscenicareatab) timeSharingDao.get(
                        Esbscenicareatab.class, edticket.getIscenicid());
                List<Map> iserialnumlist = new ArrayList();
                try {
                    iserialnumlist = timeSharingDao
                            .findBySqlToMapnocolsesession("select ticketid_sequence.nextval  from dual");
                } catch (Exception e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
                Long iserialnum = new Long(
                        (((Map) iserialnumlist.get(0)).get("NEXTVAL"))
                                .toString());
                st.setIserialnum(iserialnum);
                String newmaxorno = Tools.ConvertTo36Text(iserialnum, 0);
                StringBuffer printno = new StringBuffer();
                printno.append(e.getSzticketwincode());
                printno.append(scenic.getSzsceniccode());
                printno.append(edticket.getSztickettypecode());
                if (newmaxorno.length() < 6) {
                    for (int b = 0; b < 6 - newmaxorno.length(); b++) {
                        printno.append("0");
                    }
                }
                printno.append(newmaxorno);
                String szprintno = Tools.ticketMakeMd5(printno.toString());
                st.setSzticketprintno(szprintno);
                timeSharingDao.update(st);
            }
        }
        return rs;
    }

    public ResultBean getWinAndStationInfo(Long iscenicid, String mac) {
        String sql = "select  e.iticketwinid,e.iticketstationid,e.szticketwincode,e.szticketwinname,e.dtsellstart,e.dtsellend,e.bywintype,e.isty,es.szstationcode,es.szstationname,es.szcontact,es.szphone,v5.pmva as ftpurl,v5.pmvb as ftppost ,v5.pmvc as ftpusid,v5.pmvd as ftppwd from Esbticketwintab e,Esbticketstationtab es left join Sysparv5 v5 on   v5.pmky='FTTP' and v5.pmcd=to_char(es.iticketstationid) where  e.iscenicid=? and e.szipaddress=? and e.iticketstationid=es.iticketstationid and e.iscenicid=es.iscenicid ";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql, iscenicid, mac);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(list);
    }

    public ResultBean gettickmont(Long icrowdkindpriceid, Long numb, String stdt) {
        ResultBean rs = new ResultBean();
        rs.setColumnCount(3);
        rs.setColumnNames(new String[] { "yhnumb", "yhamnt", "sjmont" });
        Long yhnumb = 0L;
        Double yhamnt = 0D;
        Double sjmont = 0D;
        Double mont = 0D;
        Edmcrowdkindpricetab edmcrowdkindpricetab = (Edmcrowdkindpricetab) timeSharingDao
                .get(Edmcrowdkindpricetab.class, icrowdkindpriceid);
        List edlist = timeSharingDao
                .find(" from Edpofferschemetab where itickettypeid="
                        + edmcrowdkindpricetab.getItickettypeid()
                        + " and ibusinessid="
                        + edmcrowdkindpricetab.getIbusinessid()
                        + " and icrowdkindid="
                        + edmcrowdkindpricetab.getIcrowdkindid()
                        + " and startdata<='" + stdt + "' and enddata>='"
                        + stdt + "' and byisuse=1 and ioffertype=0 ");
        // 根据价格里面的业务，人群 ，产品 查询 对应的 事前人数优惠
        mont = edmcrowdkindpricetab.getMactualsaleprice() * numb;

        if (edlist != null && edlist.size() > 0) {
            Edpofferschemetab edsc = (Edpofferschemetab) edlist.get(0);
            if (numb >= edsc.getImultiples()) {
                yhnumb = (numb / edsc.getImultiples()) * edsc.getIoffernum();
            }
        }
        yhamnt = edmcrowdkindpricetab.getMactualsaleprice() * yhnumb;
        sjmont = mont - yhamnt;
        rs.addRow(new String[] { yhnumb.toString(), yhamnt.toString(),
                sjmont.toString() });
        return rs;
    }

    public ResultBean gettickmont(Long icrowdkindpriceid, Long numb,
                                  String stdt, String... otherParm) {
        ResultBean rs = new ResultBean();
        rs.setColumnCount(3);
        rs.setColumnNames(new String[] { "yhnumb", "yhamnt", "sjmont" });
        Long yhnumb = 0L;
        Double yhamnt = 0D;
        Double sjmont = 0D;
        Double mont = 0D;
        Double mactualsaleprice = 0D;

        Edmcrowdkindpricetab edmcrowdkindpricetab = (Edmcrowdkindpricetab) timeSharingDao
                .get(Edmcrowdkindpricetab.class, icrowdkindpriceid);
        List edlist = timeSharingDao
                .find(" from Edpofferschemetab where itickettypeid="
                        + edmcrowdkindpricetab.getItickettypeid()
                        + " and ibusinessid="
                        + edmcrowdkindpricetab.getIbusinessid()
                        + " and icrowdkindid="
                        + edmcrowdkindpricetab.getIcrowdkindid()
                        + " and startdata<='" + stdt + "' and enddata>='"
                        + stdt + "' and byisuse=1");

        // 2014-06-28 lijingrui修改 获取产品属性中 是否可以自定义价格
        Edmticketproduct tp = (Edmticketproduct) timeSharingDao
                .get(Edmticketproduct.class,
                        edmcrowdkindpricetab.getItickettypeid());
        if (tp != null) {
            if (tp.getInoteger4() != null && tp.getInoteger4() != 0) {
                if (otherParm[0] != null && !otherParm[0].equals("")) {
                    mactualsaleprice = Double.parseDouble(otherParm[0]
                            .toString());
                } else {
                    mactualsaleprice = edmcrowdkindpricetab
                            .getMactualsaleprice();
                }

            } else {
                mactualsaleprice = edmcrowdkindpricetab.getMactualsaleprice();
            }
        } else {
            mactualsaleprice = edmcrowdkindpricetab.getMactualsaleprice();
        }

        // 根据价格里面的业务，人群 ，产品 查询 对应的 事前人数优惠
        mont = mactualsaleprice * numb;

        if (edlist != null && edlist.size() > 0) {
            Edpofferschemetab edsc = (Edpofferschemetab) edlist.get(0);
            if (numb >= edsc.getImultiples()) {
                yhnumb = (numb / edsc.getImultiples()) * edsc.getIoffernum();
            }
        }
        yhamnt = mactualsaleprice * yhnumb;
        System.out.println("====mactualsaleprice:" + mactualsaleprice
                + "    numb：" + numb + "    mont:" + mont + "    yhnumb:"
                + yhnumb + "   yhamnt:" + yhamnt);

        sjmont = mont - yhamnt;
        rs.addRow(new String[] { yhnumb.toString(), yhamnt.toString(),
                sjmont.toString() });
        return rs;
    }

    public ResultBean savetuiding(String mo, String yo, String to, String tl,
                                  String tzl) {

        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        try {

            MOrder morder = new MOrder();
            String morders[] = mo.split("&");
            morder.setOrid(morders[0]);
            morder.setOrtp(morders[1]);// 退订单
            morder.setOrda(morders[2]);
            morder.setOrti(morders[3]);
            morder.setUsid(morders[4]);
            morder.setIsjl(new Long(morders[5]));
            morder.setYhamnt(new Double(morders[6]));
            morder.setMont(new Double(morders[7]));
            morder.setZfmont(new Double(morders[8]));
            morder.setDdzt(morders[9]);
            morder.setIsallcp(new Long(morders[10]));
            morder.setZfusid(morders[11]);
            morder.setTpsx(new Double(morders[12]));
            morder.setTpmont(new Double(morders[13]));
            morder.setTpfs(morders[14]);// 出票后退订
            morder.setSrid(morders[15]);
            morder.setIsc(new Long(morders[16]));
            morder.setTpdate(morders[17]);
            morder.setBankdata(morders[18]);
            morder.setBanktime(morders[19]);
            morder.setNotef(morders[20]);
            morder.setIse(new Long(morders[21]));
            morder.setStdt(morders[22]);
            morder.setIsj(new Long(morders[23]));
            timeSharingDao.save(morder);

            String yorders[] = yo.split("&");
            YOrder yorder = new YOrder();
            YOrderId yid = new YOrderId();
            yid.setOrid(yorders[0]);
            yid.setIscenicid(new Long(yorders[1]));
            yorder.setId(yid);
            yorder.setScenictype(yorders[2]);
            yorder.setDdzt(yorders[3]);
            yorder.setUsid(yorders[4]);
            yorder.setIbusinessid(new Long(yorders[5]));
            yorder.setDtstartdate(yorders[6]);
            yorder.setDtenddate(yorders[7]);
            yorder.setOrhm(yorders[8]);
            yorder.setOrnm(yorders[9]);
            yorder.setOrph(yorders[10]);
            yorder.setOrzj(yorders[11]);
            yorder.setMont(new Double(yorders[12]));
            yorder.setZfmont(new Double(yorders[13]));
            yorder.setYhamnt(new Double(yorders[14]));
            yorder.setTpsx(new Double(yorders[15]));
            yorder.setTpmont(new Double(yorders[16]));
            yorder.setTpdate(yorders[17]);
            yorder.setTpfs(yorders[18]);// 出票后退订
            yorder.setIsc(new Long(yorders[19]));
            yorder.setFempid(yorders[20]);
            yorder.setIse(new Long(yorders[21]));
            yorder.setNoteb(yorders[22]);
            yorder.setNotef(yorders[23]);

            yorder.setIsj(new Long(yorders[24]));
            timeSharingDao.save(yorder);

            String torders[] = to.split("&");
            TOrder tdorder = new TOrder();
            TOrderId tid = new TOrderId();
            tid.setOrid(torders[0]);
            tid.setIscenicid(new Long(torders[1]));
            tdorder.setId(tid);
            tdorder.setScenictype(torders[2]);
            tdorder.setOrfl(torders[3]);
            tdorder.setDdzt(torders[4]);
            tdorder.setIregionalid(new Long(torders[5]));
            tdorder.setUsid(torders[6]);
            tdorder.setIbusinessid(new Long(torders[7]));
            tdorder.setDtstartdate(torders[8]);
            tdorder.setDtenddate(torders[9]);
            tdorder.setOrhm(torders[10]);
            tdorder.setOrnm(torders[11]);
            tdorder.setOrph(torders[12]);
            tdorder.setOrzj(torders[13]);

            tdorder.setMont(new Double(torders[14]));
            tdorder.setZfmont(new Double(torders[15]));
            tdorder.setYhamnt(new Double(torders[16]));
            tdorder.setIsc(new Long(torders[17]));
            tdorder.setNotec(torders[18]);
            tdorder.setIsj(new Long(torders[19]));
            tdorder.setNotej(torders[20]);
            tdorder.setFempid(torders[21]);
            tdorder.setNoteb(torders[22]);
            tdorder.setNotef(torders[23]);
            timeSharingDao.save(tdorder);

            String tlist[] = tl.split("[|]");
            for (int i = 0; i < tlist.length; i++) {
                String torderlists[] = tlist[i].split("&");
                YOrderlist yorderlist = new YOrderlist();
                YOrderlistId ylid = new YOrderlistId();
                ylid.setOrid(torderlists[0]);
                ylid.setOrderlistid(new Long(torderlists[1]));
                ylid.setIscenicid(new Long(torderlists[2]));
                yorderlist.setId(ylid);
                yorderlist.setItickettypeid(new Long(torderlists[3]));
                yorderlist.setIcrowdkindpriceid(new Long(torderlists[4]));
                yorderlist.setIcrowdkindid(new Long(torderlists[5]));
                yorderlist.setDtstartdate(torderlists[6]);
                yorderlist.setDtenddate(torderlists[7]);
                yorderlist.setNumb(new Long(torderlists[8]));
                yorderlist.setPric(new Double(torderlists[9]));
                yorderlist.setAmnt(new Double(torderlists[10]));
                yorderlist.setMhandcharge(new Double(torderlists[11]));
                yorderlist.setYhnumb(new Long(torderlists[12]));
                yorderlist.setYhamnt(new Double(torderlists[13]));
                timeSharingDao.save(yorderlist);
                TOrderlist torderlist = new TOrderlist();
                TOrderlistId tlid = new TOrderlistId();

                tlid.setOrid(torderlists[0]);
                tlid.setOrderlistid(new Long(torderlists[1]));
                tlid.setIscenicid(new Long(torderlists[2]));
                torderlist.setId(tlid);
                torderlist.setItickettypeid(new Long(torderlists[3]));
                torderlist.setIcrowdkindpriceid(new Long(torderlists[4]));
                torderlist.setIcrowdkindid(new Long(torderlists[5]));
                torderlist.setDtstartdate(torderlists[6]);
                torderlist.setDtenddate(torderlists[7]);
                torderlist.setNumb(new Long(torderlists[8]));
                torderlist.setPric(new Double(torderlists[9]));
                torderlist.setAmnt(new Double(torderlists[10]));
                torderlist.setMhandcharge(new Double(torderlists[11]));
                torderlist.setYhnumb(new Long(torderlists[12]));
                torderlist.setYhamnt(new Double(torderlists[13]));
                torderlist.setIsj(new Long(torderlists[14]));
                timeSharingDao.save(torderlist);

            }

            String tzlists[] = tzl.split("[|]");
            for (int i = 0; i < tzlists.length; i++) {

                String tzorderlists[] = tzlists[i].split("&");

                YZorderlist yzlist = new YZorderlist();
                YZorderlistId yzid = new YZorderlistId();

                yzid.setOrid(tzorderlists[0]);
                yzid.setOrderlistid(new Long(tzorderlists[1]));

                yzid.setIscenicid(new Long(tzorderlists[2]));
                yzid.setZorderlistid(new Long(tzorderlists[3]));

                yzlist.setId(yzid);
                yzlist.setIcrowdkindpriceid(new Long(tzorderlists[4]));
                yzlist.setIcrowdkindid(new Long(tzorderlists[5]));
                yzlist.setDtstartdate(tzorderlists[6]);
                yzlist.setDtenddate(tzorderlists[7]);
                yzlist.setItickettypeid(new Long(tzorderlists[8]));
                yzlist.setIztickettypeid(new Long(tzorderlists[9]));
                yzlist.setIvenueid(new Long(tzorderlists[10]));
                yzlist.setIvenueareaid(new Long(tzorderlists[11]));
                yzlist.setIvenueseatsid(new Long(tzorderlists[12]));
                yzlist.setTripid(new Long(tzorderlists[13]));

                yzlist.setZpric(new Double(tzorderlists[14]));

                yzlist.setZamnt(new Double(tzorderlists[15]));

                yzlist.setZnumb(new Long(tzorderlists[16]));
                yzlist.setZyhnumb(new Long(tzorderlists[17]));
                yzlist.setZyhamnt(new Double(tzorderlists[18]));
                yzlist.setSqnumber(new Long(tzorderlists[19]));
                yzlist.setMhandcharge(new Double(tzorderlists[21]));
                yzlist.setTdfl(new Double(tzorderlists[22]));
                timeSharingDao.save(yzlist);

                TZorderlist tzlist = new TZorderlist();
                TZorderlistId tzid = new TZorderlistId();
                tzid.setOrid(tzorderlists[0]);
                tzid.setOrderlistid(new Long(tzorderlists[1]));
                tzid.setIscenicid(new Long(tzorderlists[2]));
                tzid.setZorderlistid(new Long(tzorderlists[3]));
                tzlist.setId(tzid);
                tzlist.setIcrowdkindpriceid(new Long(tzorderlists[4]));
                tzlist.setIcrowdkindid(new Long(tzorderlists[5]));
                tzlist.setDtstartdate(tzorderlists[6]);
                tzlist.setDtenddate(tzorderlists[7]);
                tzlist.setItickettypeid(new Long(tzorderlists[8]));
                tzlist.setIztickettypeid(new Long(tzorderlists[9]));
                tzlist.setIvenueid(new Long(tzorderlists[10]));
                tzlist.setIvenueareaid(new Long(tzorderlists[11]));
                tzlist.setIvenueseatsid(new Long(tzorderlists[12]));
                tzlist.setTripid(new Long(tzorderlists[13]));
                tzlist.setZpric(new Double(tzorderlists[14]));
                tzlist.setZamnt(new Double(tzorderlists[15]));
                tzlist.setZnumb(new Long(tzorderlists[16]));

                tzlist.setZyhnumb(new Long(tzorderlists[17]));
                tzlist.setZyhamnt(new Double(tzorderlists[18]));
                tzlist.setSqnumber(new Long(tzorderlists[19]));
                tzlist.setIsj(new Long(tzorderlists[20]));
                timeSharingDao.save(tzlist);

            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
            rs.addRow(new String[] { "false", e.toString() });
            return rs;
        }
        rs.addRow(new String[] { "true", "" });
        return rs;
    }

    public ResultBean getDaoyou(String lname) {
        List<Map> list = new ArrayList();
        try {
            if (lname.equals("")) {
                list = timeSharingDao
                        .findBySqlToMapnocolsesession("select usid as usid,lname||'('||usid||')' as lname from custom c where c.lgtp='02' and ttlb='02' and status='01'  order by lname");

            } else {
                list = timeSharingDao
                        .findBySqlToMapnocolsesession("select usid as usid,lname||'('||usid||')'  as lname from custom c where c.lgtp='02' and ttlb='02' and status='01'  and lname like '"
                                + lname + "%' order by lname");

            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return MapToResultBean.toResultBean(list);
    }
	@Transactional(propagation=Propagation.REQUIRED,isolation = Isolation.READ_COMMITTED,rollbackFor=Exception.class)
    public void updatestatus(Long accid, String typestatus, Long byisuse) {
        List acclist = timeSharingDao
                .find(" from Esbticketwintab where iticketwinid=" + accid);
        Esbticketwintab acc = (Esbticketwintab) acclist.get(0);
        List stulist = timeSharingDao
                .find(" from Esbaccessstatustab where  istatusgardid="
                        + acc.getIticketwinid() + " and  iscenicid="
                        + acc.getIscenicid() + " and istatuswinid="
                        + acc.getIticketstationid()
                        + " and statusbtype='02' and typestatus='" + typestatus
                        + "'");
        if (stulist == null || stulist.size() == 0) {
            Esbaccessstatustab esbstatus = new Esbaccessstatustab();
            Long seq = timeSharingDao.getMaxPk("seq", "Esbaccessstatustab");
            esbstatus.setSeq(seq + 1);
            esbstatus.setByisuse(byisuse);
            esbstatus.setIscenicid(acc.getIscenicid());
            esbstatus.setIstatusgardid(acc.getIticketwinid());
            esbstatus.setIstatuswinid(acc.getIticketstationid());
            esbstatus.setStatusbtype("02");
            esbstatus.setTypestatus(typestatus);
            esbstatus.setStatusdtime(Tools.getDayTimes());
            timeSharingDao.save(esbstatus);
        } else {
            Esbaccessstatustab esbstatus = (Esbaccessstatustab) stulist.get(0);
            esbstatus.setByisuse(byisuse);
            esbstatus.setStatusdtime(Tools.getDayTimes());
            timeSharingDao.update(esbstatus);
        }
    }

    public ResultBean getT_orderlistty(String orid, Long iscenicid) {
        String sql = "     select orderlistid,CASt(t.orid as varchar(17)) as orid,t.iscenicid,es.szscenicname,t.itickettypeid,t.icrowdkindid,t.dtstartdate,t.dtenddate,t.icrowdkindpriceid,t.pric,t.numb,t.yhnumb,t.amnt,t.yhamnt,et.sztickettypename,ew.szcrowdkindname,et.bymaketicketway,et.bymediatype,v5.pmva as strmaketype,v55.pmva as strmediatype from t_orderlist t,Edpcrowdkindtab ew,Edmtickettypetab et,sysparv5 v5 ,sysparv5 v55,t_order tor,Esbscenicareatab es where  t.orid='"
                + orid
                + "' and tor.ddzt='02'   and t.orid=tor.orid and t.iscenicid=tor.iscenicid and t.iscenicid=es.iscenicid and es.scenictype='01'   and ew.icrowdkindid=t.icrowdkindid and t.itickettypeid=et.itickettypeid and v5.pmky='CPFS' and v5.pmcd=et.bymaketicketway and v55.pmky='CKFS' and v55.pmcd =et.bymediatype   order by orderlistid";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMap(sql);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        for (Map map : list) {
            Long ciscenicid = new Long(map.get("iscenicid").toString());
            if (ciscenicid != iscenicid) {
                if (map.get("bymaketicketway").toString().equals("01")) {
                    ResultBean rb = new ResultBean();
                    rb.setColumnCount(2);
                    rb.setColumnNames(new String[] { "returnstats", "message" });
                    rb.addRow(new String[] {
                            "false",
                            map.get("szscenicname").toString() + "的票"
                                    + map.get("sztickettypename")
                                    + "非打印票，不能一起出票" });
                    return rb;
                }
            }
            Long orderlistid = new Long(map.get("ORDERLISTID").toString());

            StringBuffer zdail = new StringBuffer();
            StringBuffer zdail1 = new StringBuffer();
            String sql1 = " select t.zorderlistid,t.orderlistid,CASt(t.orid as varchar(17)) as orid,t.iscenicid,t.itickettypeid,t.iztickettypeid,t.dtstartdate,t.dtenddate,t.zpric,t.znumb,t.zyhnumb,t.zyhamnt,t.zamnt,et.sztickettypename,zet.sztickettypename as szztickettypename,t.tripid,t.ivenueareaid,tr.tripname,v.ivenueareaname from t_zorderlist t left outer join  trip tr on tr.tripid=t.tripid left outer join Venuearea v on v.ivenueareaid=t.ivenueareaid,Edmtickettypetab et,Edmtickettypetab zet where  t.orid='"
                    + orid
                    + "' and t.iscenicid="
                    + ciscenicid
                    + " and t.orderlistid="
                    + orderlistid
                    + " and  t.iztickettypeid=zet.itickettypeid  and t.itickettypeid=et.itickettypeid ";

            List<Map> list1 = new ArrayList();
            try {
                list1 = timeSharingDao.findBySqlToMap(sql1);
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            for (Map map1 : list1) {
                if (map1.get("TRIPID") != null) {
                    if (new Long(map1.get("TRIPID").toString()) > 0) {
                        zdail1 = zdail1.append(map1.get("IZTICKETTYPEID") + "&"
                                + map1.get("SZZTICKETTYPENAME").toString()
                                + "&" + map1.get("TRIPID").toString() + "&"
                                + map1.get("TRIPNAME").toString() + "&"
                                + map1.get("DTSTARTDATE").toString() + "&"
                                + map1.get("DTENDDATE").toString());
                        zdail = zdail.append(map1.get("IZTICKETTYPEID") + "&"
                                + map1.get("SZZTICKETTYPENAME").toString()
                                + "&" + map1.get("TRIPID").toString() + "&"
                                + map1.get("TRIPNAME").toString() + "&"
                                + map1.get("DTSTARTDATE").toString() + "&"
                                + map1.get("DTENDDATE").toString());

                        List tlist = timeSharingDao
                                .find(" from Productcontrol where controltype='03' and iscenicid="
                                        + iscenicid
                                        + " and itickettypeid="
                                        + map1.get("IZTICKETTYPEID").toString()
                                        + " and tripid="
                                        + map1.get("TRIPID").toString()
                                        + " and stdata='"
                                        + map1.get("DTSTARTDATE").toString()
                                        .substring(0, 10) + "'");
                        Productcontrol p = (Productcontrol) tlist.get(0);
                        if (p.getBystate() == 1) {
                            zdail1 = zdail1.append("&" + p.getBystate() + "&正常"
                                    + "!");
                            zdail = zdail.append("&" + p.getBystate() + "&正常"
                                    + "!");
                        } else if (p.getBystate() == 0) {
                            zdail1 = zdail1.append("&" + p.getBystate()
                                    + "&开始停排" + "!");
                            zdail = zdail.append("&" + p.getBystate() + "&开始停排"
                                    + "!");
                        } else {
                            zdail1 = zdail1.append("&" + p.getBystate()
                                    + "&确认停排" + "!");
                            zdail = zdail.append("&" + p.getBystate() + "&确认停排"
                                    + "!");
                        }
                    } else {

                        zdail = zdail.append(map1.get("IZTICKETTYPEID") + "&"
                                + map1.get("SZZTICKETTYPENAME").toString()
                                + "&" + "0&&"
                                + map1.get("DTSTARTDATE").toString() + "&"
                                + map1.get("DTENDDATE").toString() + "&1&正常!");
                        zdail1 = zdail1.append(map1.get("IZTICKETTYPEID") + "&"
                                + map1.get("SZZTICKETTYPENAME").toString()
                                + "&" + "0&&"
                                + map1.get("DTSTARTDATE").toString() + "&"
                                + map1.get("DTENDDATE").toString() + "&1&正常!");
                    }
                } else {
                    zdail = zdail.append(map1.get("IZTICKETTYPEID") + "&"
                            + map1.get("SZZTICKETTYPENAME").toString() + "&"
                            + "0&&" + map1.get("DTSTARTDATE").toString() + "&"
                            + map1.get("DTENDDATE").toString() + "&1&正常!");
                    zdail1 = zdail1.append(map1.get("IZTICKETTYPEID") + "&"
                            + map1.get("SZZTICKETTYPENAME").toString() + "&"
                            + "0&&" + map1.get("DTSTARTDATE").toString() + "&"
                            + map1.get("DTENDDATE").toString() + "&1&正常!");
                }
            }
            String zzdail1 = zdail1.toString();
            if (!zzdail1.equals("")) {
                zzdail1 = zzdail1.substring(0, zzdail1.length() - 1);
                map.put("ZZDAIL", zzdail1);
            } else {
                map.put("ZZDAIL", "");
            }
            String zzdail = zdail.toString();
            if (!zzdail.equals("")) {
                zzdail = zzdail.substring(0, zdail.length() - 1);
                map.put("ZDAIL", zzdail);
            } else {
                map.put("ZDAIL", "");
            }

        }
        return MapToResultBean.toResultBean(list);
    }

	
	public ResultBean savebenditorder41(String orid, Long iscenicid, Long iemployeeid, Long iticketwinid, Long maxid,
			List printnolist) {
		ResultBean rs = new ResultBean();
		rs.setColumnCount(2);
		Debug.print("My is saveorder41");
		rs.setColumnNames(new String[] { "returnstats", "message" }); //
		System.out.println("saveorder41  Hi is ok ");
		String returnstats = "true";
		return rs;
	}
	 

	public ResultBean getTicketPricebyiscenicid(Long iticketwinid, Long iemployeeid, Long ibusinessid, String stdt,
												Long iscenicid, String jsfz) {
        if (stdt == null) {
            stdt = Tools.getDay();
        }
        Esbticketwintab esbticketwintab = (Esbticketwintab) timeSharingDao.get(
                Esbticketwintab.class, iticketwinid);
        String sql = "select distinct a.icrowdkindpricecode,a.icrowdkindpriceid,"
//        		+ "a.icrowdkindpricecode,"
        		+ "a.itickettypeid,"
        		+ "a.ipeoplenumrange,"
        		+ "a.mactualsaleprice,"
        		+ "b.sztickettypecode,"
        		+ "b.sztickettypename as sztickettypename,"
        		+ "b.issale,"
        		+ "b.iscansale,"
        		+ "b.iscontrol,"
        		+ "b.iscontrolsale,"
        		+ "b.validityday,"
        		+ "b.byuselimit,"
        		+ "b.bymaketicketway,"
        		+ "b.bycategorytype,"
//        		+ "v55.pmva as strcategory,"
        		+ "a.icrowdkindid,c.szcrowdkindcode,c.szcrowdkindname,a.ibusinessid,d.szbusinesscode,"
        		+ "d.szbusinessname,"
//        		+ "v5.pmva as strmaketype,"
        		+ "b.bymediatype,"
//        		+ "v555.pmva as strmediatype,"
//        		+ "a.ipeoplenumrange,"
        		+ "a.note1,"
        		+ "a.inote1,b.note5,"
//        		+ "vtd.pmva as strtdtp ,"
        		+ "a.szmemo  "
        		+ "from edmcrowdkindpricetab a  inner join Edpcrowdkindtab c on c.icrowdkindid = a.icrowdkindid inner join Edmbusinesstab d "
        		+ "on d.ibusinessid = a.ibusinessid,Ospticketwinlimitstab ow,Ospsaleslimitstab oe,"
//        		+ "Sysparv5 v5,Sysparv5 v55,Sysparv5 v555,"
        		+ " edmtickettypetab b,Esbscenicareatab pd "
//        		+ "Sysparv5 vtd    "
        		+ " where a.ibusinessid=? and a.byisuse=1 and  a.isscene=1 and "
        		+ "to_date(?,'YYYY-MM-DD') between to_date(a.startdata,'YYYY-MM-DD') and to_date(a.enddata,'YYYY-MM-DD') "
        		+ "and ow.iticketwinid=? and ow.icrowdkindpriceid=a.icrowdkindpriceid and oe.iemployeeid=?  and a.note1=? "
        		+ "and oe.icrowdkindpriceid=a.icrowdkindpriceid "
//        		+ "and v5.pmky='CPFS' and v5.pmcd=b.bymaketicketway  "
//        		+ "and v555.pmky='CKFS' and v555.pmcd=b.bymediatype and v55.pmky='PRTP' and v55.pmcd=b.bycategorytype "
        		+ "and a.itickettypeid = b.itickettypeid and b.byisuse=1 and pd.iscenicid=b.iscenicid and pd.byisuse=1 "
        		+ "and pd.iscenicid=? "
//        		+ "  and b.note5=vtd.pmcd and vtd.pmky='TDTP'"
        		+ " and b.bycategorytype != '0004' "
        		+ "order by a.icrowdkindpricecode";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql, ibusinessid,
                    stdt, iticketwinid, iemployeeid, jsfz, iscenicid);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        List list2 = new ArrayList();
        String isrestrict = "0";
        String restrictname = "";
        // Long iscenicid=new Long(0);
        // Esbscenicareatab esbscenicareatab=new Esbscenicareatab();
        for (Map map : list) {
            String bycategorytype = (String) map.get("BYCATEGORYTYPE");
            if (esbticketwintab.getBywintype().equals("0003")) {
                // 年票窗口
                if (bycategorytype.equals("0014")) {
                    map.put("PRODUCTS", map.get("ITICKETTYPEID"));
                    if (map.get("ISCONTROL").equals("1")) {
                        isrestrict = "1";
                        restrictname = map.get("ITICKETTYPEID").toString();
                    }
                    list2.add(map);
                }
            } else {
                if (!bycategorytype.equals("0014")) {
                    if (bycategorytype.equals("0010")) {
                        String sql2 = "select itickettypeid from Edmticketcomposepricetab where icrowdkindpriceid="
                                + map.get("ICROWDKINDPRICEID");
                        List<Map> list1 = new ArrayList();
                        try {
                            list1 = timeSharingDao
                                    .findBySqlToMapnocolsesession(sql2);
                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        String products = "";
                        for (Map map1 : list1) {
                            products = products + map1.get("ITICKETTYPEID")
                                    + ":";
                            Edmtickettypetab et = (Edmtickettypetab) timeSharingDao
                                    .get(Edmtickettypetab.class, new Long(map1
                                            .get("ITICKETTYPEID").toString()));
                            if (et.getIscontrol() == 1) {
                                isrestrict = "1";
                                restrictname = map1.get("ITICKETTYPEID")
                                        .toString();
                            }
                        }
                        products = products.substring(0, products.length() - 1);
                        map.put("PRODUCTS", products);
                    } else {
                        map.put("PRODUCTS", map.get("ITICKETTYPEID"));
                        if (map.get("ISCONTROL").equals("1")) {
                            isrestrict = "1";
                            restrictname = map.get("ITICKETTYPEID").toString();
                        }
                    }
                    map.put("ISRESTRICT", isrestrict);
                    map.put("RESTRICTNAME", restrictname);
                    list2.add(map);
                }

            }
        }
        return MapToResultBean.toResultBean(list2);
    }

    public ResultBean getTicketPricebyiscenicid(Long iticketwinid,
                                                Long iemployeeid, Long ibusinessid, String stdt, Long iscenicid) {
        if (stdt == null) {
            stdt = Tools.getDay();
        }
        Esbticketwintab esbticketwintab = (Esbticketwintab) timeSharingDao.get(
                Esbticketwintab.class, iticketwinid);
        String sql = "select distinct a.icrowdkindpricecode,a.icrowdkindpriceid,a.icrowdkindpricecode,a.itickettypeid,a.ipeoplenumrange,"
        		+ "a.mactualsaleprice,b.sztickettypecode,b.sztickettypename as sztickettypename,b.issale,b.iscansale,b.iscontrol,"
        		+ "b.iscontrolsale,b.validityday,b.byuselimit,b.bymaketicketway,b.bycategorytype,v55.pmva as strcategory,"
        		+ "a.icrowdkindid,c.szcrowdkindcode,c.szcrowdkindname,a.ibusinessid,d.szbusinesscode,d.szbusinessname,"
        		+ "v5.pmva as strmaketype,b.bymediatype,v555.pmva as strmediatype,a.ipeoplenumrange,a.note1,a.inote1,b.note5,"
        		+ "vtd.pmva as strtdtp,a.szmemo    from edmcrowdkindpricetab a  inner join Edpcrowdkindtab c on c.icrowdkindid = a.icrowdkindid inner join Edmbusinesstab d "
        		+ "on d.ibusinessid = a.ibusinessid,Ospticketwinlimitstab ow,Ospsaleslimitstab oe,Sysparv5 v5,Sysparv5 v55,Sysparv5 v555, "
        		+ "edmtickettypetab b,Esbscenicareatab pd,Sysparv5 vtd    where a.ibusinessid=? and a.byisuse=1 and  a.isscene=1 "
        		+ "and to_date(?,'YYYY-MM-DD') between to_date(a.startdata,'YYYY-MM-DD') and to_date(a.enddata,'YYYY-MM-DD') and"
        		+ " ow.iticketwinid=? and ow.icrowdkindpriceid=a.icrowdkindpriceid and oe.iemployeeid=?  and "
        		+ "oe.icrowdkindpriceid=a.icrowdkindpriceid and v5.pmky='CPFS' and v5.pmcd=b.bymaketicketway  "
        		+ "and v555.pmky='CKFS' and v555.pmcd=b.bymediatype and v55.pmky='PRTP' and v55.pmcd=b.bycategorytype and "
        		+ "a.itickettypeid = b.itickettypeid and b.byisuse=1 and pd.iscenicid=b.iscenicid and pd.byisuse=1 and pd.iscenicid=? "
        		+ " and b.note5=vtd.pmcd and vtd.pmky='TDTP' and b.bycategorytype!='0004' order by a.icrowdkindpricecode";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql, ibusinessid,
                    stdt, iticketwinid, iemployeeid, iscenicid);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        List list2 = new ArrayList();
        String isrestrict = "0";
        String restrictname = "";
        // Long iscenicid=new Long(0);
        // Esbscenicareatab esbscenicareatab=new Esbscenicareatab();
        for (Map map : list) {
            String note1 = (String) map.get("NOTE1");
            if (note1.equals("") || note1.equals("null")
                    || note1.equals("NULL")) {
                map.put("NOTE1", map.get("0000"));
            }
            String bycategorytype = (String) map.get("BYCATEGORYTYPE");
            if (esbticketwintab.getBywintype().equals("0003")) {
                // 年票窗口
                if (bycategorytype.equals("0014")) {
                    map.put("PRODUCTS", map.get("ITICKETTYPEID"));
                    if (map.get("ISCONTROL").equals("1")) {
                        isrestrict = "1";
                        restrictname = map.get("ITICKETTYPEID").toString();
                    }
                    list2.add(map);
                }
            } else {
                if (!bycategorytype.equals("0014")) {
                    if (bycategorytype.equals("0010")) {
                        String sql2 = "select itickettypeid from Edmticketcomposepricetab where icrowdkindpriceid="
                                + map.get("ICROWDKINDPRICEID");
                        List<Map> list1 = new ArrayList();
                        try {
                            list1 = timeSharingDao
                                    .findBySqlToMapnocolsesession(sql2);
                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        String products = "";
                        for (Map map1 : list1) {
                            products = products + map1.get("ITICKETTYPEID")
                                    + ":";
                            Edmtickettypetab et = (Edmtickettypetab) timeSharingDao
                                    .get(Edmtickettypetab.class, new Long(map1
                                            .get("ITICKETTYPEID").toString()));
                            if (et.getIscontrol() == 1) {
                                isrestrict = "1";
                                restrictname = map1.get("ITICKETTYPEID")
                                        .toString();
                            }
                        }
                        products = products.substring(0, products.length() - 1);
                        map.put("PRODUCTS", products);
                    } else {
                        map.put("PRODUCTS", map.get("ITICKETTYPEID"));
                        if (map.get("ISCONTROL").equals("1")) {
                            isrestrict = "1";
                            restrictname = map.get("ITICKETTYPEID").toString();
                        }
                    }
                    map.put("ISRESTRICT", isrestrict);
                    map.put("RESTRICTNAME", restrictname);
                    list2.add(map);
                }

            }
        }
        return MapToResultBean.toResultBean(list2);
    }

    public ResultBean getordercs(Long ibusinessid) {
    	
    	List ordercsList = timeSharingDao.find("from Ordercs where  byisuse=1 and ibusinessid="
                + ibusinessid + " order by isequence ");
        
    	return ListToResultBean.ToResultBean(ordercsList);
    }

    public ResultBean saveorder41(String salesvouchers,
                                  String salesvoucherdetails, String comticketsalesdetails,
                                  Long maxid, String szsalesvoucherno, String... param)
            throws SQLException {
        // 开始保存订单

        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        // 解出Stssalesvouchertab
        try {
            String[] salesvoucher = salesvouchers.split("&");
            Long iscenicid = new Long(salesvoucher[0]);
            Esbscenicareatab scenic = (Esbscenicareatab) timeSharingDao.get(
                    Esbscenicareatab.class, iscenicid);

            Long iticketwinid = new Long(salesvoucher[1]);
            Esbticketwintab e = (Esbticketwintab) timeSharingDao.get(
                    Esbticketwintab.class, iticketwinid);
            Esbticketstationtab esbticketstation = (Esbticketstationtab) timeSharingDao
                    .get(Esbticketstationtab.class, e.getIticketstationid());
            Double iaccountreceivable = new Double(salesvoucher[5]);
            Double iacceptmoney = new Double(salesvoucher[4]);

            if (iacceptmoney < iaccountreceivable) {
                rs.addRow(new String[] { "false", "实收款应该大于等于应收金额" });
                return rs;
            }
            // 将订单信息参数转换成map对像

            Stssalesvouchertab s = new Stssalesvouchertab();

            if (param != null && param.length > 0) {

                if (param[0] != null && !param[0].equals("")) {
                    String[] ordercs = param[0].split("&");
                    Map returnMap = new HashMap();
                    for (int i = 0; i < ordercs.length; i++) {
                        if (!ordercs.equals("")) {
                            String[] ss = ordercs[i].split(":");

                            if (ss.length == 2) {
                                returnMap.put(ss[0].toLowerCase(), ss[1]);
                            }
                        }
                    }
                    s = (Stssalesvouchertab) convertMap(
                            Stssalesvouchertab.class, returnMap);
                }
            }
            // System.out.println("1111111111111111111111");
            // 生成凭证
            s = this.saveStssalesvouchertab(salesvouchers, maxid,
                    szsalesvoucherno, s);
            Custom cum = null;
            if (s.getIbusinessid() != 1) {
                cum = (Custom) timeSharingDao.get(Custom.class, s.getUsid());
            }
            String[] comticketsalesdetail = comticketsalesdetails.split(":");
            for (int i = 0; i < comticketsalesdetail.length; i++) {
                String[] zdetail = comticketsalesdetail[i].split("&");
                Long isalesvoucherdetailsid = new Long(zdetail[0]);
                Long icrowdkindpriceid = new Long(zdetail[1]);
                Long itickettypeid = new Long(zdetail[2]);
                Long iztickettypeid = new Long(zdetail[3]);
                Long isplitamount = new Long(zdetail[4]);
                Long tripid = new Long(zdetail[5]);
                String dtstartdate = zdetail[8];
                String dtenddate = zdetail[9];
                Prdtripvenuemanage p = null;
                if (s.getIbusinessid() != 1) {
                    Edmcrowdkindpricetab emt = (Edmcrowdkindpricetab) timeSharingDao
                            .get(Edmcrowdkindpricetab.class, icrowdkindpriceid);
                    if (!emt.getNote1().equals(cum.getNote2())) {
                        rs.addRow(new String[] {
                                "false",
                                "编号" + emt.getIcrowdkindpricecode()
                                        + "产品有不属于对应用户价格组中的票务" });
                        return rs;
                    }
                }
                if (tripid.longValue() > 0) {
                    List plist = timeSharingDao
                            .find(" from Prdtripvenuemanage where tripid="
                                    + tripid + " and itickettypeid="
                                    + iztickettypeid + " and startdata<='"
                                    + dtstartdate + "' and enddata>='"
                                    + dtstartdate + "'");
                    p = (Prdtripvenuemanage) plist.get(0);
                    // 判断竹筏时间是否过期
                    Calendar now = Calendar.getInstance(TimeZone
                            .getTimeZone("GMT+08:00"));
                    SimpleDateFormat df = new SimpleDateFormat(
                            "yyyy-MM-dd HH:mm:ss");
                    try {
                        Date d2 = df.parse(dtenddate);
                        Calendar endcalendar = Calendar.getInstance();
                        endcalendar.setTime(d2);
                        // 补入不用判断竹筏是否过期
                        if (s.getBysalesvouchertype().equals("01")) {
                            if (now.after(endcalendar)) {
                                rs.addRow(new String[] { "false", "竹筏趟次过期，不能销售" });
                                return rs;
                            }
                        }
                    } catch (ParseException e1) {
                        // TODO Auto-generated catch block
                        e1.printStackTrace();
                    }
                }
                List list = timeSharingDao
                        .find(" from Edmticketcomposepricetab where id.icrowdkindpriceid="
                                + icrowdkindpriceid
                                + " and itickettypeid='"
                                + iztickettypeid + "'");
                if (list == null || list.size() == 0) {
                    rs.addRow(new String[] { "false",
                            "票价编号为" + icrowdkindpriceid + "无子票价格" });
                    return rs;
                } else {
                    List opwwlist = timeSharingDao
                            .find(" from Opwwicketsettab where itickettypeid="
                                    + itickettypeid + " and izticktypeid="
                                    + iztickettypeid + " and byisuse=1");

                    if (opwwlist.size() == 0) {
                        Edmtickettypetab edticket = (Edmtickettypetab) timeSharingDao
                                .get(Edmtickettypetab.class, itickettypeid);
                        rs.addRow(new String[] { "false",
                                edticket.getSztickettypecode() + "的检票园门数据不全" });
                        return rs;
                    }
                }
            }
            String zffs = "00";
            if (salesvoucher.length >= 11) {
                zffs = salesvoucher[10];// 支付方式
            }

            // 目前结算只有一种方式，结算凭证
            Stssalessettlementtab st = this.saveStssalessettlementtab(s, zffs);

            List detaillist = new ArrayList();
            List cdetaillist = new ArrayList();
            List zdetaillist = new ArrayList();
            List cdzetaillist = new ArrayList();
            List cdchecklist = new ArrayList();
            String[] salesvoucherdetail = salesvoucherdetails.split(":");
            double smont = 0;
            List zjlist = new ArrayList();
            long maxnumb = 2;// 同一种票同一游览日期最多预定人数
            Sysparv5 pv5 = (Sysparv5) this.timeSharingDao.get(Sysparv5.class,
                    new Sysparv5Id("SMSL", "01"));
            if (pv5 != null) {
                maxnumb = Long.parseLong(pv5.getPmva());
            }

            List<Object[]> jectlist = new ArrayList<Object[]>();

            for (int i = 0; i < salesvoucherdetail.length; i++) {
                String isalesvoucherdetail = salesvoucherdetail[i];
                String[] detail = isalesvoucherdetail.split("&");
                Long itickettypeid = new Long(detail[2]);
                Long icrowdkindpriceid = new Long(detail[1]);
                Edmtickettypetab eticket = (Edmtickettypetab) timeSharingDao.get(
                        Edmtickettypetab.class, itickettypeid);
                Edmcrowdkindpricetab edmcrowdkindpricetab = (Edmcrowdkindpricetab) timeSharingDao
                        .get(Edmcrowdkindpricetab.class, icrowdkindpriceid);
                String bymaketicketway = "00";
                String bymediatype = "00";
                String szticketprintno = "";
                Long piserialnum = new Long(0);
                Long iticketnum = new Long(detail[3]);
                if (detail.length > 6) {
                    bymaketicketway = detail[6];// 判断现场激活还是现场打印
                    bymediatype = detail[7];// 判断介质
                }
                if (bymaketicketway.equals("01")) {
                    // 李经锐修改 2012-09-05 增加判断 预制票 现场激活 还要判断介质类型
                    if (eticket.getBymediatype().equals("00")
                            || eticket.getBymediatype().equals("01")) {
                        szticketprintno = detail[8];
                    }

                    // piserialnum = new Long(szticketprintno.substring(6, 12));
                }

                String manyouno = "";
                String myzj = "";
                String myname = "";
                String mytelno = "";
                if (e.getBywintype().equals("0003")) {
                    // 窗口为年卡窗口
                    if (eticket.getBycategorytype().equals("0014")) {
                        if (iticketnum > 1) {

                            rs.addRow(new String[] { "false",
                                    eticket.getSztickettypename() + "只能单票销售" });
                            return rs;
                        }
                    } else {

                        rs.addRow(new String[] { "false", "年卡窗口只能办理年卡业务" });
                        return rs;

                    }
                    if (detail.length < 13) {

                        manyouno = detail[9];
                        myzj = detail[10];

                        if (myzj.equals("")) {

                            rs.addRow(new String[] { "false", "年卡办理应填写有效证件" });
                            return rs;
                        }
                    } else {
                        manyouno = detail[9];
                        myzj = detail[10];
                        myname = detail[11];
                        mytelno = detail[12];
                        if (myzj.equals("")) {

                            rs.addRow(new String[] { "false", "年卡办理应填写有效证件" });
                            return rs;
                        }
                        if (mytelno.equals("")) {

                            rs.addRow(new String[] { "false", "年卡办理应填写电话号码" });
                            return rs;
                        }
                        if (myname.equals("")) {

                            rs.addRow(new String[] { "false", "年卡办理应填写持卡人姓名" });
                            return rs;
                        }
                    }

                } else {
                    if (edmcrowdkindpricetab.getIpeoplenumrange().longValue() == 1) {
                        if (detail.length >= 12) {
                            myzj = detail[10];
                            myname = detail[11];
                            if (myzj.equals("")) {

                                rs.addRow(new String[] { "false", "实名制票务需输入证件号" });
                                return rs;
                            }
                            if (myname.equals("")) {

                                rs.addRow(new String[] { "false", "实名制票务填写姓名" });
                                return rs;
                            }
                        }
                    }
                }
                Stssalesvoucherdetailstab sd = this
                        .saveStssalesvoucherdetailstab(s, isalesvoucherdetail,
                                szticketprintno);
                smont = smont + sd.getMeventmoney() - sd.getMderatemoney();

                sd.setManyouno(manyouno);
                sd.setMyzj(myzj);
                sd.setName1(myname);
                sd.setZjno1(mytelno);
                sd.setStritickettypeid(eticket.getSztickettypename());

                if (edmcrowdkindpricetab.getIpeoplenumrange().longValue() == 1) {
                    if (!sd.getMyzj().equals("")) {
                        boolean b = false;
                        for (int a = 0; a < zjlist.size(); a++) {
                            Stssoldtickettab zjstsv = (Stssoldtickettab) zjlist
                                    .get(a);
                            if (zjstsv.getMyzj().equals(sd.getMyzj())) {
                                if (zjstsv.getItickettypeid().longValue() == sd
                                        .getItickettypeid()) {
                                    if (zjstsv.getDtstartdate().equals(
                                            sd.getDtstartdate())) {
                                        b = true;
                                        zjstsv.setIplayerperticket(zjstsv
                                                .getIplayerperticket()
                                                + sd.getIticketnum());
                                        if (zjstsv.getIplayerperticket()
                                                .longValue() > maxnumb) {
                                            rs.addRow(new String[] {
                                                    "false",
                                                    "一张身份证只能购买同一天的"
                                                            + maxnumb
                                                            + "张"
                                                            + sd.getStritickettypeid() });
                                            return rs;
                                        }
                                        if (zjstsv.getIplayerperticket()
                                                .longValue() <= maxnumb) {
                                            String hsql = "select distinct new map(e.szticketprintno) from Stssoldtickettab e,Stssoldticketsubtab st where e.itickettypeid="
                                                    + sd.getItickettypeid()
                                                    + " and e.dtstartdate='"
                                                    + sd.getDtstartdate()
                                                    + "' and e.myzj='"
                                                    + sd.getMyzj()
                                                    + "' and st.id.isalesvoucherid=e.id.isalesvoucherid and st.id.iticketstationid=e.id.iticketstationid and st.id.szsoldticketid=e.id.szsoldticketid and e.id.isalesvoucherdetailsid=st.id.isalesvoucherdetailsid and st.isvalid=1 ";
                                            List plist = timeSharingDao.find(hsql);
                                            if (plist != null
                                                    && plist.size() > maxnumb
                                                    - sd.getIplayerperticket()
                                                    .longValue()) {

                                                rs.addRow(new String[] {
                                                        "false",
                                                        "一张身份证只能购买同一天的"
                                                                + maxnumb
                                                                + "张"
                                                                + sd.getStritickettypeid() });
                                                return rs;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (b == false) {
                            // 没有匹配的数据
                            Stssoldtickettab zjstsv = new Stssoldtickettab();
                            zjstsv.setItickettypeid(sd.getItickettypeid());
                            zjstsv.setDtstartdate(sd.getDtstartdate());
                            zjstsv.setMyzj(sd.getMyzj());
                            zjstsv.setIplayerperticket(new Long(1));
                            zjlist.add(zjstsv);
                            String hsql = "select distinct new map(e.szticketprintno) from Stssoldtickettab e,Stssoldticketsubtab st where e.itickettypeid="
                                    + sd.getItickettypeid()
                                    + " and e.dtstartdate='"
                                    + sd.getDtstartdate()
                                    + "' and e.myzj='"
                                    + sd.getMyzj()
                                    + "' and st.id.isalesvoucherid=e.id.isalesvoucherid and st.id.iticketstationid=e.id.iticketstationid and st.id.szsoldticketid=e.id.szsoldticketid and e.id.isalesvoucherdetailsid=st.id.isalesvoucherdetailsid and st.isvalid=1 ";

                            List plist = timeSharingDao.find(hsql);
                            if (plist != null && plist.size() > maxnumb - 1) {

                                rs.addRow(new String[] {
                                        "false",
                                        "一张身份证只能购买同一天的" + maxnumb + "张"
                                                + sd.getStritickettypeid() });
                                return rs;
                            }
                        }
                    }
                }
                if (eticket.getByusage() == 0) {

                    sd.setIticketnum(iticketnum);
                    sd.setIticketplayer(iticketnum);
                } else {
                    sd.setIticketplayer(iticketnum);
                    sd.setIplayerperticket(iticketnum);// 人/张

                }
                detaillist.add(sd);
                // 凭证明细子表
                zdetaillist = this.SaveStscomticketsalesdetailstab(zdetaillist,
                        s, sd, comticketsalesdetails);
                // 添加售出门票表
                if (eticket.getByusage() == 0) {
                    // 一票一人
                    if (bymaketicketway.equals("00")) {
                        // 现场打 印
                        cdetaillist = this.saveStssoldtickettabug0make00(
                                cdetaillist, sd, s,
                                esbticketstation.getSzstationcode(),
                                scenic.getSzsceniccode(),
                                eticket.getSztickettypecode(),
                                edmcrowdkindpricetab.getIcrowdkindid());
                    } else if (bymaketicketway.equals("01")) {
                        // 现场激活
                        cdetaillist = this.saveStssoldtickettabug0make01(
                                cdetaillist, sd, s, szticketprintno,
                                edmcrowdkindpricetab.getIcrowdkindid());
                    } else if (bymaketicketway.equals("02")) {
                        // 身份证出票
                        cdetaillist = this.saveStssoldtickettabug0make00(
                                cdetaillist, sd, s,
                                esbticketstation.getSzstationcode(),
                                scenic.getSzsceniccode(),
                                eticket.getSztickettypecode(),
                                edmcrowdkindpricetab.getIcrowdkindid());
                    }
                } else if (eticket.getByusage() == 1) {
                    // 一票多人
                    if (bymaketicketway.equals("00")
                            || bymaketicketway.equals("02")) {
                        // 现场打印

                        cdetaillist = this.saveStssoldtickettabug1make00(
                                cdetaillist, sd, s,
                                esbticketstation.getSzstationcode(),
                                scenic.getSzsceniccode(),
                                eticket.getSztickettypecode(),
                                edmcrowdkindpricetab.getIcrowdkindid());
                    } else if (bymaketicketway.equals("01")) {
                        // 现场激活
                        rs.addRow(new String[] {
                                "false",
                                "产品" + eticket.getSztickettypename()
                                        + "激活票，不支持一票多人" });
                        return rs;
                    }
                }
                System.out.println("门票子表添加数据");
                // 添加售出门票子表
                if (eticket.getByusage() == 0) {
                    // 一票一人
                    cdzetaillist = this.SaveStssoldticketsubtabug0(
                            cdzetaillist, zdetaillist, s, sd,
                            edmcrowdkindpricetab.getIcrowdkindid());
                    cdchecklist = this.SaveStsschecktabug0(cdchecklist,
                            zdetaillist, cdetaillist, s, sd,
                            edmcrowdkindpricetab.getIcrowdkindid());
                } else if (eticket.getByusage() == 1) {
                    // 一票多人
                    Debug.print("添加售出门票子表");
                    cdzetaillist = this.SaveStssoldticketsubtabug1(
                            cdzetaillist, zdetaillist, s, sd,
                            edmcrowdkindpricetab.getIcrowdkindid());
                    cdchecklist = this.SaveStsschecktabug1(cdchecklist,
                            zdetaillist, cdetaillist, s, sd,
                            edmcrowdkindpricetab.getIcrowdkindid());
                }

                // 库存数据
                Object[] o = new Object[] { eticket.getIscenicid(),
                        itickettypeid, iticketnum, detail[4].toString(),
                        detail[5].toString() };
                jectlist.add(o);
            }

            if (smont != iaccountreceivable) {
                rs.addRow(new String[] { "false", "实收款金额不对" });
                return rs;
            }

            // 预制票 售票时 操作个人结存明细信息
            boolean des = addPersonaldetails(s.getIhandler(),
                    salesvoucherdetail);
            if (des) {
                rs.addRow(new String[] { "false", "售票员手中没售出票号或者售出票号与售票员手中票号冲突" });
                return rs;
            }

            // 添加库存销量信息 lijingrui
            if (s.getIbusinessid() == 1) {
                stockswareDao.saveStockvolum(jectlist);
            } else {
                // 判断用户库存
                Custom cstm = (Custom) stockswareDao.get(Custom.class,
                        s.getUsid());
                // 下订单用户是操作员,需要获取分社信息
                String stockusid = cstm.getUsid();
                if (cstm.getLgtp().equals("02") && cstm.getTtlb().equals("01")
                        && cstm.getUstp().equals("02")
                        && cstm.getUsqx().equals("01110000000000000000")) {
                    if (s.getIbusinessid() == 3) {
                        Custom tom = (Custom) stockswareDao.get(Custom.class,
                                cstm.getSusid());
                        stockusid = tom.getSusid();
                    } else {
                        stockusid = cstm.getSusid();
                    }
                }
                if (s.getIbusinessid() == 3) {
                    if (cstm.getLgtp().equals("02")
                            && cstm.getTtlb().equals("01")
                            && cstm.getUstp().equals("02")
                            && cstm.getUsqx().equals("11110000000000000000")) {
                        stockusid = cstm.getSusid();
                    }
                }

                boolean b = stockswareDao.saveStockVolumeCustom(jectlist,
                        stockusid);
                if (!b) {
                    if (s.getIbusinessid() != 3) {
                        stockswareDao.saveStockvolum(jectlist);
                    }
                }

            }

            timeSharingDao.save(s);
            timeSharingDao.save(st);

            for (int i = 0; i < detaillist.size(); i++) {
                Stssalesvoucherdetailstab sd = (Stssalesvoucherdetailstab) detaillist
                        .get(i);
                timeSharingDao.save(sd);
            }

            Sysparv5 sv5 = (Sysparv5) timeSharingDao.get(Sysparv5.class,
                    new Sysparv5Id("PRCS", "01"));
            String printcs = "0";
            if (sv5 != null) {
                printcs = sv5.getPmva();
            }

            for (int i = 0; i < cdetaillist.size(); i++) {
                Stssoldtickettab stsv = (Stssoldtickettab) cdetaillist.get(i);
                timeSharingDao.save(stsv);
                if (stsv.getBymaketicketway().equals("00")) {
                    if (s.getBysalesvouchertype().equals("01")) {
                        if (printcs.equals("1")) {
                            Ticketprintlist t = new Ticketprintlist();
                            t.setSzsalesvoucherno(s.getSzsalesvoucherno());
                            t.setIemployeeid(s.getIhandler());
                            t.setPrinttype("01");
                            t.setSzticketprintno(stsv.getSzticketprintno());
                            t.setPrinttime(Tools.getDayTimes());
                            t.setIsok(new Long(0));
                            try {
                                Long printid = timeSharingDao
                                        .getSequenceId("PRINT_ID");
                                t.setPrintid(printid);
                                timeSharingDao.save(t);
                            } catch (Exception e1) {
                                // TODO Auto-generated catch block
                                e1.printStackTrace();
                                System.out.println(e1.getMessage());
                            }
                        }
                    }
                }
            }

            for (int i = 0; i < zdetaillist.size(); i++) {
                Stscomticketsalesdetailstab zstd = (Stscomticketsalesdetailstab) zdetaillist
                        .get(i);
                timeSharingDao.save(zstd);
            }

            for (int i = 0; i < cdzetaillist.size(); i++) {

                Stssoldticketsubtab stss = (Stssoldticketsubtab) cdzetaillist
                        .get(i);

                timeSharingDao.save(stss);
            }
            for (int i = 0; i < cdchecklist.size(); i++) {

                Stsschecktab stss = (Stsschecktab) cdchecklist.get(i);

                timeSharingDao.save(stss);
            }

            rs.addRow(new String[] { "true",
                    s.getId().getIsalesvoucherid().toString() });

        } catch (Exception e) {
            System.out.println("dddd,Exception" + e.toString());
            throw new RuntimeException(e.getMessage());
        }
        return rs;
    }

    public Object convertMap(Class type, Map map) throws Exception{

        try {

            BeanInfo beanInfo = Introspector.getBeanInfo(type); // 获取类属性

            Object obj = type.newInstance(); // 创建 JavaBean 对象

            // 给 JavaBean 对象的属性赋值
            PropertyDescriptor[] propertyDescriptors = beanInfo
                    .getPropertyDescriptors();
            for (int i = 0; i < propertyDescriptors.length; i++) {
                PropertyDescriptor descriptor = propertyDescriptors[i];
                String propertyName = descriptor.getName();

                if (map.containsKey(propertyName)) {
                    // 下面一句可以 try 起来，这样当一个属性赋值失败的时候就不会影响其他属性赋值。

                    Object value = map.get(propertyName);

                    Object[] args = new Object[1];
                    args[0] = value;

                    descriptor.getWriteMethod().invoke(obj, args);
                }
            }

            return obj;
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return null;
        }
    }

    /**
     * 根据 窗口、售票员、业务ID,游览日期stdt读取价格列表
     */

    public ResultBean getTicketPrice(Long iticketwinid, Long iemployeeid,
                                     Long ibusinessid, String stdt, String jsfz) {
        if (stdt == null) {
            stdt = Tools.getDay();
        }
        Esbticketwintab esbticketwintab = (Esbticketwintab) timeSharingDao.get(
                Esbticketwintab.class, iticketwinid);
        String sql = "select\r\n" + 
        		"		distinct b.iscenicid as iscenicid,\r\n" + 
        		"		a.icrowdkindpricecode as icrowdkindpricecode,\r\n" + 
        		"		a.icrowdkindpriceid as icrowdkindpriceid,\r\n" + 
        		"		a.itickettypeid as itickettypeid,\r\n" + 
        		"		a.ipeoplenumrange as ipeoplenumrange,\r\n" + 
        		"		a.mactualsaleprice as mactualsaleprice,\r\n" + 
        		"		b.sztickettypecode as sztickettypecode,\r\n" + 
        		"		b.sztickettypename as sztickettypename,\r\n" + 
        		"		b.issale as issale,\r\n" + 
        		"		b.iscansale as iscansale,\r\n" + 
        		"		b.iscontrol as iscontrol,\r\n" + 
        		"		b.iscontrolsale as iscontrolsale,\r\n" + 
        		"		b.validityday as validityday,\r\n" + 
        		"		b.byuselimit as byuselimit,\r\n" + 
        		"		b.bymaketicketway as bymaketicketway,\r\n" + 
        		"		b.bycategorytype as bycategorytype,\r\n" + 
        		"		b.int3 as int3,\r\n" + 
        		"		b.note3 as note3,\r\n" + 
        		"		b.note4 as note4,\r\n" + 
//        		"		v55.pmva as strcategory,\r\n" + 
        		"		a.icrowdkindid as icrowdkindid,\r\n" + 
        		"		c.szcrowdkindcode as szcrowdkindcode,\r\n" + 
        		"		c.szcrowdkindname as szcrowdkindname,\r\n" + 
        		"		a.ibusinessid as ibusinessid,\r\n" + 
        		"		d.szbusinesscode as szbusinesscode,\r\n" + 
        		"		d.szbusinessname as szbusinessname,\r\n" + 
//        		"		v5.pmva as strmaketype,\r\n" + 
        		"		b.bymediatype as bymediatype,\r\n" + 
//        		"		v555.pmva as strmediatype,\r\n" + 
        		"		a.note1 as note1 ,\r\n" + 
        		"		a.inote1 as inote1,\r\n" + 
        		"		a.szmemo as szmemo,\r\n" + 
        		"		b.isequence as isequence,\r\n" + 
        		"		c.ticketcolor as ticketcolor\r\n" + 
//        		"		v55.pmvd as pmvd \r\n" + 
        		"    from\r\n" + 
        		"        edmcrowdkindpricetab a  \r\n" + 
        		"    inner join\r\n" + 
        		"        Edpcrowdkindtab c \r\n" + 
        		"            on c.icrowdkindid = a.icrowdkindid \r\n" + 
        		"    inner join\r\n" + 
        		"        Edmbusinesstab d \r\n" + 
        		"            on d.ibusinessid = a.ibusinessid,\r\n" + 
        		"        Ospticketwinlimitstab ow,\r\n" + 
        		"        Ospsaleslimitstab oe,\r\n" + 
/*        		"        Sysparv5 v5,\r\n" + 
        		"        Sysparv5 v55,\r\n" + 
        		"        Sysparv5 v555,\r\n" + */
        		"        edmtickettypetab b,\r\n" + 
        		"        Esbscenicareatab pd \r\n" + 
        		"    where\r\n" + 
        		"        a.ibusinessid=? \r\n" + 
        		"        and a.byisuse=1 \r\n" + 
        		"        and  a.isscene=1 \r\n" + 
        		"        and to_date(?,'YYYY-MM-DD') between to_date(a.startdata,'YYYY-MM-DD') and to_date(a.enddata,'YYYY-MM-DD') \r\n" + 
        		"        and ow.iticketwinid=? \r\n" + 
        		"        and ow.icrowdkindpriceid=a.icrowdkindpriceid \r\n" + 
        		"        and oe.iemployeeid=? \r\n" + 
        		"        and a.note1=? \r\n" + 
        		"        and oe.icrowdkindpriceid=a.icrowdkindpriceid \r\n" + 
/*        		"        and v5.pmky='CPFS' \r\n" + 
        		"        and v5.pmcd=b.bymaketicketway  \r\n" + 
        		"        and v555.pmky='CKFS' \r\n" + 
        		"        and v555.pmcd=b.bymediatype \r\n" + 
        		"        and v55.pmky='PRTP' \r\n" + 
        		"        and v55.pmcd=b.bycategorytype \r\n" + */
        		"        and a.itickettypeid = b.itickettypeid \r\n" + 
        		"        and b.byisuse=1 \r\n" + 
        		"        and pd.iscenicid=b.iscenicid \r\n" + 
        		"        and pd.byisuse=1 \r\n" + 
        		"        and b.bycategorytype not in (\r\n" + 
        		"            '0004','0100','0101'\r\n" + 
        		"        ) \r\n" + 
        		"    order by\r\n" + 
//        		"        v55.pmvd,\r\n" + 
        		"        b.isequence,\r\n" + 
        		"        a.icrowdkindpricecode";
        List<Map> list = new ArrayList();
        try {
            /*list = timeSharingDao.findBySqlToMapnocolsesession(sql, ibusinessid,
                    stdt, iticketwinid, iemployeeid, jsfz);*/
            list = timeSharingDao.findBySqlToMap(sql, ibusinessid,
                    stdt, iticketwinid, iemployeeid, jsfz);
        } catch (Exception e) {
            e.printStackTrace();
        }
        List list2 = new ArrayList();
        String isrestrict = "0";
        String restrictname = "";
        // Long iscenicid=new Long(0);
        // Esbscenicareatab esbscenicareatab=new Esbscenicareatab();
        for (Map map : list) {
        	
            String bycategorytype = (String) map.get("BYCATEGORYTYPE");
            String strmaketype = map.get("BYMAKETICKETWAY").toString();
        	String strmediatype = map.get("BYMEDIATYPE").toString();
        	String strcategory = map.get("BYCATEGORYTYPE").toString();
        	Sysparv5 findOne = sysService.findOne("CPFS", strmaketype);//查询出票方式
        	Sysparv5 findOne1 = sysService.findOne("CKFS", strmediatype);//查询介质类型
        	Sysparv5 findOne2 = sysService.findOne("PRTP", strcategory);//查询产品种类
        	map.put("STRMAKETYPE", findOne.getPmva());
        	map.put("STRMEDIATYPE", findOne1.getPmva());
        	map.put("STRCATEGORY", findOne2.getPmva());
            if (esbticketwintab.getBywintype().equals("0003")) {
                // 年票窗口
                if (bycategorytype.equals("0014")) {
                    map.put("PRODUCTS", map.get("ITICKETTYPEID"));
                    if (map.get("ISCONTROL").equals("1")) {
                        isrestrict = "1";
                        restrictname = map.get("ITICKETTYPEID").toString();
                    }

                    // 陈新浩新增 判断IC卡类型
                    Edmticketproduct tp = (Edmticketproduct) timeSharingDao.get(
                            Edmticketproduct.class,
                            new Long(map.get("ITICKETTYPEID").toString()));
                    if (tp != null) {
                        map.put("ICCARDTYPE", tp.getNoted4());
                        map.put("INOTEGER4", tp.getInoteger4());
                    } else {
                        map.put("ICCARDTYPE", "0");
                        map.put("INOTEGER4", "0");
                    }

                    list2.add(map);
                }
            } else {
                if (!bycategorytype.equals("0014")) {
                    if (bycategorytype.equals("0010")) {
                        String sql2 = "select itickettypeid from Edmticketcomposepricetab where icrowdkindpriceid="
                                + map.get("ICROWDKINDPRICEID");
                        List<Map> list1 = new ArrayList();
                        try {
                            list1 = timeSharingDao
                                    .findBySqlToMapnocolsesession(sql2);
                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        String products = "";
                        for (Map map1 : list1) {
                            products = products + map1.get("ITICKETTYPEID")
                                    + ":";
                            Edmtickettypetab et = (Edmtickettypetab) timeSharingDao
                                    .get(Edmtickettypetab.class, new Long(map1
                                            .get("ITICKETTYPEID").toString()));
                            if (et.getIscontrol() == 1) {
                                isrestrict = "1";
                                restrictname = map1.get("ITICKETTYPEID")
                                        .toString();
                            }
                        }
                        products = products.substring(0, products.length() - 1);
                        map.put("PRODUCTS", products);
                    } else {
                        map.put("PRODUCTS", map.get("ITICKETTYPEID"));
                        if (map.get("ISCONTROL").equals("1")) {
                            isrestrict = "1";
                            restrictname = map.get("ITICKETTYPEID").toString();
                        }
                    }

                    // 陈新浩新增 判断IC卡类型
                    Edmticketproduct tp = (Edmticketproduct) timeSharingDao.get(
                            Edmticketproduct.class,
                            new Long(map.get("ITICKETTYPEID").toString()));
                    if (tp != null) {
                        map.put("ICCARDTYPE", tp.getNoted4());
                        map.put("INOTEGER4", tp.getInoteger4());
                    } else {
                        map.put("ICCARDTYPE", "0");
                        map.put("INOTEGER4", "0");
                    }

                    map.put("ISRESTRICT", isrestrict);
                    map.put("RESTRICTNAME", restrictname);
                    
                    //判断是否是分时预约的票
                    Object _INT3 = map.get("INT3");
                    long int3 = 0;
                    if(_INT3 != null) {
                    	int3 = Long.parseLong(_INT3.toString());
                    }else {
                    	_INT3 = "0";
                    }
                    map.put("INT3", _INT3);
                    if(int3 == 1) {
                    	//根据产品编码获取，分时时段列表
                    	String productCode = map.get("SZTICKETTYPECODE").toString();
                        String timeHql = "from TimeSharingTicketTab time where time.productId = '"+productCode+"' and time.dayTime = '"+stdt+"'";
                        List find = timeSharingDao.find(timeHql);
                        if(find != null && find.size() > 0) {
                        	map.put("timeList", JSON.toJSONString(find));
                        }
                    }else {
                    	map.put("timeList", "");
                    }
                    
                    list2.add(map);
                }

            }
        }

        return MapToResultBean.toResultBean(list2);
    }

    public ResultBean getGalsourceregiontab() {

        String sql = " select g.iregionalid,g.iparentid,g.szregionalname,g.ilevel from Galsourceregiontab g where g.ilevel<4  order by g.szinnercode ";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMap(sql);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(list);
    }

    public ResultBean getICcardtypelist() {
        String sql = "select et.itickettypeid as itickettypeid,ep.noted4 as ictype from  Edmtickettypetab et,Edmticketproduct ep where et.itickettypeid = ep.itickettypeid and et.bymediatype in ('02','03','04') ";
        List<Map> list = new ArrayList();
        try {
            list = timeSharingDao.findBySqlToMapnocolsesession(sql);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return MapToResultBean.toResultBean(list);
    }

    public ResultBean getfapiao(Long isalesvoucherid, Long iticketstationid,
                                Long iemployeeid, Long iticketwinid, String corpname, String fpno) {
        String fapiao = "";
        // 根据售票窗口查询窗口所在服务商
        ResultBean rs = new ResultBean();
        rs.setColumnNames(new String[] { "returnstats", "message" });
        try {

            Esbticketwintab esbticketwintab = (Esbticketwintab) this.timeSharingDao
                    .get(Esbticketwintab.class, iticketwinid);
            Long iscenicid = esbticketwintab.getIscenicid();
            // 读取Receiptmanager控制中 printno=‘01’ 且 打印内容不是只打印标题的记录,查询最大打印条数
            List Receiptmanagerlist = this.timeSharingDao
                    .find("from Receiptmanager where iscenicid=" + iscenicid
                            + " and printno='01'");

            if (Receiptmanagerlist == null || Receiptmanagerlist.size() == 0) {
                rs.addRow(new String[] { "false", "后台发票打印内容设置出错" });
                return rs;
            }
            Receiptmanager receiptmanager = (Receiptmanager) Receiptmanagerlist
                    .get(0);

            int colnum = receiptmanager.getColnum().intValue();

            if (receiptmanager.getPrinttype().equals("02")) {
                // 标题内容一起打印
                colnum = colnum - 1;
            }
            // 陈新浩新增colnum判断 2013-06-25
            if (colnum == 0) {
                colnum = 1;
                // rs.addRow(new String[] { "false", "没有内容" });
                // return rs;
            }
            // 结束

            List stslist = new ArrayList();
            try {
                stslist = this.timeSharingDao
                        .findBySqlToMap("select  et.sztickettypename,ep.szcrowdkindname,sd.itickettypeid,sd.mactualsaleprice,sum(case s.bysalesvouchertype when   '02' then -1*(sd.iticketplayer) else  sd.iticketplayer end  )  iticketplayer ,sum(case s.bysalesvouchertype when   '02' then -1*(sd.ideratenums) else  sd.ideratenums end ) as ideratenums,sum(case s.bysalesvouchertype when   '02' then -1*(sd.meventmoney) else  sd.meventmoney end ) as meventmoney,sum(case s.bysalesvouchertype when   '02' then -1*(sd.mderatemoney) else  sd.mderatemoney end ) as mderatemoney from Stssalesvouchertab s, Stssalesvoucherdetailstab sd,Edmtickettypetab et,Edpcrowdkindtab ep,Edmcrowdkindpricetab p where  sd.itickettypeid=et.itickettypeid and ep.icrowdkindid=p.icrowdkindid and sd.icrowdkindpriceid=p.icrowdkindpriceid and s.isalesvoucherid=sd.isalesvoucherid and s.iticketstationid=sd.iticketstationid and ((s.isalesvoucherid="
                                + isalesvoucherid
                                + " and s.iticketstationid="
                                + iticketstationid
                                + ") or (s.issalesvoucherid="
                                + isalesvoucherid
                                + " and s.isticketstationid="
                                + iticketstationid
                                + ")) group by et.sztickettypename,ep.szcrowdkindname,sd.itickettypeid,sd.mactualsaleprice");
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            for (int i = 0; i < stslist.size(); i++) {
                Map map = (Map) stslist.get(i);
                if (new Long(map.get("ITICKETPLAYER").toString()) == 0) {
                    stslist.remove(i);
                }
            }
            if (stslist.size() == 0) {
                rs.addRow(new String[] { "false", "该单已全部退订，不用打印发票" });
                return rs;
            }

            int scolnumb = stslist.size();
            int fpnumb = scolnumb / colnum;
            if (scolnumb % colnum > 0) {
                fpnumb = fpnumb + 1;
            }
            int qcolnum = 0;
            if (scolnumb % colnum > 0) {
                qcolnum = colnum - scolnumb % colnum;
            }
            String[] fpcon = new String[fpnumb];
            Double[] mont = new Double[fpnumb];
            String[] dxmont = new String[fpnumb];
            String[] fapiaos = new String[fpnumb];
            for (int j = 0; j < fapiaos.length; j++) {
                fapiaos[j] = "";
            }
            String biaoti = "";
            List syslist = this.timeSharingDao
                    .find(" from Sysparv5 where id.pmky='FPSZ' and spmcd='01' and isvalue=1 order by id.pmcd");

            if (receiptmanager.getPrinttype().equals("02")) {
                // 标题打印
                for (int i = 0; i < syslist.size(); i++) {
                    Sysparv5 v5 = (Sysparv5) syslist.get(i);
                    biaoti = biaoti + v5.getPmva() + ",";
                }
            }

            for (int i = 0; i < stslist.size(); i++) {
                int j = i / colnum;
                if (i % colnum == 0) {
                    fpcon[j] = biaoti;
                }
                Map map = (Map) stslist.get(i);
                fpcon[j] = fpcon[j] + map.get("SZTICKETTYPENAME").toString()
                        + "(" + map.get("SZCROWDKINDNAME").toString() + "),"
                        + map.get("MACTUALSALEPRICE").toString() + ",";

                fpcon[j] = fpcon[j] + map.get("ITICKETPLAYER").toString();
                if (new Long(map.get("IDERATENUMS").toString()) > 0) {
                    fpcon[j] = fpcon[j] + "(免"
                            + map.get("IDERATENUMS").toString() + "),";
                } else {
                    fpcon[j] = fpcon[j] + ",";
                }

                double cmont = Double.parseDouble(map.get("MEVENTMONEY")
                        .toString())
                        - Double.parseDouble(map.get("MDERATEMONEY").toString());
                fpcon[j] = fpcon[j] + cmont + ",";

                if (mont[j] == null) {
                    mont[j] = 0D;
                }
                mont[j] = mont[j] + cmont;

            }

            for (int i = 0; i < qcolnum * syslist.size(); i++) {
                fpcon[fpnumb - 1] = fpcon[fpnumb - 1] + ",";
            }

            for (int i = 0; i < mont.length; i++) {
                dxmont[i] = ConverToCNMoneyUtils.getConverToCNMoney(mont[i]
                        .toString());
            }

            // 读取发票打印控制数据
            List rlist = this.timeSharingDao
                    .find("from Receiptmanager where iscenicid=" + iscenicid
                            + " order by ordernum");
            for (int i = 0; i < rlist.size(); i++) {
                Receiptmanager r = (Receiptmanager) rlist.get(i);
                String biao = "";
                Long isb = 0L;
                Sysparv5 v5 = (Sysparv5) this.timeSharingDao.get(Sysparv5.class,
                        new Sysparv5Id("FPSZ", r.getPrintno()));
                biao = v5.getPmva();
                isb = v5.getIsb();
                if (r.getPrintno().equals("01")) {
                    // 发票内容
                    for (int j = 0; j < fapiaos.length; j++) {
                        fapiaos[j] = fapiaos[j] + fpcon[j];// 内容自带",";
                    }
                }
                if (r.getPrintno().equals("06")) {
                    // 顾客名称
                    if (r.getPrinttype().equals("02")) {

                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + biao + ":";
                        }
                    }
                    if (corpname != null && !corpname.equals("")) {
                        for (int j = 0; j < fapiaos.length; j++) {

                            fapiaos[j] = fapiaos[j] + corpname + ",";
                        }
                    } else {
                        if (r.getContenttype().equals("01")) {
                            // 程序控制

                            Stssalesvouchertab s = (Stssalesvouchertab) this.timeSharingDao
                                    .get(Stssalesvouchertab.class,
                                            new StssalesvouchertabId(
                                                    isalesvoucherid,
                                                    iticketstationid));
                            Custom c = (Custom) this.timeSharingDao.get(
                                    Custom.class, s.getUsid());
                            for (int j = 0; j < fapiaos.length; j++) {
                                if (c.getLgtp().equals("01")) {
                                    fapiaos[j] = fapiaos[j] + c.getLname()
                                            + ",";
                                } else {
                                    fapiaos[j] = fapiaos[j] + c.getCorpname()
                                            + ",";
                                }
                            }

                        } else {
                            // 系统设置
                            for (int j = 0; j < fapiaos.length; j++) {
                                fapiaos[j] = fapiaos[j] + r.getContent() + ",";
                            }

                        }
                    }
                }
                if (r.getPrintno().equals("07")) {
                    // 开票日期
                    if (r.getPrinttype().equals("02")) {

                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + biao + ":";
                        }
                    }
                    if (r.getContenttype().equals("01")) {
                        // 程序控制
                        // 系统设置
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + Tools.getTodayString()
                                    + ",";
                        }
                    } else {
                        // 系统设置
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + r.getContent() + ",";
                        }

                    }
                }
                if (r.getPrintno().equals("08")) {
                    // 金额大写
                    if (r.getPrinttype().equals("02")) {
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + biao + ":";
                        }
                    }
                    if (r.getContenttype().equals("01")) {
                        // 程序控制
                        // 系统设置
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + dxmont[j] + ",";
                        }
                    } else {
                        // 系统设置
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + r.getContent() + ",";
                        }

                    }
                }
                if (r.getPrintno().equals("09")) {
                    // 金额小写
                    if (r.getPrinttype().equals("02")) {
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + biao + ":";
                        }
                    }
                    if (r.getContenttype().equals("01")) {
                        // 程序控制
                        // 系统设置
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + mont[j] + ",";
                        }
                    } else {
                        // 系统设置
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + r.getContent() + ",";
                        }

                    }
                }
                if (r.getPrintno().equals("10")) {
                    // 开票单位
                    if (r.getPrinttype().equals("02")) {
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + biao + ":";
                        }
                    }
                    if (r.getContenttype().equals("01")) {
                        // 程序控制
                        // 系统设置
                        Esbscenicareatab e = (Esbscenicareatab) this.timeSharingDao
                                .get(Esbscenicareatab.class, iscenicid);
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + e.getSzscenicname() + ",";
                        }
                    } else {
                        // 系统设置
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + r.getContent() + ",";
                        }

                    }
                }
                if (r.getPrintno().equals("11")) {
                    // 开票人
                    if (r.getPrinttype().equals("02")) {
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + biao + ":";
                        }
                    }
                    if (r.getContenttype().equals("01")) {
                        // 程序控制
                        // 系统设置
                        Esfemployeetab e = (Esfemployeetab) this.timeSharingDao
                                .get(Esfemployeetab.class, iemployeeid);
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + e.getSzemployeename()
                                    + ",";
                        }
                    } else {
                        // 系统设置
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + r.getContent() + ",";
                        }
                    }
                }
                if (r.getPrintno().equals("12")) {
                    // 行业类别
                    if (isb == 1) {
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + r.getContent() + ",";
                        }
                    }
                }
                if (r.getPrintno().equals("13")) {
                    // 发票代码
                    if (isb == 1) {
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + r.getContent() + ",";
                        }
                    }
                }
                if (r.getPrintno().equals("14")) {
                    // 发票代码
                    if (fpno != null && !fpno.equals("")) {
                        Long fapiaono = Long.parseLong(fpno);
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j]
                                    + String.valueOf(fapiaono + j) + ",";
                        }
                    }

                }
            }

            for (int i = 0; i < fapiaos.length; i++) {
                fapiao = fapiao
                        + fapiaos[i].substring(0, fapiaos[i].length() - 1)
                        + "|";
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            System.out.println(e.getMessage());
        }
        fapiao.substring(0, fapiao.length() - 1);
        rs.addRow(new String[] { "true", fapiao });

        // 2015-03-02添加 lijingrui 发票号码保存
        Stssalesvouchertab s = (Stssalesvouchertab) this.timeSharingDao.get(
                Stssalesvouchertab.class, new StssalesvouchertabId(
                        isalesvoucherid, iticketstationid));
        s.setByprintinvoice(s.getByprintinvoice() + 1);
        s.setOrnote9(fpno);// 发票号码
        this.timeSharingDao.update(s);

        return rs;
    }

    public void updatefapiao(Long isalesvoucherid, Long iticketstationid) {
        Stssalesvouchertab s = (Stssalesvouchertab) this.timeSharingDao.get(
                Stssalesvouchertab.class, new StssalesvouchertabId(
                        isalesvoucherid, iticketstationid));
        s.setByprintinvoice(s.getByprintinvoice() + 1);
        this.timeSharingDao.update(s);

    }

    public void updatefapiaobyorid(String orid, Long iscenicid) {
        List slist = this.timeSharingDao
                .find(" from Stssalesvouchertab s where s.szsalesvoucherno='"
                        + orid + "'  and s.iscenicid= " + iscenicid
                        + " and  s.bysalesvouchertype in ('01','04')");
        if (slist != null && slist.size() > 0) {
            Stssalesvouchertab s = (Stssalesvouchertab) slist.get(0);
            s.setByprintinvoice(s.getByprintinvoice() + 1);
            this.timeSharingDao.update(s);
        }

    }

    public ResultBean getfapiao(String orid, Long iscenicid, Long iemployeeid,
                                String corpname, String fpno) {
        String fapiao = "";
        // 根据售票窗口查询窗口所在服务商
        ResultBean rs = new ResultBean();
        rs.setColumnNames(new String[] { "returnstats", "message" });
        try {

            // 根据订单号 + 服务商ID 找到售票凭证
            List slist = this.timeSharingDao
                    .find(" from Stssalesvouchertab s where s.szsalesvoucherno='"
                            + orid
                            + "'  and s.iscenicid= "
                            + iscenicid
                            + " and  s.bysalesvouchertype in ('01','04')");
            if (slist == null || slist.size() == 0) {
                rs.addRow(new String[] { "false", "对应订单不存在或未出票" });
                return rs;
            }
            Stssalesvouchertab s = (Stssalesvouchertab) slist.get(0);
            // 读取Receiptmanager控制中 printno=‘01’ 且 打印内容不是只打印标题的记录,查询最大打印条数
            List Receiptmanagerlist = this.timeSharingDao
                    .find("from Receiptmanager where iscenicid=" + iscenicid
                            + " and printno='01'");

            if (Receiptmanagerlist == null || Receiptmanagerlist.size() == 0) {
                rs.addRow(new String[] { "false", "后台发票打印内容设置出错" });
                return rs;
            }
            Receiptmanager receiptmanager = (Receiptmanager) Receiptmanagerlist
                    .get(0);

            int colnum = receiptmanager.getColnum().intValue();

            if (receiptmanager.getPrinttype().equals("02")) {
                // 标题内容一起打印
                colnum = colnum - 1;
            }

            List stslist = new ArrayList();
            try {
                stslist = this.timeSharingDao
                        .findBySqlToMap("select  et.sztickettypename,ep.szcrowdkindname,sd.itickettypeid,sd.mactualsaleprice,sum(case s.bysalesvouchertype when   '02' then -1*(sd.iticketplayer) else  sd.iticketplayer end  )  iticketplayer ,sum(case s.bysalesvouchertype when   '02' then -1*(sd.ideratenums) else  sd.ideratenums end ) as ideratenums,sum(case s.bysalesvouchertype when   '02' then -1*(sd.meventmoney) else  sd.meventmoney end ) as meventmoney,sum(case s.bysalesvouchertype when   '02' then -1*(sd.mderatemoney) else  sd.mderatemoney end ) as mderatemoney from Stssalesvouchertab s, Stssalesvoucherdetailstab sd,Edmtickettypetab et,Edpcrowdkindtab ep,Edmcrowdkindpricetab p where  sd.itickettypeid=et.itickettypeid and ep.icrowdkindid=p.icrowdkindid and sd.icrowdkindpriceid=p.icrowdkindpriceid and s.isalesvoucherid=sd.isalesvoucherid and s.iticketstationid=sd.iticketstationid and ((s.isalesvoucherid="
                                + s.getId().getIsalesvoucherid()
                                + " and s.iticketstationid="
                                + s.getId().getIticketstationid()
                                + ") or (s.issalesvoucherid="
                                + s.getId().getIsalesvoucherid()
                                + " and s.isticketstationid="
                                + s.getId().getIticketstationid()
                                + ")) group by et.sztickettypename,ep.szcrowdkindname,sd.itickettypeid,sd.mactualsaleprice");

            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            for (int i = 0; i < stslist.size(); i++) {
                Map map = (Map) stslist.get(i);
                if (new Long(map.get("ITICKETPLAYER").toString()) == 0) {
                    stslist.remove(i);
                }
            }
            if (stslist.size() == 0) {
                rs.addRow(new String[] { "false", "该单已全部退订，不用打印发票" });
                return rs;
            }

            int scolnumb = stslist.size();
            int fpnumb = scolnumb / colnum;
            if (scolnumb % colnum > 0) {
                fpnumb = fpnumb + 1;
            }
            int qcolnum = 0;
            if (scolnumb % colnum > 0) {
                qcolnum = colnum - scolnumb % colnum;
            }
            String[] fpcon = new String[fpnumb];
            Double[] mont = new Double[fpnumb];
            String[] dxmont = new String[fpnumb];
            String[] fapiaos = new String[fpnumb];
            for (int j = 0; j < fapiaos.length; j++) {
                fapiaos[j] = "";
            }
            String biaoti = "";
            List syslist = this.timeSharingDao
                    .find(" from Sysparv5 where id.pmky='FPSZ' and spmcd='01' and isvalue=1 order by id.pmcd");

            if (receiptmanager.getPrinttype().equals("02")) {
                // 标题打印
                for (int i = 0; i < syslist.size(); i++) {
                    Sysparv5 v5 = (Sysparv5) syslist.get(i);
                    biaoti = biaoti + v5.getPmva() + ",";
                }
            }

            for (int i = 0; i < stslist.size(); i++) {
                int j = i / colnum;
                if (i % colnum == 0) {
                    fpcon[j] = biaoti;
                }
                Map map = (Map) stslist.get(i);
                fpcon[j] = fpcon[j] + map.get("SZTICKETTYPENAME").toString()
                        + "(" + map.get("SZCROWDKINDNAME").toString() + "),"
                        + map.get("MACTUALSALEPRICE").toString() + ",";

                fpcon[j] = fpcon[j] + map.get("ITICKETPLAYER").toString();
                if (new Long(map.get("IDERATENUMS").toString()) > 0) {
                    fpcon[j] = fpcon[j] + "(免"
                            + map.get("IDERATENUMS").toString() + "),";
                } else {
                    fpcon[j] = fpcon[j] + ",";
                }

                double cmont = Double.parseDouble(map.get("MEVENTMONEY")
                        .toString())
                        - Double.parseDouble(map.get("MDERATEMONEY").toString());
                fpcon[j] = fpcon[j] + cmont + ",";

                if (mont[j] == null) {
                    mont[j] = 0D;
                }
                mont[j] = mont[j] + cmont;

            }

            for (int i = 0; i < qcolnum * syslist.size(); i++) {
                fpcon[fpnumb - 1] = fpcon[fpnumb - 1] + ",";
            }

            for (int i = 0; i < mont.length; i++) {
                dxmont[i] = ConverToCNMoneyUtils.getConverToCNMoney(mont[i]
                        .toString());
            }

            // 读取发票打印控制数据
            List rlist = this.timeSharingDao
                    .find("from Receiptmanager where iscenicid=" + iscenicid
                            + " order by ordernum");
            for (int i = 0; i < rlist.size(); i++) {
                Receiptmanager r = (Receiptmanager) rlist.get(i);
                String biao = "";
                Long isb = 0L;
                Sysparv5 v5 = (Sysparv5) this.timeSharingDao.get(Sysparv5.class,
                        new Sysparv5Id("FPSZ", r.getPrintno()));
                biao = v5.getPmva();
                isb = v5.getIsb();
                if (r.getPrintno().equals("01")) {
                    // 发票内容
                    for (int j = 0; j < fapiaos.length; j++) {
                        fapiaos[j] = fapiaos[j] + fpcon[j];// 内容自带",";
                    }
                }
                if (r.getPrintno().equals("06")) {
                    // 顾客名称
                    if (r.getPrinttype().equals("02")) {

                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + biao + ":";
                        }
                    }
                    if (corpname != null && !corpname.equals("")) {
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + corpname + ",";
                        }
                    } else {
                        if (r.getContenttype().equals("01")) {
                            // 程序控制

                            Custom c = (Custom) this.timeSharingDao.get(
                                    Custom.class, s.getUsid());
                            for (int j = 0; j < fapiaos.length; j++) {
                                if (c.getLgtp().equals("01")) {
                                    fapiaos[j] = fapiaos[j] + c.getLname()
                                            + ",";
                                } else {
                                    fapiaos[j] = fapiaos[j] + c.getCorpname()
                                            + ",";
                                }
                            }

                        } else {
                            // 系统设置
                            for (int j = 0; j < fapiaos.length; j++) {
                                fapiaos[j] = fapiaos[j] + r.getContent() + ",";
                            }

                        }
                    }
                }
                if (r.getPrintno().equals("07")) {
                    // 开票日期
                    if (r.getPrinttype().equals("02")) {

                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + biao + ":";
                        }
                    }
                    if (r.getContenttype().equals("01")) {
                        // 程序控制
                        // 系统设置
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + Tools.getTodayString()
                                    + ",";
                        }
                    } else {
                        // 系统设置
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + r.getContent() + ",";
                        }

                    }
                }
                if (r.getPrintno().equals("08")) {
                    // 金额大写
                    if (r.getPrinttype().equals("02")) {
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + biao + ":";
                        }
                    }
                    if (r.getContenttype().equals("01")) {
                        // 程序控制
                        // 系统设置
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + dxmont[j] + ",";
                        }
                    } else {
                        // 系统设置
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + r.getContent() + ",";
                        }

                    }
                }
                if (r.getPrintno().equals("09")) {
                    // 金额小写
                    if (r.getPrinttype().equals("02")) {
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + biao + ":";
                        }
                    }
                    if (r.getContenttype().equals("01")) {
                        // 程序控制
                        // 系统设置
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + mont[j] + ",";
                        }
                    } else {
                        // 系统设置
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + r.getContent() + ",";
                        }

                    }
                }
                if (r.getPrintno().equals("10")) {
                    // 开票单位
                    if (r.getPrinttype().equals("02")) {
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + biao + ":";
                        }
                    }
                    if (r.getContenttype().equals("01")) {
                        // 程序控制
                        // 系统设置
                        Esbscenicareatab e = (Esbscenicareatab) this.timeSharingDao
                                .get(Esbscenicareatab.class, iscenicid);
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + e.getSzscenicname() + ",";
                        }
                    } else {
                        // 系统设置
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + r.getContent() + ",";
                        }

                    }
                }
                if (r.getPrintno().equals("11")) {
                    // 开票人
                    if (r.getPrinttype().equals("02")) {
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + biao + ":";
                        }
                    }
                    if (r.getContenttype().equals("01")) {
                        // 程序控制
                        // 系统设置
                        Esfemployeetab e = (Esfemployeetab) this.timeSharingDao
                                .get(Esfemployeetab.class, iemployeeid);
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + e.getSzemployeename()
                                    + ",";
                        }
                    } else {
                        // 系统设置
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + r.getContent() + ",";
                        }
                    }
                }
                if (r.getPrintno().equals("12")) {
                    // 行业类别
                    if (isb == 1) {
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + r.getContent() + ",";
                        }
                    }
                }
                if (r.getPrintno().equals("13")) {
                    // 发票代码
                    if (isb == 1) {
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j] + r.getContent() + ",";
                        }
                    }
                }
                if (r.getPrintno().equals("14")) {
                    // 发票代码
                    if (fpno != null && !fpno.equals("")) {
                        Long fapiaono = Long.parseLong(fpno);
                        for (int j = 0; j < fapiaos.length; j++) {
                            fapiaos[j] = fapiaos[j]
                                    + String.valueOf(fapiaono + j) + ",";
                        }
                    }

                }
            }

            for (int i = 0; i < fapiaos.length; i++) {
                fapiao = fapiao
                        + fapiaos[i].substring(0, fapiaos[i].length() - 1)
                        + "|";
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            System.out.println(e.getMessage());
        }
        fapiao.substring(0, fapiao.length() - 1);
        rs.addRow(new String[] { "true", fapiao });
        return rs;
    }

    // 一票一人售出门票子表保存
    public List SaveStsschecktabug0(List cdchecklist, List zdetaillist,
                                    List cdetaillist, Stssalesvouchertab s,
                                    Stssalesvoucherdetailstab sd, Long icrowdkindid) {
        Esbscenicareatab scenic = (Esbscenicareatab) timeSharingDao.get(
                Esbscenicareatab.class, s.getIscenicid());
        Edpcrowdkindtab ek = (Edpcrowdkindtab) timeSharingDao.get(
                Edpcrowdkindtab.class, icrowdkindid);
        for (int i = 0; i < zdetaillist.size(); i++) {
            Stscomticketsalesdetailstab zstd = (Stscomticketsalesdetailstab) zdetaillist
                    .get(i);
            if (zstd.getId().getIsalesvoucherdetailsid().longValue() == sd
                    .getId().getIsalesvoucherdetailsid().longValue()) {
                List opwwlist = timeSharingDao
                        .find(" from Opwwicketsettab where itickettypeid="
                                + zstd.getItickettypeid()
                                + " and izticktypeid="
                                + zstd.getIztickettypeid() + " and byisuse=1");
                int a = cdchecklist.size();
                for (int j = 0; j < opwwlist.size(); j++) {
                    Opwwicketsettab opww = (Opwwicketsettab) opwwlist.get(j);
                    for (int m = 1; m <= zstd.getIsplitamount().intValue(); m++) {
                        Stsschecktab stss = new Stsschecktab();
                        StsschecktabId stssid = new StsschecktabId();
                        stssid.setIticketstationid(s.getId()
                                .getIticketstationid());
                        stssid.setSzsoldticketid(new Long(m));
                        stssid.setSzsoldticketsubid(new Long(a + 1));
                        a++;
                        stssid.setIsalesvoucherid(s.getId()
                                .getIsalesvoucherid());
                        stssid.setIsalesvoucherdetailsid(zstd.getId()
                                .getIsalesvoucherdetailsid());
                        stss.setId(stssid);
                        stss.setIgardengateid(opww.getIgardengateid());
                        stss.setIscenicid(s.getIscenicid());

                        stss.setItickettypeid(zstd.getItickettypeid());
                        stss.setIztickettypeid(zstd.getIztickettypeid());
                        stss.setBychecktype(new Long(0));
                        stss.setByconsumemode(opww.getByconsumemode());
                        stss.setIpasstimes(opww.getIlimittotaltimes());
                        stss.setIpassedtimes(new Long(0));
                        stss.setMsingletimes(new Long(1));
                        stss.setMpasstimes(new Long(1));
                        stss.setMsingledtimes(new Long(0));
                        stss.setMlimitconsume(new Double(0));
                        stss.setMsingleconsume(new Double(0));
                        stss.setMconsumed(new Double(0));
                        stss.setByisout(new Long(1));

                        Edmtickettypetab edmticket = (Edmtickettypetab) this.timeSharingDao
                                .get(Edmtickettypetab.class,
                                        zstd.getItickettypeid());

                        if (edmticket.getBymaketicketway().equals("02")) {
                            stss.setIsvalid(new Long(-1));
                        } else if (edmticket.getBymaketicketway().equals("01")
                                && !edmticket.getBymediatype().equals("00")
                                && !edmticket.getBymediatype().equals("01")) {
                            stss.setIsvalid(new Long(-1));
                        } else {
                            stss.setIsvalid(new Long(1));
                        }

                        stss.setDtmakedate(Tools.getDayTimes());
                        stss.setBylastcheckdir(new Long(0));
                        stss.setIcrowdkindid(icrowdkindid);

                        stss.setTripid(zstd.getTripid());
                        stss.setDtbegindate(zstd.getDtstartdate());
                        stss.setDtenddate(zstd.getDtenddate());

                        System.out.println("Stsschecktab4");
                        stss.setSzscenicname(scenic.getSzscenicname());
                        stss.setSzcrowdkindname(ek.getSzcrowdkindname());
                        stss.setSzmemo(ek.getSzmemo());
                        // 产品表
                        stss.setSztickettypename(edmticket
                                .getSztickettypename());
                        stss.setByusage(edmticket.getByusage());
                        stss.setByuselimit(edmticket.getByuselimit());
                        stss.setValidityday(edmticket.getValidityday());
                        // 产品属性表
                        Edmticketproduct ep = (Edmticketproduct) this.timeSharingDao
                                .get(Edmticketproduct.class,
                                        stss.getItickettypeid());
                        if (ep != null) {
                            if (ep.getInoteger3() != null) {
                                stss.setIsfristtimaeyz(ep.getInoteger3());
                            } else {
                                stss.setIsfristtimaeyz(0L);
                            }
                            if (ep.getInoteger2() != null) {
                                stss.setIsfristactive(ep.getInoteger2());
                            } else {
                                stss.setIsfristactive(0L);
                            }
                        } else {
                            stss.setIsfristtimaeyz(0L);
                            stss.setIsfristactive(0L);
                        }
                        // 检票设置表属性
                        stss.setBywicketconsumetype(opww
                                .getBywicketconsumetype());
                        stss.setByregfingerprinttype(opww
                                .getByregfingerprinttype());
                        stss.setItimeinterval(opww.getItimeinterval());

                        stss.setIse(opww.getMsingleconsume().longValue());
                        for (int k = 0; k < cdetaillist.size(); k++) {
                            Stssoldtickettab sts = (Stssoldtickettab) cdetaillist
                                    .get(k);
                            System.out.println("Szsoldticketid="
                                    + sts.getId().getSzsoldticketid());
                            System.out.println("m=" + m);
                            if (sts.getId().getIsalesvoucherdetailsid()
                                    .longValue() == zstd.getId()
                                    .getIsalesvoucherdetailsid().longValue()) {
                                if (sts.getId().getSzsoldticketid().longValue() == m) {
                                    System.out.println("printno="
                                            + sts.getSzticketprintno());
                                    stss.setSzticketprintno(sts
                                            .getSzticketprintno());
                                    stss.setManyouno(sts.getManyouno());
                                    stss.setMyzj(sts.getMyzj());
                                    stss.setName1(sts.getName1());
                                    stss.setZjno1(sts.getZjno1());
                                    stss.setMactualsaleprice(sts
                                            .getMactualsaleprice());
                                    stss.setIbusinessid(sts.getIbusinessid());
                                }
                            }
                        }
                        if (zstd.getIvenueseatsid() != null) {

                            stss.setIsc(zstd.getIvenueseatsid());
                        }
                        if (zstd.getIvenueid() != null) {
                            stss.setIsa(zstd.getIvenueid());
                        }
                        if (zstd.getIvenueareaid() != null) {
                            stss.setIsb(zstd.getIvenueareaid());
                        }
                        if (zstd.getSeatsid() != null
                                && !zstd.getSeatsid().equals("")) {
                            String seats = zstd.getSeatsid();
                            String[] seatids = seats.split(">");
                            stss.setIsd(new Long(seatids[m - 1]));
                        }

                        cdchecklist.add(stss);
                    }
                }
            }
        }
        return cdchecklist;
    }

    // 一票多人售出门票子表保存
    public List SaveStsschecktabug1(List cdchecklist, List zdetaillist,
                                    List cdetaillist, Stssalesvouchertab s,
                                    Stssalesvoucherdetailstab sd, Long icrowdkindid) {
        Esbscenicareatab scenic = (Esbscenicareatab) timeSharingDao.get(
                Esbscenicareatab.class, s.getIscenicid());
        Edpcrowdkindtab ek = (Edpcrowdkindtab) timeSharingDao.get(
                Edpcrowdkindtab.class, icrowdkindid);

        for (int i = 0; i < zdetaillist.size(); i++) {
            Stscomticketsalesdetailstab zstd = (Stscomticketsalesdetailstab) zdetaillist
                    .get(i);
            if (zstd.getId().getIsalesvoucherdetailsid().longValue() == sd
                    .getId().getIsalesvoucherdetailsid()) {
                List opwwlist = timeSharingDao
                        .find(" from Opwwicketsettab where itickettypeid="
                                + zstd.getItickettypeid()
                                + " and izticktypeid="
                                + zstd.getIztickettypeid());
                int a = cdchecklist.size();
                for (int j = 1; j <= opwwlist.size(); j++) {
                    Debug.print(" SaveStssoldticketsubtabug1 opwwlist == " + j);
                    int jj = j - 1;
                    Opwwicketsettab opww = (Opwwicketsettab) opwwlist.get(jj);
                    Stsschecktab stss = new Stsschecktab();
                    StsschecktabId stssid = new StsschecktabId();
                    stssid.setIticketstationid(s.getId().getIticketstationid());
                    stssid.setSzsoldticketid(new Long(1));
                    stssid.setSzsoldticketsubid(new Long(a + 1));
                    a++;
                    stssid.setIsalesvoucherid(s.getId().getIsalesvoucherid());
                    stssid.setIsalesvoucherdetailsid(zstd.getId()
                            .getIsalesvoucherdetailsid());
                    stss.setId(stssid);
                    stss.setIgardengateid(opww.getIgardengateid());
                    stss.setIscenicid(s.getIscenicid());
                    stss.setItickettypeid(zstd.getItickettypeid());
                    stss.setIztickettypeid(zstd.getIztickettypeid());
                    stss.setBychecktype(new Long(0));
                    stss.setByconsumemode(opww.getByconsumemode());

                    if (opww.getIlimittotaltimes().longValue() == 0) {
                        // 多次进园门
                        stss.setIpasstimes(opww.getIlimittotaltimes());
                    } else {
                        // 限制次数进园门
                        stss.setIpasstimes(zstd.getIsplitamount()
                                * opww.getIlimittotaltimes());
                    }
                    if (opww.getBywicketconsumetype().equals("01")) {
                        // 一检一人
                        stss.setMpasstimes(new Long(1));
                    } else {
                        // 一检多人、一单一检
                        stss.setMpasstimes(zstd.getIsplitamount());
                    }
                    stss.setIpassedtimes(new Long(0));
                    stss.setMsingletimes(zstd.getIsplitamount());
                    stss.setMsingledtimes(new Long(0));
                    stss.setMlimitconsume(new Double(0));
                    stss.setMsingleconsume(new Double(0));
                    stss.setMconsumed(new Double(0));
                    stss.setByisout(new Long(1));

                    stss.setDtmakedate(Tools.getDayTimes());
                    stss.setBylastcheckdir(new Long(0));
                    stss.setIcrowdkindid(icrowdkindid);
                    stss.setTripid(zstd.getTripid());
                    stss.setDtbegindate(zstd.getDtstartdate());
                    stss.setDtenddate(zstd.getDtenddate());
                    stss.setSzscenicname(scenic.getSzscenicname());
                    stss.setSzcrowdkindname(ek.getSzcrowdkindname());
                    stss.setSzmemo(ek.getSzmemo());
                    // 产品表
                    Edmtickettypetab edmticket = (Edmtickettypetab) this.timeSharingDao
                            .get(Edmtickettypetab.class,
                                    zstd.getItickettypeid());

                    if (edmticket.getBymaketicketway().equals("02")) {
                        stss.setIsvalid(new Long(-1));
                    } else if (edmticket.getBymaketicketway().equals("01")
                            && !edmticket.getBymediatype().equals("00")
                            && !edmticket.getBymediatype().equals("01")) {
                        stss.setIsvalid(new Long(-1));
                    } else {
                        stss.setIsvalid(new Long(1));
                    }
                    stss.setSztickettypename(edmticket.getSztickettypename());
                    stss.setByusage(edmticket.getByusage());
                    stss.setByuselimit(edmticket.getByuselimit());
                    stss.setValidityday(edmticket.getValidityday());
                    // 产品属性表
                    Edmticketproduct ep = (Edmticketproduct) this.timeSharingDao
                            .get(Edmticketproduct.class,
                                    stss.getItickettypeid());
                    if (ep != null) {
                        if (ep.getInoteger3() != null) {
                            stss.setIsfristtimaeyz(ep.getInoteger3());
                        } else {
                            stss.setIsfristtimaeyz(0L);
                        }
                        if (ep.getInoteger2() != null) {
                            stss.setIsfristactive(ep.getInoteger2());
                        } else {
                            stss.setIsfristactive(0L);
                        }
                    } else {
                        stss.setIsfristtimaeyz(0L);
                        stss.setIsfristactive(0L);
                    }
                    // 检票设置表属性
                    stss.setBywicketconsumetype(opww.getBywicketconsumetype());
                    stss.setByregfingerprinttype(opww.getByregfingerprinttype());
                    stss.setIse(opww.getMsingleconsume().longValue());
                    stss.setItimeinterval(opww.getItimeinterval());
                    for (int k = 0; k < cdetaillist.size(); k++) {
                        Stssoldtickettab sts = (Stssoldtickettab) cdetaillist
                                .get(k);

                        if (sts.getId().getIsalesvoucherdetailsid().longValue() == zstd
                                .getId().getIsalesvoucherdetailsid()
                                .longValue()) {
                            if (sts.getId().getSzsoldticketid().longValue() == 1) {
                                stss.setSzticketprintno(sts
                                        .getSzticketprintno());
                                stss.setManyouno(sts.getManyouno());
                                stss.setMyzj(sts.getMyzj());
                                stss.setName1(sts.getName1());
                                stss.setZjno1(sts.getZjno1());
                                stss.setMactualsaleprice(sts
                                        .getMactualsaleprice());
                                stss.setIbusinessid(sts.getIbusinessid());
                            }
                        }
                    }
                    cdchecklist.add(stss);

                }
            }
        }
        return cdchecklist;
    }

    public ResultBean getempordermassage(Long iemployeeid) {
        String today = Tools.getTodayString();
        ResultBean rs = new ResultBean();
        rs.setColumnCount(1);
        rs.setColumnNames(new String[] { "message" });
        double mont = 0;
        try {
            List<Map> list = timeSharingDao
                    .findBySqlToMap("select bysalesvouchertype,sum(iaccountreceivable) as mont from Stssalesvouchertab  s where substr(s.dtmakedate,1,10)>='"
                            + today
                            + "' and s.ihandler="
                            + iemployeeid
                            + " group by bysalesvouchertype");

            if (list != null && list.size() > 0) {
                for (Map map : list) {
                    String bysalesvouchertype = map.get("BYSALESVOUCHERTYPE")
                            .toString();

                    if (bysalesvouchertype.equals("01")) {
                        mont = mont
                                + Double.parseDouble(map.get("MONT").toString());
                    } else if (bysalesvouchertype.equals("02")) {
                        mont = mont
                                - Double.parseDouble(map.get("MONT").toString());
                    } else {
                        mont = mont
                                + Double.parseDouble(map.get("MONT").toString());
                    }
                }
                rs.addRow(new String[] { "当日累计：" + mont });
                Sysparv5 v5 = (Sysparv5) timeSharingDao.get(Sysparv5.class,
                        new Sysparv5Id("SPNM", "01"));
                int spnum = 5;
                if (v5 != null) {
                    spnum = Integer.parseInt(v5.getPmva());
                }
                List<Map> list1 = timeSharingDao
                        .findBySqlToMap("select * from (select s.isalesvoucherid,szsalesvoucherno,bysalesvouchertype,iaccountreceivable,sum(sd.iticketplayer) as numb from Stssalesvouchertab s,Stssalesvoucherdetailstab sd where substr(s.dtmakedate,1,10)>='"
                                + today
                                + "' and s.ihandler="
                                + iemployeeid
                                + " and  s.isalesvoucherid=sd.isalesvoucherid and s.iticketstationid=sd.iticketstationid group by s.isalesvoucherid,szsalesvoucherno,bysalesvouchertype,iaccountreceivable order by s.isalesvoucherid desc)  where rownum<"
                                + spnum);

                for (Map map : list1) {
                    String message = "";
                    String bysalesvouchertype = map.get("BYSALESVOUCHERTYPE")
                            .toString();

                    if (bysalesvouchertype.equals("01")) {
                        message = "售";
                    } else if (bysalesvouchertype.equals("02")) {
                        message = "退";
                    } else {
                        message = "售";
                    }
                    message = message + "单号："
                            + map.get("ISALESVOUCHERID").toString() + " 票数："
                            + map.get("NUMB").toString() + " 金额："
                            + map.get("IACCOUNTRECEIVABLE").toString();
                    rs.addRow(new String[] { message });
                }
            } else {
                rs.addRow(new String[] { "当日累计：" + 0 });
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return rs;
    }

    public ResultBean checksavetorder(T_order t_order, List listorder,
                                      List listzorder, Long iemployeeid, Long iticketwinid, Long maxid,
                                      Long igardengateid, String printno,String url) throws Exception {
    	if(url==null || url.length()<1){
    		url=WebContant.GetKeyValue("CenterUrl");
    	}
        System.out.println("checksavetorder");
        ResultBean rs = new ResultBean();
        rs.setColumnCount(1);
        rs.setColumnNames(new String[] { "returnstats" });
        Long jpnumb = 0L;
        Stssalesvouchertab s = this.savetStssalesvouchertab(t_order,
                iemployeeid, maxid, iticketwinid, "");

        Esbscenicareatab scenic = (Esbscenicareatab) timeSharingDao.get(
                Esbscenicareatab.class, new Long(t_order.getIscenicid()));

        Stssalessettlementtab st = this.savetStssalessettlementtab(s, t_order,
                "");
        Esbticketwintab e = (Esbticketwintab) timeSharingDao.get(
                Esbticketwintab.class, s.getIticketwinid());
        Esbticketstationtab esbticketstation = (Esbticketstationtab) timeSharingDao
                .get(Esbticketstationtab.class, e.getIticketstationid());
        String tickettypename = "";// 票名称
        String mactualsaleprice = "";// 单价
        String icrowdkindid = "";// 人群id
        String szcrowdkindname = "";// 人群名称
        String dtbegindate = "";// 开始时间
        String dtenddate = "";// 截至时间
        String bsfilebinary = "";// 指纹信息
        String szimagepath = "";// 相片路径
        String szmemo = "";// 语音路径
        String seq = "";// 竹筏流水
        String tripname = "";// 趟次名称
        for (int i = 0; i < listzorder.size(); i++) {
            T_zorderlist zlist = (T_zorderlist) listzorder.get(i);

            List opwwlist = timeSharingDao
                    .find(" from Opwwicketsettab where itickettypeid="
                            + zlist.getItickettypeid() + " and izticktypeid="
                            + zlist.getIztickettypeid());
            if (opwwlist.size() == 0) {
                rs.addRow(new String[] { "-1" });
                tickettypename = "无效票";
                rs = getcanshu11(rs, tickettypename, mactualsaleprice,
                        icrowdkindid, szcrowdkindname, dtbegindate, dtenddate,
                        bsfilebinary, szimagepath, szmemo, seq, tripname);
                return rs;
            }

        }

        // timeSharingDao.save(st);
        List detaillist = new ArrayList();
        List cdetaillist = new ArrayList();
        List zdetaillist = new ArrayList();
        List cdzetaillist = new ArrayList();
        List cdchecklist = new ArrayList();
        Long szsoldticketid = new Long(1);

        for (int i = 0; i < listorder.size(); i++) {
            T_orderlist tlist = (T_orderlist) listorder.get(i);
            // 售出凭证明细
            System.out.println("Itickettypeid=" + tlist.getItickettypeid());
            Edmtickettypetab edticket = (Edmtickettypetab) timeSharingDao.get(
                    Edmtickettypetab.class, new Long(tlist.getItickettypeid()));
            tickettypename = edticket.getSztickettypename();
            System.out.println("tickettypename=" + tickettypename);
            mactualsaleprice = tlist.getPric().toString();
            System.out.println("mactualsaleprice=" + mactualsaleprice);
            icrowdkindid = tlist.getIcrowdkindid();
            System.out.println("icrowdkindid=" + icrowdkindid);
            Edpcrowdkindtab edpcrowdkindtab = (Edpcrowdkindtab) timeSharingDao.get(
                    Edpcrowdkindtab.class, new Long(icrowdkindid));
            szcrowdkindname = edpcrowdkindtab.getSzcrowdkindname();
            System.out.println("szcrowdkindname=" + szcrowdkindname);
            Stssalesvoucherdetailstab sd = this.savetStssalesvoucherdetailstab(
                    s, tlist);
            Edmtickettypetab eticket = (Edmtickettypetab) timeSharingDao.get(
                    Edmtickettypetab.class, new Long(tlist.getItickettypeid()));
            sd.setIplayerperticket(new Long(tlist.getNumb()));
            sd.setIticketplayer(new Long(tlist.getNumb()));
            jpnumb = jpnumb + new Long(tlist.getNumb());
            detaillist.add(sd);
            // 售出凭证子明细

            // timeSharingDao.save(sd);
            // 添加售出门票表stssalesvoucherdetailstab
            zdetaillist = this.SavetStscomticketsalesdetailstab(zdetaillist, s,
                    tlist, listzorder);
            cdetaillist = this.saveStssoldtickettabug1make00(cdetaillist, sd,
                    s, esbticketstation.getSzstationcode(),
                    scenic.getSzsceniccode(), eticket.getSztickettypecode(),
                    new Long(tlist.getIcrowdkindid()));

            // 一票多人
            cdzetaillist = this.SaveStssoldticketsubtabug1(cdzetaillist,
                    zdetaillist, s, sd, new Long(tlist.getIcrowdkindid()));
            cdchecklist = this.SaveStsschecktabug1(cdchecklist, zdetaillist,
                    cdetaillist, s, sd, new Long(tlist.getIcrowdkindid()));

        }
        boolean ischeck = false;

        for (int i = 0; i < cdzetaillist.size(); i++) {
            Stssoldticketsubtab stss = (Stssoldticketsubtab) cdzetaillist
                    .get(i);

            if (stss.getIgardengateid().longValue() == igardengateid
                    .longValue()) {
                stss.setIpassedtimes(stss.getIpasstimes());
                ischeck = true;
            }

        }

        if (!ischeck) {
            rs.addRow(new String[] { "-1" });
            return rs;
        }

        try {/*
            javax.xml.rpc.Service service = null;
            java.net.URL endpointURL = new java.net.URL("http://"
                    +url
                    + "/services/centersaleService?wsdl");

            CentersaleServiceSoapBindingStub ssl = new CentersaleServiceSoapBindingStub(
                    endpointURL, service);
            ssl.setMaintainSession(true);
            com.ectrip.ticket.centersale.client.ResultBean cano = ssl.updateT_order(
                    t_order.getOrid(), s.getIscenicid(), iemployeeid,
                    new Double(t_order.getZfmont()));
            if (cano.getResult(0, 0).equals("false")) {

                rs.addRow(new String[] { "-1" });
                return rs;
            }
            Orderlog log = new Orderlog();
            log.setOrid(t_order.getOrid());
            log.setIemployeeid(iemployeeid);
            log.setStlg("0186");
            log.setLogtype(new Long(2));
            log.setLogdatetime(Tools.getDayTimes());
            log.setNote("闸机检票出票");
            log.setBrief("闸机检票出票");

            Long id = timeSharingDao.getMaxPk("logid", "Orderlog");
            log.setLogid(id + 1);
            timeSharingDao.save(log);

        */} catch (Exception e1) {
            System.out.print(e1);
            rs.addRow(new String[] { "-1" });
            return rs;
        }
        System.out.println("qqqqqqqqqqqqqqqqqqqqqqqqqqqq3");
        timeSharingDao.save(s);
        timeSharingDao.save(st);
        for (int i = 0; i < detaillist.size(); i++) {
            Stssalesvoucherdetailstab sd = (Stssalesvoucherdetailstab) detaillist
                    .get(i);
            timeSharingDao.save(sd);
        }
        for (int i = 0; i < cdetaillist.size(); i++) {
            Stssoldtickettab stsv = (Stssoldtickettab) cdetaillist.get(i);
            stsv.setMyzj(printno);
            timeSharingDao.save(stsv);

        }

        for (int i = 0; i < zdetaillist.size(); i++) {
            Stscomticketsalesdetailstab zstd = (Stscomticketsalesdetailstab) zdetaillist
                    .get(i);
            timeSharingDao.save(zstd);
        }
        for (int i = 0; i < cdzetaillist.size(); i++) {
            Stssoldticketsubtab stss = (Stssoldticketsubtab) cdzetaillist
                    .get(i);
            dtbegindate = stss.getDtbegindate().substring(2);
            dtenddate = stss.getDtenddate().substring(2);
            timeSharingDao.save(stss);
        }
        for (int i = 0; i < cdchecklist.size(); i++) {

            Stsschecktab stss = (Stsschecktab) cdchecklist.get(i);

            timeSharingDao.save(stss);
        }

        rs.addRow(new String[] { "3" });

        rs = getcanshu11(rs, tickettypename, mactualsaleprice, icrowdkindid,
                szcrowdkindname, dtbegindate, dtenddate, bsfilebinary,
                szimagepath, szmemo, seq, tripname);
        rs.addRow(new String[] { " " });
        rs.addRow(new String[] { " " });
        rs.addRow(new String[] { " " });
        rs.addRow(new String[] { " " });
        rs.addRow(new String[] { " " });
        rs.addRow(new String[] { " " });
        rs.addRow(new String[] { " " });
        rs.addRow(new String[] { " " });
        rs.addRow(new String[] { " " });
        rs.addRow(new String[] { jpnumb.toString() });
        System.out.println("jpnumb=" + jpnumb.toString());

        return rs;

    }

    public ResultBean getcanshu11(ResultBean rs, String tickettypename,
                                  String mactualsaleprice, String icrowdkindid,
                                  String szcrowdkindname, String dtbegindate, String dtenddate,
                                  String bsfilebinary, String szimagepath, String szmemo, String seq,
                                  String tripname) throws Exception {
        rs.addRow(new String[] { tickettypename });
        rs.addRow(new String[] { mactualsaleprice });
        rs.addRow(new String[] { icrowdkindid });
        rs.addRow(new String[] { szcrowdkindname });
        rs.addRow(new String[] { dtbegindate });
        rs.addRow(new String[] { dtenddate });
        rs.addRow(new String[] { bsfilebinary });
        rs.addRow(new String[] { szimagepath });
        rs.addRow(new String[] { szmemo });
        rs.addRow(new String[] { seq });
        rs.addRow(new String[] { tripname });
        return rs;
    }

    public Custom queryCustom(String usid) {
        Custom custom = (Custom) stockswareDao.get(Custom.class, usid);
        // 判断用户库存
        Custom cstm = custom;
        // 下订单用户是操作员,需要获取分社信息

        if (cstm.getLgtp().equals("02") && cstm.getTtlb().equals("01")
                && cstm.getUstp().equals("02")
                && cstm.getUsqx().equals("01110000000000000000")) {
            if (cstm.getIbusinessid() == 3) {
                Custom tom = (Custom) stockswareDao.get(Custom.class,
                        cstm.getSusid());

                custom = (Custom) stockswareDao.get(Custom.class,
                        tom.getSusid());
            } else {
                custom = (Custom) stockswareDao.get(Custom.class,
                        cstm.getSusid());
            }
        }
        if (cstm.getIbusinessid() == 3) {
            if (cstm.getLgtp().equals("02") && cstm.getTtlb().equals("01")
                    && cstm.getUstp().equals("02")
                    && cstm.getUsqx().equals("11110000000000000000")) {
                custom = (Custom) stockswareDao.get(Custom.class,
                        cstm.getSusid());
            }
        }

        return custom;

    }

    public ResultBean getGuidenitices(String szsalesvoucherno,
                                      String daoyouname, String cardno) throws Exception {
        if (szsalesvoucherno != null && !"".equals(szsalesvoucherno)) {
            String sql = "select * from Guidenotice g where g.szsalesvoucherno = ? ";
            List<Map> list = this.timeSharingDao.findBySqlToMap(sql,
                    szsalesvoucherno);
            if (list != null && !list.isEmpty()) {
                return MapToResultBean.toResultBean(list);
            } else {
                String hsql = "select new map(st.name1 as name,st.myzj as myzj,s.ihandler as ihandler,s.iticketwinid as iticketwinid,e.szemployeename as szemployeename,win.szticketwinname as szticketwinname) from Stssalesvouchertab s,Stssoldtickettab st,Esbticketwintab win,Esfemployeetab e "
                        + "where s.id.isalesvoucherid=st.id.isalesvoucherid and s.id.iticketstationid = st.id.iticketstationid and win.iticketwinid = s.iticketwinid and e.iemployeeid = s.ihandler "
                        + " and s.szsalesvoucherno='" + szsalesvoucherno + "'";
                List glist = this.timeSharingDao.find(hsql);
                if (glist != null && !glist.isEmpty()) {
                    Map map = (Map) glist.get(0);
                    Guidenotice guidenotice = new Guidenotice();
                    guidenotice.setSzsalesvoucherno(szsalesvoucherno);
                    guidenotice.setGuidename(map.get("name") == null ? "" : map
                            .get("name").toString());
                    guidenotice.setCardno(map.get("myzj") == null ? "" : map
                            .get("myzj").toString());
                    guidenotice.setBeginemployeeid(Long.parseLong(map.get(
                            "ihandler").toString()));
                    guidenotice.setBeginemployeename(map.get("szemployeename")
                            .toString());
                    guidenotice.setBeginaddress(Long.parseLong(map.get(
                            "iticketwinid").toString()));
                    guidenotice.setNote2(map.get("szticketwinname").toString());
                    this.timeSharingDao.save(guidenotice);
                    Map resultMap = BeanUtils.describe(guidenotice);
                    List newList = new ArrayList();
                    newList.add(resultMap);
                    return MapToResultBean.toResultBean(newList);
                } else {
                    ResultBean rs = new ResultBean();
                    rs.setColumnNames(new String[] { "returnstats", "message" });
                    rs.addRow(new String[] { "false", "无数据" });
                    return rs;

                }
            }
        } else {
            String tsql = "select * from Guidenotice g where 1 = ?";
            if (daoyouname != null && !"".equals(daoyouname)) {
                tsql += " and g.guidename = '" + daoyouname + "' ";
            }
            if (cardno != null && !"".equals(cardno)) {
                tsql += " and g.cardno = '" + cardno + "' ";
            }
            tsql += " order by g.szsalesvoucherno desc";
            return MapToResultBean.toResultBean(this.timeSharingDao.findBySqlToMap(
                    tsql, 1));
        }

    }

    public ResultBean saveGuidenitices(String[] parameters) throws Exception {
        String hsql = "from Guidenotice g where g.szsalesvoucherno = '"
                + parameters[0] + "' ";
        List list = this.timeSharingDao.find(hsql);
        if (list != null && !list.isEmpty()) {
            Guidenotice guidenotice = (Guidenotice) list.get(0);
            guidenotice.setGuidename(parameters[1]);
            guidenotice.setCardno(parameters[2]);
            if (parameters[3] != null && !"".equals(parameters[3])) {
                guidenotice.setInote1(Long.parseLong(parameters[3]));
            }
            guidenotice.setNote1(parameters[4]);
            guidenotice.setBegindate(Tools.getDayTimes());
            this.timeSharingDao.update(guidenotice);
            Map resultMap = BeanUtils.describe(guidenotice);
            List newList = new ArrayList();
            newList.add(resultMap);
            return MapToResultBean.toResultBean(newList);
        } else {
            ResultBean rs = new ResultBean();
            rs.setColumnNames(new String[] { "returnstats", "message" });
            rs.addRow(new String[] { "false", "无数据" });
            return rs;
        }
    }

    public ResultBean saveGuideniticesJs(String[] parameters) throws Exception {
//        sysparDao = (ISysparDao) SpringUtil.getBean("sysparDao");
        String hsql = "from Guidenotice g where g.szsalesvoucherno = '"
                + parameters[0] + "' ";
        List list = this.timeSharingDao.find(hsql);
        String beginservicetime = null;
        String endservicetime = null;
        if (list != null && !list.isEmpty()) {
            Guidenotice guidenotice = (Guidenotice) list.get(0);

            List stsslist = this.timeSharingDao
                    .find(" from Stssguidecount where orid='" + parameters[0]
                            + "'");
            if (stsslist != null && !stsslist.isEmpty()) {
                Map resultMap = BeanUtils.describe(guidenotice);
                List newList = new ArrayList();
                newList.add(resultMap);
                return MapToResultBean.toResultBean(newList);
            }
            guidenotice.setEndaddress(Long.parseLong(parameters[1]));
            guidenotice.setEndemployeeid(Long.parseLong(parameters[2]));
            Esfemployeetab emp = (Esfemployeetab) this.timeSharingDao.get(
                    Esfemployeetab.class, Long.parseLong(parameters[2]));
            guidenotice.setEndemployeename(emp.getSzemployeename());
            guidenotice.setEnddate(Tools.getDayTimes());
            // 计算服务时间
            String sql = "select distinct new map(st.dtbegindate as dtbegindate,st.dtenddate as dtenddate,s.id.isalesvoucherid as isalesvoucherid,s.id.iticketstationid as iticketstationid,st.id.isalesvoucherdetailsid as isalesvoucherdetailsid) from Stssalesvouchertab s,Stssoldticketsubtab st "
                    + "where s.id.isalesvoucherid = st.id.isalesvoucherid and s.id.iticketstationid = st.id.iticketstationid and s.szsalesvoucherno = '"
                    + parameters[0] + "' ";
            List tlist = this.timeSharingDao.find(sql);

            if (tlist != null && !tlist.isEmpty()) {
                Map tmap = (Map) tlist.get(0);
                beginservicetime = tmap.get("dtbegindate") == null ? "" : tmap
                        .get("dtbegindate").toString();
                endservicetime = tmap.get("dtenddate") == null ? "" : tmap.get(
                        "dtenddate").toString();

                if (endservicetime.substring(11).equals("23:59:59")) {
                    List szsstlist = timeSharingDao
                            .find("from Stssoldticketsubtab where  id.isalesvoucherid="
                                    + tmap.get("isalesvoucherid")
                                    + " and id.iticketstationid="
                                    + tmap.get("iticketstationid")
                                    + "   and  id.isalesvoucherdetailsid="
                                    + tmap.get("isalesvoucherdetailsid"));
                    if (szsstlist != null && szsstlist.size() > 0) {

                        for (int a = 0; a < szsstlist.size(); a++) {

                            Stssoldticketsubtab stsub = (Stssoldticketsubtab) szsstlist
                                    .get(a);
                            stsub.setDtenddate(Tools.getDayTimes());
                            this.timeSharingDao.update(stsub);
                        }
                    }

                    endservicetime = Tools.getDayTimes();
                }

                double totalservicetime = 0.0;
                if (!"".equals(beginservicetime) && !"".equals(endservicetime)) {
                    SimpleDateFormat sdf = new SimpleDateFormat(
                            "yyyy-MM-dd HH:mm:ss");
                    Date date1 = sdf.parse(beginservicetime);
                    Date date2 = sdf.parse(endservicetime);
                    totalservicetime = (date2.getTime() - date1.getTime()) / 3600000.0;
                }
                guidenotice.setBeginservicetime(beginservicetime);
                guidenotice.setEndservicetime(endservicetime);
                guidenotice.setTotalservicetime(totalservicetime);
            }

            Esbticketwintab win = (Esbticketwintab) this.timeSharingDao.get(
                    Esbticketwintab.class, Long.parseLong(parameters[1]));
            guidenotice.setNote3(win.getSzticketwinname());
            this.timeSharingDao.update(guidenotice);
            // 判断日期计算费用
            StringBuffer start = new StringBuffer(beginservicetime);
            String startDate = start.substring(0, 10);// 开始日期
            String startTimes = start.substring(11);// 开始时间
            StringBuffer end = new StringBuffer(endservicetime);
            String endDate = end.substring(0, 10);// 结束日期
            String endTimes = end.substring(11);// 结束时间
            String sysDateString = Tools.getNowString();// 系统日期
            double totaltime = 0.0;
            List dysjStartList = sysService.query("DYSJ", "sys.id.pmcd='0001'");
            List dysjEndList = sysService.query("DYSJ", "sys.id.pmcd='0002'");
            Map ms = (Map) dysjStartList.get(0);
            Map me = (Map) dysjEndList.get(0);
            String mstart = ms.get("pmva").toString();// 系统参数开始时间
            String mend = me.get("pmva").toString();// 系统参数结束时间
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            if (endDate.compareTo(startDate) < 0) {
                ResultBean rs = new ResultBean();
                rs.setColumnNames(new String[] { "returnstats", "message" });
                rs.addRow(new String[] { "false", "截止时间异常" });
            } else if (startDate.compareTo(endDate) == 0) {// 一天
                if (endTimes.compareTo(mend) > 0) {// 大于系统截止时间
                    endTimes = mend;
                }
                // 计算服务时长
                Date date1 = sdf.parse(startDate + " " + startTimes);
                Date date2 = sdf.parse(startDate + " " + endTimes);

                totaltime = (date2.getTime() - date1.getTime()) / 3600000.0;// 服务时长
                String hsqlString = " from Guideprices g where '" + startDate
                        + "' >= g.startdate and '" + endDate
                        + "' <=g.enddate and " + totaltime
                        + " <=times order by times ";
                List dList = this.timeSharingDao.find(hsqlString);
                if (dList != null && dList.size() > 0) {
                    Guideprices guideprices = (Guideprices) dList.get(0);
                    double glprices = guideprices.getGlprice();
                    double dyprice = guideprices.getDyprice();
                    Stssguidecount ss = new Stssguidecount();
                    Long ids = this.timeSharingDao
                            .getMaxPk("seq", "Stssguidecount") + 1L;
                    ss.setSeq(ids);
                    ss.setOrid(guidenotice.getSzsalesvoucherno());
                    ss.setSzprintno(guidenotice.getSzsalesvoucherno());
                    ss.setDstimes(startDate);
                    ss.setDyname(guidenotice.getGuidename());
                    ss.setZjhm(guidenotice.getCardno());
                    ss.setManagementfee(glprices);
                    ss.setDtstartdate(beginservicetime);
                    ss.setDtenddate(endDate + " " + endTimes);
                    ss.setTimes(totaltime);
                    ss.setPrices(dyprice);
                    this.timeSharingDao.save(ss);
                    guidenotice.setTotalservicetime(ss.getTimes());
                    guidenotice.setServicefee(dyprice);
                    guidenotice.setManagementfee(glprices);
                    this.timeSharingDao.update(guidenotice);
                } else {
                    throw new RuntimeException("导游价格表无数据");
                }

            } else if (endDate.compareTo(startDate) > 0) {// 多天
                double totaltimes2 = 0.0;
                double totalfee = 0.0;
                double totalmfee = 0.0;
                int days = Tools.getDayNumb(startDate, endDate);
                for (int i = 0; i < days; i++) {
                    String beginDate = Tools.getDate(startDate, i);
                    if (i == 0) {// 第一天
                        // 计算服务时长
                        Date date1 = sdf.parse(beginDate + " " + startTimes);
                        Date date2 = sdf.parse(beginDate + " " + mend);
                        totaltime = (date2.getTime() - date1.getTime()) / 3600000.0;// 服务时长
                        String hsqlString = " from Guideprices g where '"
                                + beginDate + "' >= g.startdate and '"
                                + beginDate + "' <=g.enddate and " + totaltime
                                + " <=times order by times ";
                        List dList = this.timeSharingDao.find(hsqlString);
                        if (dList != null && dList.size() > 0) {
                            Guideprices guideprices = (Guideprices) dList
                                    .get(0);
                            double glprices = guideprices.getGlprice();
                            double dyprice = guideprices.getDyprice();
                            Stssguidecount ss = new Stssguidecount();
                            Long ids = this.timeSharingDao.getMaxPk("seq",
                                    "Stssguidecount") + 1L;
                            ss.setSeq(ids);
                            ss.setOrid(guidenotice.getSzsalesvoucherno());
                            ss.setSzprintno(guidenotice.getSzsalesvoucherno());
                            ss.setDstimes(beginDate);
                            ss.setDyname(guidenotice.getGuidename());
                            ss.setZjhm(guidenotice.getCardno());
                            ss.setManagementfee(glprices);
                            ss.setDtstartdate(beginservicetime);
                            ss.setDtenddate(beginDate + " " + mend);
                            ss.setTimes(totaltime);
                            ss.setPrices(dyprice);
                            this.timeSharingDao.save(ss);
                            totaltimes2 += totaltime;
                            totalfee += dyprice;
                            totalmfee += glprices;
                        } else {
                            throw new RuntimeException("导游价格表无数据");
                        }
                    } else if (i == days - 1) {// 最后一天
                        // 计算服务时长
                        if (endTimes.compareTo(mend) > 0) {// 大于系统截止时间
                            endTimes = mend;
                        }
                        Date date1 = sdf.parse(beginDate + " " + mstart);
                        Date date2 = sdf.parse(beginDate + " " + endTimes);
                        totaltime = (date2.getTime() - date1.getTime()) / 3600000.0;// 服务时长
                        String hsqlString = " from Guideprices g where '"
                                + beginDate + "' >= g.startdate and '"
                                + beginDate + "' <=g.enddate and " + totaltime
                                + " <=times order by times ";
                        List dList = this.timeSharingDao.find(hsqlString);
                        if (dList != null && dList.size() > 0) {
                            Guideprices guideprices = (Guideprices) dList
                                    .get(0);
                            double glprices = guideprices.getGlprice();
                            double dyprice = guideprices.getDyprice();
                            Stssguidecount ss = new Stssguidecount();
                            Long ids = this.timeSharingDao.getMaxPk("seq",
                                    "Stssguidecount") + 1L;
                            ss.setSeq(ids);
                            ss.setOrid(guidenotice.getSzsalesvoucherno());
                            ss.setSzprintno(guidenotice.getSzsalesvoucherno());
                            ss.setDstimes(beginDate);
                            ss.setDyname(guidenotice.getGuidename());
                            ss.setZjhm(guidenotice.getCardno());
                            ss.setManagementfee(glprices);
                            ss.setDtstartdate(beginDate + " " + mstart);
                            ss.setDtenddate(beginDate + " " + endTimes);
                            ss.setTimes(totaltime);
                            ss.setPrices(dyprice);
                            this.timeSharingDao.save(ss);
                            totaltimes2 += totaltime;
                            totalfee += dyprice;
                            totalmfee += glprices;
                        } else {
                            throw new RuntimeException("导游价格表无数据");
                        }
                    } else {
                        Date date1 = sdf.parse(beginDate + " " + mstart);
                        Date date2 = sdf.parse(beginDate + " " + mend);
                        totaltime = (date2.getTime() - date1.getTime()) / 3600000.0;// 服务时长
                        String hsqlString = " from Guideprices g where '"
                                + beginDate + "' >= g.startdate and '"
                                + beginDate + "' <=g.enddate and " + totaltime
                                + " <=times order by times ";
                        List dList = this.timeSharingDao.find(hsqlString);
                        if (dList != null && dList.size() > 0) {
                            Guideprices guideprices = (Guideprices) dList
                                    .get(0);
                            double glprices = guideprices.getGlprice();
                            double dyprice = guideprices.getDyprice();
                            Stssguidecount ss = new Stssguidecount();
                            Long ids = this.timeSharingDao.getMaxPk("seq",
                                    "Stssguidecount") + 1L;
                            ss.setSeq(ids);
                            ss.setOrid(guidenotice.getSzsalesvoucherno());
                            ss.setSzprintno(guidenotice.getSzsalesvoucherno());
                            ss.setDstimes(beginDate);
                            ss.setDyname(guidenotice.getGuidename());
                            ss.setZjhm(guidenotice.getCardno());
                            ss.setManagementfee(glprices);
                            ss.setDtstartdate(beginDate + " " + mstart);
                            ss.setDtenddate(beginDate + " " + mend);
                            ss.setTimes(totaltime);
                            ss.setPrices(dyprice);
                            this.timeSharingDao.save(ss);
                            totaltimes2 += totaltime;
                            totalfee += dyprice;
                            totalmfee += glprices;
                        } else {
                            throw new RuntimeException("导游价格表无数据");
                        }
                    }
                }
                guidenotice.setTotalservicetime(totaltimes2);
                guidenotice.setServicefee(totalfee);
                guidenotice.setManagementfee(totalmfee);
                this.timeSharingDao.update(guidenotice);
            }

            Map resultMap = BeanUtils.describe(guidenotice);
            List newList = new ArrayList();
            newList.add(resultMap);
            return MapToResultBean.toResultBean(newList);
        } else {
            ResultBean rs = new ResultBean();
            rs.setColumnNames(new String[] { "returnstats", "message" });
            rs.addRow(new String[] { "false", "无数据" });
            return rs;
        }
    }

    /**
     * * Describe:获取某用户的价格分组 服务商id可为空
     *
     * @see com.ectrip.ticket.service.iservice.ITicketService#searchJgfz(String,
     *      Long)
     * @param usid
     * @param iscenicid
     * @return
     * @author lijingrui Date:2014-4-16
     */
    public String searchJgfz(String usid, Long iscenicid) {

        // 2015-02-05 任先平修改，如果是分销商，就直接返回分销商的价格分组 c.lgtp = '02' and ttlb = '01'
        // and ustp='01'
        Custom custom = ecService.getCustomByUserId(usid);
        if (custom != null) {
            // ttlb为99的是分销商
            if (custom.getLgtp().equals("02") && custom.getTtlb().equals("99")
                    && custom.getUstp().equals("01")) {
                System.out.println("分销商：" + custom.getUsid() + " 价格分组："
                        + custom.getNote2());
                return custom.getNote2();
            }
        }

        StringBuffer result = new StringBuffer();
        StringBuffer hsql = new StringBuffer(
                "select gz.usid as usid,gz.iscenicid as iscenicid,gz.pmcd as pmcd from Jgfz gz,(select connect_by_root usid as susid,connect_by_root corpname as scorpname,connect_by_root bname as bname,connect_by_root ibusinessid as ibusinessid,usid from custom c  START WITH c.lgtp = '02' and ttlb = '01' and ustp='01' connect by prior c.usid = c.susid) c where c.susid=gz.usid and gz.byisuse=1 and c.usid='"
                        + usid + "' ");
        if (iscenicid != null && !iscenicid.equals("")) {
            hsql.append(" and gz.iscenicid=" + iscenicid);
        }
        List<Map> lst = new ArrayList<Map>();
        try {
            lst = this.timeSharingDao.findBySqlToMap(hsql.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (lst != null && lst.size() > 0) {
            for (int i = 0; i < lst.size(); i++) {
                Map map = (Map) lst.get(i);
                if (map.get("PMCD") != null) {
                    if (i == 0) {
                        result.append(map.get("PMCD").toString());
                    } else {
                        result.append("," + map.get("PMCD").toString());
                    }

                }
            }
            return result.toString();
        } else {
            result.append("0000");
            return result.toString();
        }

    }


    public ResultBean ticketreprintjxzh(String cdcs, String iserialnums,
                                        Long iscenicid) {
        ResultBean rs = new ResultBean();
        rs.setColumnNames(new String[] { "itickettypeid", "iserialnum",
                "name1", "myzj", "zjno1", "manyouno", "sztickettypename",
                "strmaketype", "isvalid", "bymediatype", "bymaketicketway",
                "Yuanmenshuj", "mactualsaleprice", "dtstartdate", "dtenddate",
                "szticketprintno", "dayin", "fujuan","isalesvoucherid","isalesvoucherdetailsid","szsoldticketid","newticketprintno","Iplayerperticket","inote1" });

        List<Sysparv5> syslist = sysService.findSysparByPmky("PRSZ", "");
        Stssalesvouchertab s = new Stssalesvouchertab();
        List sprintlist = new ArrayList();
        System.out.println("ticketreprintjxzh1111111111111111");
        System.out.println("cdcs=" + cdcs);
        Boolean ispn = false;
        Sysparv5 sysparv5 = getSysparv5("COMM","0001");
        if(sysparv5 != null && sysparv5.getIsvalue() == 1L){
            ispn = true;
        }
        if (cdcs.equals("01")) {
            // 售出票流水
            String[] szticket = iserialnums.split(",");
            Stssoldtickettab st = queryStssoldtickettab(szticket[0]);
            if (st == null) {
                ResultBean rd = new ResultBean();
                rd.setColumnCount(2);
                rs.setColumnNames(new String[] { "returnstats", "message" });
                rd.addRow(new String[] { "false", szticket[0] + "没有票数据" });
                return rd;
            }

            if (st.getIscenicid().longValue() != iscenicid.longValue()) {
                ResultBean rd = new ResultBean();
                rd.setColumnCount(2);
                rs.setColumnNames(new String[] { "returnstats", "message" });
                rd.addRow(new String[] { "false", szticket[0] + "不是本服务商数据" });
                return rd;
            }
            s = (Stssalesvouchertab) this.timeSharingDao.get(
                    Stssalesvouchertab.class, new StssalesvouchertabId(st
                            .getId().getIsalesvoucherid(), st.getId()
                            .getIticketstationid()));
            sprintlist = this.timeSharingDao
                    .find(" from Soderollprintmanage p where p.id.iscenicid="
                            + s.getIscenicid() + " and p.id.ibusinessid="
                            + s.getIbusinessid() + "  order by p.ordernum ");
            if (sprintlist != null && sprintlist.size() > 0) {
                for (int m = 0; m < sprintlist.size(); m++) {
                    Soderollprintmanage p = (Soderollprintmanage) sprintlist
                            .get(m);
                    for (int n = 0; n < syslist.size(); n++) {
                        Sysparv5 sv5 = (Sysparv5) syslist.get(n);
                        if (sv5.getId().getPmcd()
                                .equals(p.getId().getPrintno())) {
                            p.setSzprintno(sv5.getPmva());
                            p.setPrintype(sv5.getIsa().toString());
                            if (sv5.getIsa() == 0) {
                                p.setNote(sv5.getPmvb());
                            }
                        }
                    }
                }
            }
            Esbticketstationtab esbticketstation = (Esbticketstationtab) timeSharingDao
                    .get(Esbticketstationtab.class, s.getId()
                            .getIticketstationid());
            for (int i = 0; i < szticket.length; i++) {
                Stssoldtickettab stsv = queryStssoldtickettab(szticket[i]);
                if (stsv.getId().getIsalesvoucherid().longValue() != s.getId()
                        .getIsalesvoucherid().longValue()
                        || stsv.getId().getIticketstationid().longValue() != s
                        .getId().getIticketstationid()) {
                    ResultBean rd = new ResultBean();
                    rd.setColumnCount(2);
                    rs.setColumnNames(new String[] { "returnstats", "message" });
                    rd.addRow(new String[] { "false",
                            szticket[i] + "不是同一个票不能一起重打印" });
                    return rd;
                }
                if (stsv.getByvalidity().equals("00")) {
                    Edmtickettypetab edticket = (Edmtickettypetab) timeSharingDao
                            .get(Edmtickettypetab.class,
                                    stsv.getItickettypeid());
                    Stssalesvoucherdetailstab sd = (Stssalesvoucherdetailstab) this.timeSharingDao
                            .get(Stssalesvoucherdetailstab.class,
                                    new StssalesvoucherdetailstabId(stsv
                                            .getId()
                                            .getIsalesvoucherdetailsid(), s
                                            .getId().getIsalesvoucherid(), s
                                            .getId().getIticketstationid()));
                    Edmcrowdkindpricetab price = (Edmcrowdkindpricetab) timeSharingDao.get(Edmcrowdkindpricetab.class,sd.getIcrowdkindpriceid());
                    String itickettypeid = edticket.getItickettypeid()
                            .toString();
                    String bymediatype = edticket.getBymediatype();// 介质类型
                    String orid = s.getSzsalesvoucherno();
                    String bymaketicketway = edticket.getBymaketicketway();// 出票方式
                    String Yuanmenshuj = "";// 园门数据

                    String dtstartdate = stsv.getDtstartdate();// 开始日期
                    String dtenddate = stsv.getDtenddate();// 结束日期
                    String szticketprintno = stsv.getSzticketprintno();
                    szticketprintno = changeSzprintNo(szticketprintno,orid,s.getUsid(),edticket);
                    String iserialnum = stsv.getIserialnum().toString();
                    String name1 = stsv.getName1();
                    String myzj = stsv.getMyzj();
                    String zjno1 = stsv.getZjno1();
                    String manyouno = stsv.getManyouno();
                    String sztickettypename = edticket.getSztickettypename();
                    String iplayerperticket = stsv.getIplayerperticket().toString();
                    Sysparv5 v = (Sysparv5) this.timeSharingDao.get(
                            Sysparv5.class,
                            new Sysparv5Id("CPFS", edticket
                                    .getBymaketicketway()));
                    String strmaketype = v.getPmva();
                    String isvalid = "0";

                    String dayin = "";
                    String fujian = "";
                    String mactualsaleprice = sd.getMactualsaleprice()
                            .toString();// 单价
                    String isalesvoucherid = stsv.getId().getIsalesvoucherid().toString();
                    String isalesvoucherdetailsid = stsv.getId().getIsalesvoucherdetailsid().toString();
                    String szsoldticketid = stsv.getId().getSzsoldticketid().toString();
                    String inote1 = price.getInote1().toString();
                    String newticketprintno = "";
                    if(ispn){
                        Esbscenicareatab esbscenicareatab = (Esbscenicareatab) timeSharingDao.get(Esbscenicareatab.class,edticket.getIscenicid());
                        newticketprintno = getPrintNo(esbticketstation.getSzstationcode(),esbscenicareatab.getSzsceniccode(),edticket.getSztickettypecode());
                        newticketprintno = changeSzprintNo(newticketprintno,orid,s.getUsid(),edticket);
                    }

                    if (edticket.getBymaketicketway().equals("00")) {
                        isvalid = "1";
                        dayin = CommonUtil.getprintmessage(s, stsv, edticket,
                                esbticketstation,true);

                        fujian = CommonUtil.getfprintmessage(sprintlist, s, stsv,
                                edticket, esbticketstation);

                        rs.addRow(new String[] { itickettypeid, iserialnum,
                                name1, myzj, zjno1, manyouno, sztickettypename,
                                strmaketype, isvalid, bymediatype,
                                bymaketicketway, Yuanmenshuj, mactualsaleprice,
                                dtstartdate, dtenddate, szticketprintno, dayin,
                                fujian,isalesvoucherid,isalesvoucherdetailsid,szsoldticketid,newticketprintno,iplayerperticket,inote1 });
                    } else {
                        if(edticket.getBymediatype().equals("02")){
                            isvalid = "1";
                            dayin = CommonUtil.getprintmessage(s, stsv, edticket,
                                    esbticketstation,true);
                        }
                        rs.addRow(new String[] { itickettypeid, iserialnum,
                                name1, myzj, zjno1, manyouno, sztickettypename,
                                strmaketype, isvalid, bymediatype,
                                bymaketicketway, Yuanmenshuj, mactualsaleprice,
                                dtstartdate, dtenddate, szticketprintno, dayin,
                                fujian,isalesvoucherid,isalesvoucherdetailsid,szsoldticketid,newticketprintno,iplayerperticket,inote1 });
                    }
                }

            }

        }
        if (cdcs.equals("02")) {
            // 票号
            Stssoldtickettab stsv = queryStssoldtickettab(iserialnums);
            if (stsv == null) {
                ResultBean rd = new ResultBean();
                rd.setColumnCount(2);
                rs.setColumnNames(new String[] { "returnstats", "message" });
                rd.addRow(new String[] { "false", iserialnums + "没有票数据" });
                return rd;
            }
            System.out.println("stsv=" + stsv.getIscenicid());
            System.out.println("iscenicid=" + iscenicid);
            if (stsv.getIscenicid().longValue() != iscenicid.longValue()) {
                ResultBean rd = new ResultBean();
                rd.setColumnCount(2);
                rs.setColumnNames(new String[] { "returnstats", "message" });
                rd.addRow(new String[] { "false", iserialnums + "不是本服务商数据" });
                return rd;
            }
            s = (Stssalesvouchertab) this.timeSharingDao.get(
                    Stssalesvouchertab.class, new StssalesvouchertabId(stsv
                            .getId().getIsalesvoucherid(), stsv.getId()
                            .getIticketstationid()));
            sprintlist = this.timeSharingDao
                    .find(" from Soderollprintmanage p where p.id.iscenicid="
                            + s.getIscenicid() + " and p.id.ibusinessid="
                            + s.getIbusinessid() + "  order by p.ordernum ");
            if (sprintlist != null && sprintlist.size() > 0) {
                for (int m = 0; m < sprintlist.size(); m++) {
                    Soderollprintmanage p = (Soderollprintmanage) sprintlist
                            .get(m);
                    for (int n = 0; n < syslist.size(); n++) {
                        Sysparv5 sv5 = syslist.get(n);
                        if (sv5.getId().getPmcd()
                                .equals(p.getId().getPrintno())) {
                            p.setSzprintno(sv5.getPmva());
                            p.setPrintype(sv5.getIsa().toString());
                            if (sv5.getIsa() == 0) {
                                p.setNote(sv5.getPmvb());
                            }
                        }
                    }
                }
            }
            Esbticketstationtab esbticketstation = (Esbticketstationtab) timeSharingDao
                    .get(Esbticketstationtab.class, s.getId()
                            .getIticketstationid());
            Edmtickettypetab edticket = (Edmtickettypetab) timeSharingDao.get(
                    Edmtickettypetab.class, stsv.getItickettypeid());
            Stssalesvoucherdetailstab sd = (Stssalesvoucherdetailstab) this.timeSharingDao
                    .get(Stssalesvoucherdetailstab.class,
                            new StssalesvoucherdetailstabId(stsv.getId()
                                    .getIsalesvoucherdetailsid(), s.getId()
                                    .getIsalesvoucherid(), s.getId()
                                    .getIticketstationid()));
            Edmcrowdkindpricetab price = (Edmcrowdkindpricetab) timeSharingDao.get(Edmcrowdkindpricetab.class,sd.getIcrowdkindpriceid());
            String itickettypeid = edticket.getItickettypeid().toString();
            String bymediatype = edticket.getBymediatype();// 介质类型

            String bymaketicketway = edticket.getBymaketicketway();// 出票方式
            String Yuanmenshuj = "";// 园门数据
            String orid = s.getSzsalesvoucherno();
            String dtstartdate = stsv.getDtstartdate();// 开始日期
            String dtenddate = stsv.getDtenddate();// 结束日期
            String szticketprintno = stsv.getSzticketprintno();
            szticketprintno = changeSzprintNo(szticketprintno,orid,s.getUsid(),edticket);
            String iserialnum = stsv.getIserialnum().toString();
            String name1 = stsv.getName1();
            String myzj = stsv.getMyzj();
            String zjno1 = stsv.getZjno1();
            String manyouno = stsv.getManyouno();
            String sztickettypename = edticket.getSztickettypename();
            String iplayerperticket = stsv.getIplayerperticket().toString();
            Sysparv5 v = getSysparv5("CPFS", edticket.getBymaketicketway());
            String strmaketype = v.getPmva();
            String isvalid = "0";

            String dayin = "";
            String fujian = "";
            String mactualsaleprice = sd.getMactualsaleprice().toString();// 单价
            String isalesvoucherid = stsv.getId().getIsalesvoucherid().toString();
            String isalesvoucherdetailsid = stsv.getId().getIsalesvoucherdetailsid().toString();
            String szsoldticketid = stsv.getId().getSzsoldticketid().toString();
            String inote1 = price.getInote1().toString();
            String newticketprintno = "";
            if(ispn){
                Esbscenicareatab esbscenicareatab = (Esbscenicareatab) timeSharingDao.get(Esbscenicareatab.class,edticket.getIscenicid());
                newticketprintno = getPrintNo(esbticketstation.getSzstationcode(),esbscenicareatab.getSzsceniccode(),edticket.getSztickettypecode());
                newticketprintno = changeSzprintNo(newticketprintno,orid,s.getUsid(),edticket);
            }

            if (edticket.getBymaketicketway().equals("00")) {
                isvalid = "1";
                dayin = CommonUtil.getprintmessage(s, stsv, edticket,
                        esbticketstation,true);

                fujian = CommonUtil.getfprintmessage(sprintlist, s, stsv, edticket,
                        esbticketstation);

                rs.addRow(new String[] { itickettypeid, iserialnum, name1,
                        myzj, zjno1, manyouno, sztickettypename, strmaketype,
                        isvalid, bymediatype, bymaketicketway, Yuanmenshuj,
                        mactualsaleprice, dtstartdate, dtenddate,
                        szticketprintno, dayin, fujian,isalesvoucherid,isalesvoucherdetailsid,szsoldticketid,newticketprintno,iplayerperticket,inote1 });
            } else {
                if(edticket.getBymediatype().equals("02")){
                    isvalid = "1";
                    dayin = CommonUtil.getprintmessage(s, stsv, edticket,
                            esbticketstation,true);
                }
                rs.addRow(new String[] { itickettypeid, iserialnum, name1,
                        myzj, zjno1, manyouno, sztickettypename, strmaketype,
                        isvalid, bymediatype, bymaketicketway, Yuanmenshuj,
                        mactualsaleprice, dtstartdate, dtenddate,
                        szticketprintno, dayin, fujian,isalesvoucherid,isalesvoucherdetailsid,szsoldticketid,newticketprintno,iplayerperticket,inote1 });
            }
        }
        if (cdcs.equals("03")) {
            List list = this.timeSharingDao
                    //.find(" from Stssalesvouchertab where szsalesvoucherno="+ iserialnums);
                  //lizhaodong 2017-4-20 修改
            		.find(" from Stssalesvouchertab where szsalesvoucherno='"+ iserialnums+"'");
            
            if (list == null || list.size() == 0) {
                ResultBean rd = new ResultBean();
                rd.setColumnCount(2);
                rs.setColumnNames(new String[] { "returnstats", "message" });
                rd.addRow(new String[] { "false", iserialnums + "没有销售数据" });
                return rd;
            }
            s = (Stssalesvouchertab) list.get(0);
            if (s.getIscenicid().longValue() != iscenicid.longValue()) {
                ResultBean rd = new ResultBean();
                rd.setColumnCount(2);
                rs.setColumnNames(new String[] { "returnstats", "message" });
                rd.addRow(new String[] { "false", iserialnums + "不是本服务商数据" });
                return rd;
            }
            if (s.getBysalesvouchertype().equals("02")) {
                ResultBean rd = new ResultBean();
                rd.setColumnCount(2);
                rs.setColumnNames(new String[] { "returnstats", "message" });
                rd.addRow(new String[] { "false", iserialnums + "没有销售数据" });
                return rd;
            }
            sprintlist = this.timeSharingDao
                    .find(" from Soderollprintmanage p where p.id.iscenicid="
                            + s.getIscenicid() + " and p.id.ibusinessid="
                            + s.getIbusinessid() + "  order by p.ordernum ");
            if (sprintlist != null && sprintlist.size() > 0) {
                for (int m = 0; m < sprintlist.size(); m++) {
                    Soderollprintmanage p = (Soderollprintmanage) sprintlist
                            .get(m);
                    for (int n = 0; n < syslist.size(); n++) {
                        Sysparv5 sv5 = (Sysparv5) syslist.get(n);
                        if (sv5.getId().getPmcd()
                                .equals(p.getId().getPrintno())) {
                            p.setSzprintno(sv5.getPmva());
                            p.setPrintype(sv5.getIsa().toString());
                            if (sv5.getIsa() == 0) {
                                p.setNote(sv5.getPmvb());
                            }
                        }
                    }
                }
            }
            Esbticketstationtab esbticketstation = (Esbticketstationtab) timeSharingDao
                    .get(Esbticketstationtab.class, s.getId()
                            .getIticketstationid());
            List stsvlist = this.timeSharingDao
                    .find(" from Stssoldtickettab  where id.isalesvoucherid="
                            + s.getId().getIsalesvoucherid()
                            + " and id.iticketstationid="
                            + s.getId().getIticketstationid());
            for (int i = 0; i < stsvlist.size(); i++) {
                Stssoldtickettab stsv = (Stssoldtickettab) stsvlist.get(i);
                if (stsv.getByvalidity().equals("00")) {
                    Edmtickettypetab edticket = (Edmtickettypetab) timeSharingDao
                            .get(Edmtickettypetab.class,
                                    stsv.getItickettypeid());
                    Stssalesvoucherdetailstab sd = (Stssalesvoucherdetailstab) this.timeSharingDao
                            .get(Stssalesvoucherdetailstab.class,
                                    new StssalesvoucherdetailstabId(stsv
                                            .getId()
                                            .getIsalesvoucherdetailsid(), s
                                            .getId().getIsalesvoucherid(), s
                                            .getId().getIticketstationid()));
                    Edmcrowdkindpricetab price = (Edmcrowdkindpricetab) timeSharingDao.get(Edmcrowdkindpricetab.class,sd.getIcrowdkindpriceid());
                    String itickettypeid = edticket.getItickettypeid()
                            .toString();
                    String bymediatype = edticket.getBymediatype();// 介质类型

                    String bymaketicketway = edticket.getBymaketicketway();// 出票方式
                    String Yuanmenshuj = "";// 园门数据
                    String orid  = s.getSzsalesvoucherno();
                    String dtstartdate = stsv.getDtstartdate();// 开始日期
                    String dtenddate = stsv.getDtenddate();// 结束日期
                    String szticketprintno = stsv.getSzticketprintno();
                    szticketprintno = changeSzprintNo(szticketprintno,orid,s.getUsid(),edticket);
                    String iserialnum = stsv.getIserialnum().toString();
                    String name1 = stsv.getName1();
                    String myzj = stsv.getMyzj();
                    String zjno1 = stsv.getZjno1();
                    String manyouno = stsv.getManyouno();
                    String sztickettypename = edticket.getSztickettypename();
                    String iplayerperticket = stsv.getIplayerperticket().toString();
                    Sysparv5 v = getSysparv5("CPFS", edticket.getBymaketicketway());
                    String strmaketype = v.getPmva();
                    String isvalid = "0";

                    String dayin = "";
                    String fujian = "";
                    String mactualsaleprice = sd.getMactualsaleprice()
                            .toString();// 单价
                    String isalesvoucherid = stsv.getId().getIsalesvoucherid().toString();
                    String isalesvoucherdetailsid = stsv.getId().getIsalesvoucherdetailsid().toString();
                    String szsoldticketid = stsv.getId().getSzsoldticketid().toString();
                    String inote1 = price.getInote1().toString();
                    String newticketprintno = "";
                    if(ispn){
                        Esbscenicareatab esbscenicareatab = (Esbscenicareatab) timeSharingDao.get(Esbscenicareatab.class,edticket.getIscenicid());
                        newticketprintno = getPrintNo(esbticketstation.getSzstationcode(),esbscenicareatab.getSzsceniccode(),edticket.getSztickettypecode());
                        newticketprintno = changeSzprintNo(newticketprintno,orid,s.getUsid(),edticket);
                    }

                    if (edticket.getBymaketicketway().equals("00")) {
                        isvalid = "1";
                        dayin = CommonUtil.getprintmessage(s, stsv, edticket,
                                esbticketstation,true);

                        fujian = CommonUtil.getfprintmessage(sprintlist, s, stsv,
                                edticket, esbticketstation);

                        rs.addRow(new String[] { itickettypeid, iserialnum,
                                name1, myzj, zjno1, manyouno, sztickettypename,
                                strmaketype, isvalid, bymediatype,
                                bymaketicketway, Yuanmenshuj, mactualsaleprice,
                                dtstartdate, dtenddate, szticketprintno, dayin,
                                fujian,isalesvoucherid,isalesvoucherdetailsid,szsoldticketid,newticketprintno,iplayerperticket,inote1 });
                    } else {
                        if(edticket.getBymediatype().equals("02")){
                            isvalid = "1";
                            dayin = CommonUtil.getprintmessage(s, stsv, edticket,
                                    esbticketstation,true);
                        }
                        rs.addRow(new String[] { itickettypeid, iserialnum,
                                name1, myzj, zjno1, manyouno, sztickettypename,
                                strmaketype, isvalid, bymediatype,
                                bymaketicketway, Yuanmenshuj, mactualsaleprice,
                                dtstartdate, dtenddate, szticketprintno, dayin,
                                fujian,isalesvoucherid,isalesvoucherdetailsid,szsoldticketid,newticketprintno,iplayerperticket,inote1 });
                    }
                }
            }

        }

        if (cdcs.equals("04")) {
            // 票号
            Stssoldtickettab stsv = new Stssoldtickettab();
            List list = this.timeSharingDao
                    .find(" from Stssoldtickettab where myzj='" + iserialnums
                            + "' and iscenicid=" + iscenicid
                            //+ " order by order by dtmakedate desc,iserialnum");
                            + " order by dtmakedate desc,iserialnum");
           System.out.println("重打印查询证件号------------------------------------------>");
            if (list == null || list.size() == 0) {
                ResultBean rd = new ResultBean();
                rd.setColumnCount(2);
                rs.setColumnNames(new String[] { "returnstats", "message" });
                rd.addRow(new String[] { "false", iserialnums + "没有销售数据" });
                return rd;
            } else {
                stsv = (Stssoldtickettab) list.get(0);
            }

            if (stsv.getIscenicid().longValue() != iscenicid.longValue()) {
                ResultBean rd = new ResultBean();
                rd.setColumnCount(2);
                rs.setColumnNames(new String[] { "returnstats", "message" });
                rd.addRow(new String[] { "false", iserialnums + "不是本服务商数据" });
                return rd;
            }
            s = (Stssalesvouchertab) this.timeSharingDao.get(
                    Stssalesvouchertab.class, new StssalesvouchertabId(stsv
                            .getId().getIsalesvoucherid(), stsv.getId()
                            .getIticketstationid()));
            sprintlist = this.timeSharingDao
                    .find(" from Soderollprintmanage p where p.id.iscenicid="
                            + s.getIscenicid() + " and p.id.ibusinessid="
                            + s.getIbusinessid() + "  order by p.ordernum ");
            if (sprintlist != null && sprintlist.size() > 0) {
                for (int m = 0; m < sprintlist.size(); m++) {
                    Soderollprintmanage p = (Soderollprintmanage) sprintlist
                            .get(m);
                    for (int n = 0; n < syslist.size(); n++) {
                        Sysparv5 sv5 = (Sysparv5) syslist.get(n);
                        if (sv5.getId().getPmcd()
                                .equals(p.getId().getPrintno())) {
                            p.setSzprintno(sv5.getPmva());
                            p.setPrintype(sv5.getIsa().toString());
                            if (sv5.getIsa() == 0) {
                                p.setNote(sv5.getPmvb());
                            }
                        }
                    }
                }
            }
            Esbticketstationtab esbticketstation = (Esbticketstationtab) timeSharingDao
                    .get(Esbticketstationtab.class, s.getId()
                            .getIticketstationid());
            Edmtickettypetab edticket = (Edmtickettypetab) timeSharingDao.get(
                    Edmtickettypetab.class, stsv.getItickettypeid());
            Stssalesvoucherdetailstab sd = (Stssalesvoucherdetailstab) this.timeSharingDao
                    .get(Stssalesvoucherdetailstab.class,
                            new StssalesvoucherdetailstabId(stsv.getId()
                                    .getIsalesvoucherdetailsid(), s.getId()
                                    .getIsalesvoucherid(), s.getId()
                                    .getIticketstationid()));
            Edmcrowdkindpricetab price = (Edmcrowdkindpricetab) timeSharingDao.get(Edmcrowdkindpricetab.class,sd.getIcrowdkindpriceid());
            String itickettypeid = edticket.getItickettypeid().toString();
            String bymediatype = edticket.getBymediatype();// 介质类型

            String bymaketicketway = edticket.getBymaketicketway();// 出票方式
            String Yuanmenshuj = "";// 园门数据
            String orid = s.getSzsalesvoucherno();
            String dtstartdate = stsv.getDtstartdate();// 开始日期
            String dtenddate = stsv.getDtenddate();// 结束日期
            String szticketprintno = stsv.getSzticketprintno();
            szticketprintno = changeSzprintNo(szticketprintno,orid,s.getUsid(),edticket);
            String iserialnum = stsv.getIserialnum().toString();
            String name1 = stsv.getName1();
            String myzj = stsv.getMyzj();
            String zjno1 = stsv.getZjno1();
            String manyouno = stsv.getManyouno();
            String sztickettypename = edticket.getSztickettypename();
            String iplayerperticket = stsv.getIplayerperticket().toString();
            Sysparv5 v = (Sysparv5) this.timeSharingDao.get(Sysparv5.class,
                    new Sysparv5Id("CPFS", edticket.getBymaketicketway()));
            String strmaketype = v.getPmva();
            String isvalid = "0";

            String dayin = "";
            String fujian = "";
            String mactualsaleprice = sd.getMactualsaleprice().toString();// 单价
            String isalesvoucherid = stsv.getId().getIsalesvoucherid().toString();
            String isalesvoucherdetailsid = stsv.getId().getIsalesvoucherdetailsid().toString();
            String szsoldticketid = stsv.getId().getSzsoldticketid().toString();
            String inote1 = price.getInote1().toString();
            String newticketprintno = "";
            if(ispn){
                Esbscenicareatab esbscenicareatab = (Esbscenicareatab) timeSharingDao.get(Esbscenicareatab.class,edticket.getIscenicid());
                newticketprintno = getPrintNo(esbticketstation.getSzstationcode(),esbscenicareatab.getSzsceniccode(),edticket.getSztickettypecode());
                newticketprintno = changeSzprintNo(newticketprintno,orid,s.getUsid(),edticket);
            }

            if (edticket.getBymaketicketway().equals("00")) {
                isvalid = "1";
                dayin = CommonUtil.getprintmessage(s, stsv, edticket,
                        esbticketstation,true);

                fujian = CommonUtil.getfprintmessage(sprintlist, s, stsv, edticket,
                        esbticketstation);

                rs.addRow(new String[] { itickettypeid, iserialnum, name1,
                        myzj, zjno1, manyouno, sztickettypename, strmaketype,
                        isvalid, bymediatype, bymaketicketway, Yuanmenshuj,
                        mactualsaleprice, dtstartdate, dtenddate,
                        szticketprintno, dayin, fujian,isalesvoucherid,isalesvoucherdetailsid,szsoldticketid,newticketprintno,iplayerperticket,inote1 });
            } else {
                if(edticket.getBymediatype().equals("02")){
                    isvalid = "1";
                    dayin = CommonUtil.getprintmessage(s, stsv, edticket,
                            esbticketstation,true);
                }
                rs.addRow(new String[] { itickettypeid, iserialnum, name1,
                        myzj, zjno1, manyouno, sztickettypename, strmaketype,
                        isvalid, bymediatype, bymaketicketway, Yuanmenshuj,
                        mactualsaleprice, dtstartdate, dtenddate,
                        szticketprintno, dayin, fujian,isalesvoucherid,isalesvoucherdetailsid,szsoldticketid,newticketprintno,iplayerperticket,inote1 });
            }
        }
        if (cdcs.equals("05")) {
            // 票号
            Stssoldtickettab stsv = new Stssoldtickettab();
            List list = this.timeSharingDao
                    .find(" from Stssoldtickettab where manyouno='"
                            + iserialnums + "' and iscenicid=" + iscenicid
                            //+ " order by order by dtmakedate desc,iserialnum");
                            + " order by dtmakedate desc,iserialnum");
            if (list == null || list.size() == 0) {
                ResultBean rd = new ResultBean();
                rd.setColumnCount(2);
                rs.setColumnNames(new String[] { "returnstats", "message" });
                rd.addRow(new String[] { "false", iserialnums + "没有销售数据" });
                return rd;
            } else {
                stsv = (Stssoldtickettab) list.get(0);
            }
            if (stsv.getIscenicid().longValue() != iscenicid.longValue()) {
                ResultBean rd = new ResultBean();
                rd.setColumnCount(2);
                rs.setColumnNames(new String[] { "returnstats", "message" });
                rd.addRow(new String[] { "false", iserialnums + "不是本服务商数据" });
                return rd;
            }
            s = (Stssalesvouchertab) this.timeSharingDao.get(
                    Stssalesvouchertab.class, new StssalesvouchertabId(stsv
                            .getId().getIsalesvoucherid(), stsv.getId()
                            .getIticketstationid()));
            sprintlist = this.timeSharingDao
                    .find(" from Soderollprintmanage p where p.id.iscenicid="
                            + s.getIscenicid() + " and p.id.ibusinessid="
                            + s.getIbusinessid() + "  order by p.ordernum ");
            if (sprintlist != null && sprintlist.size() > 0) {
                for (int m = 0; m < sprintlist.size(); m++) {
                    Soderollprintmanage p = (Soderollprintmanage) sprintlist
                            .get(m);
                    for (int n = 0; n < syslist.size(); n++) {
                        Sysparv5 sv5 = (Sysparv5) syslist.get(n);
                        if (sv5.getId().getPmcd()
                                .equals(p.getId().getPrintno())) {
                            p.setSzprintno(sv5.getPmva());
                            p.setPrintype(sv5.getIsa().toString());
                            if (sv5.getIsa() == 0) {
                                p.setNote(sv5.getPmvb());
                            }
                        }
                    }
                }
            }
            Esbticketstationtab esbticketstation = (Esbticketstationtab) timeSharingDao
                    .get(Esbticketstationtab.class, s.getId()
                            .getIticketstationid());
            Edmtickettypetab edticket = (Edmtickettypetab) timeSharingDao.get(
                    Edmtickettypetab.class, stsv.getItickettypeid());
            Stssalesvoucherdetailstab sd = (Stssalesvoucherdetailstab) this.timeSharingDao
                    .get(Stssalesvoucherdetailstab.class,
                            new StssalesvoucherdetailstabId(stsv.getId()
                                    .getIsalesvoucherdetailsid(), s.getId()
                                    .getIsalesvoucherid(), s.getId()
                                    .getIticketstationid()));
            Edmcrowdkindpricetab price = (Edmcrowdkindpricetab) timeSharingDao.get(Edmcrowdkindpricetab.class,sd.getIcrowdkindpriceid());
            String itickettypeid = edticket.getItickettypeid().toString();
            String bymediatype = edticket.getBymediatype();// 介质类型

            String bymaketicketway = edticket.getBymaketicketway();// 出票方式
            String Yuanmenshuj = "";// 园门数据
            String orid = s.getSzsalesvoucherno();
            String dtstartdate = stsv.getDtstartdate();// 开始日期
            String dtenddate = stsv.getDtenddate();// 结束日期
            String szticketprintno = stsv.getSzticketprintno();
            szticketprintno = changeSzprintNo(szticketprintno,orid,s.getUsid(),edticket);
            String iserialnum = stsv.getIserialnum().toString();
            String name1 = stsv.getName1();
            String myzj = stsv.getMyzj();
            String zjno1 = stsv.getZjno1();
            String manyouno = stsv.getManyouno();
            String sztickettypename = edticket.getSztickettypename();
            String iplayerperticket = stsv.getIplayerperticket().toString();
            Sysparv5 v = getSysparv5("CPFS", edticket.getBymaketicketway());
            String strmaketype = v.getPmva();
            String isvalid = "0";

            String dayin = "";
            String fujian = "";
            String mactualsaleprice = sd.getMactualsaleprice().toString();// 单价
            String isalesvoucherid = stsv.getId().getIsalesvoucherid().toString();
            String isalesvoucherdetailsid = stsv.getId().getIsalesvoucherdetailsid().toString();
            String szsoldticketid = stsv.getId().getSzsoldticketid().toString();
            String inote1 = price.getInote1().toString();
            String newticketprintno = "";
            if(ispn){
                Esbscenicareatab esbscenicareatab = (Esbscenicareatab) timeSharingDao.get(Esbscenicareatab.class,edticket.getIscenicid());
                newticketprintno = getPrintNo(esbticketstation.getSzstationcode(),esbscenicareatab.getSzsceniccode(),edticket.getSztickettypecode());
                newticketprintno = changeSzprintNo(newticketprintno,orid,s.getUsid(),edticket);
            }

            if (edticket.getBymaketicketway().equals("00")) {
                isvalid = "1";
                dayin = CommonUtil.getprintmessage(s, stsv, edticket,
                        esbticketstation,true);

                fujian = CommonUtil.getfprintmessage(sprintlist, s, stsv, edticket,
                        esbticketstation);

                rs.addRow(new String[] { itickettypeid, iserialnum, name1,
                        myzj, zjno1, manyouno, sztickettypename, strmaketype,
                        isvalid, bymediatype, bymaketicketway, Yuanmenshuj,
                        mactualsaleprice, dtstartdate, dtenddate,
                        szticketprintno, dayin, fujian,isalesvoucherid,isalesvoucherdetailsid,szsoldticketid,newticketprintno,iplayerperticket,inote1 });
            } else {
                if(edticket.getBymediatype().equals("02")){
                    isvalid = "1";
                    dayin = CommonUtil.getprintmessage(s, stsv, edticket,
                            esbticketstation,true);
                }
                rs.addRow(new String[] { itickettypeid, iserialnum, name1,
                        myzj, zjno1, manyouno, sztickettypename, strmaketype,
                        isvalid, bymediatype, bymaketicketway, Yuanmenshuj,
                        mactualsaleprice, dtstartdate, dtenddate,
                        szticketprintno, dayin, fujian,isalesvoucherid,isalesvoucherdetailsid,szsoldticketid,newticketprintno,iplayerperticket,inote1 });
            }
        }
        System.out.println("cdcs1111111111=" + cdcs);
        System.out.println("ticketreprintjxzh11111111111111112");
        if (rs.getRowsCount() == 0) {
            ResultBean rd = new ResultBean();
            rd.setColumnCount(2);
            rs.setColumnNames(new String[] { "returnstats", "message" });
            rd.addRow(new String[] { "false", iserialnums + "没有销售数据" });
            return rd;
        } else {
            return rs;
        }
    }

    public ResultBean ticketchupiao(Long isalesvoucherid, Long iticketstationid, Long rePrint) {
        ResultBean rs = new ResultBean();
        rs.setColumnNames(new String[] { "itickettypeid", "iserialnum",
                "name1", "myzj", "zjno1", "manyouno", "sztickettypename",
                "strmaketype", "isvalid", "bymediatype", "bymaketicketway",
                "Yuanmenshuj", "mactualsaleprice", "dtstartdate", "dtenddate",
                "szticketprintno", "dayin", "fujuan","isalesvoucherid","isalesvoucherdetailsid","szsoldticketid","newticketprintno","isprint","Iplayerperticket","inote1"});
        List<Sysparv5> syslist = sysService.findSysparByPmky("PRSZ", "");
        List stsvlist = this.timeSharingDao
                .find(" from Stssoldtickettab  where id.isalesvoucherid="
                        + isalesvoucherid + " and id.iticketstationid="
                        + iticketstationid + " order by id.isalesvoucherdetailsid ,id.szsoldticketid");

        Stssalesvouchertab s = (Stssalesvouchertab) this.timeSharingDao.get(
                Stssalesvouchertab.class, new StssalesvouchertabId(
                        isalesvoucherid, iticketstationid));
        List sprintlist = this.timeSharingDao
                .find(" from Soderollprintmanage p where p.id.iscenicid="
                        + s.getIscenicid() + " and p.id.ibusinessid="
                        + s.getIbusinessid() + "  order by p.ordernum ");
        if (sprintlist != null && sprintlist.size() > 0) {
            for (int m = 0; m < sprintlist.size(); m++) {
                Soderollprintmanage p = (Soderollprintmanage) sprintlist.get(m);
                for (int n = 0; n < syslist.size(); n++) {
                    Sysparv5 sv5 = syslist.get(n);
                    if (sv5.getId().getPmcd().equals(p.getId().getPrintno())) {
                        p.setSzprintno(sv5.getPmva());
                        p.setPrintype(sv5.getIsa().toString());
                        if (sv5.getIsa() == 0) {
                            p.setNote(sv5.getPmvb());
                        }
                    }
                }
            }
        }
        Esbticketstationtab esbticketstation = (Esbticketstationtab) timeSharingDao
                .get(Esbticketstationtab.class, s.getId().getIticketstationid());
        Boolean ispn = false;
        Sysparv5 sysparv5 = getSysparv5("COMM","0001");
        if(sysparv5 != null && sysparv5.getIsvalue() == 1L){
            ispn = true;
        }
        for (int i = 0; i < stsvlist.size(); i++) {
            Stssoldtickettab stsv = (Stssoldtickettab) stsvlist.get(i);
            if (stsv.getByvalidity().equals("00")) {
                Edmtickettypetab edticket = (Edmtickettypetab) timeSharingDao.get(
                        Edmtickettypetab.class, stsv.getItickettypeid());
                Esbscenicareatab esbscenicareatab = (Esbscenicareatab) timeSharingDao.get(Esbscenicareatab.class,edticket.getIscenicid());
                Stssalesvoucherdetailstab sd = (Stssalesvoucherdetailstab) this.timeSharingDao
                        .get(Stssalesvoucherdetailstab.class,
                                new StssalesvoucherdetailstabId(stsv.getId()
                                        .getIsalesvoucherdetailsid(),
                                        isalesvoucherid, iticketstationid));
                Edmcrowdkindpricetab price = (Edmcrowdkindpricetab) timeSharingDao.get(Edmcrowdkindpricetab.class,sd.getIcrowdkindpriceid());
                String itickettypeid = edticket.getItickettypeid().toString();
                String bymediatype = edticket.getBymediatype();// 介质类型

                String bymaketicketway = edticket.getBymaketicketway();// 出票方式
                String Yuanmenshuj = "";// 园门数据
                String orid = s.getSzsalesvoucherno();
                String dtstartdate = stsv.getDtstartdate();// 开始日期
                String dtenddate = stsv.getDtenddate();// 结束日期
                String szticketprintno = stsv.getSzticketprintno();
                szticketprintno = changeSzprintNo(szticketprintno,orid,s.getUsid(),edticket);
                String iserialnum = stsv.getIserialnum().toString();
                String name1 = stsv.getName1();
                String myzj = stsv.getMyzj();
                String zjno1 = stsv.getZjno1();
                String manyouno = stsv.getManyouno();
                String sztickettypename = edticket.getSztickettypename();
                String iplayerperticket = stsv.getIplayerperticket().toString();
                Sysparv5 v = getSysparv5("CPFS", edticket.getBymaketicketway());
                String strmaketype = v.getPmva();
                String isvalid = "0";

                String dayin = "";
                String fujian = "";
                String mactualsaleprice = sd.getMactualsaleprice().toString();// 单价
                String isalesvoucherdetailsid = sd.getId().getIsalesvoucherdetailsid().toString();
                String szsoldticketid = stsv.getId().getSzsoldticketid().toString();
                String inote1 = price.getInote1().toString();
                String newticketprintno = "";
                if(ispn){
                    if(rePrint != null && rePrint.longValue() == 1L){
                        newticketprintno = getPrintNo(esbticketstation.getSzstationcode(),esbscenicareatab.getSzsceniccode(),edticket.getSztickettypecode());
                        newticketprintno = changeSzprintNo(newticketprintno,orid,s.getUsid(),edticket);
                    }
                }
                String isprint = "0";
                List stslist = timeSharingDao
                        .find(" from Ticketprintlist where szticketprintno='"
                                + szticketprintno + "'");
                if(stslist != null && !stslist.isEmpty()){
                    isprint = "1";
                }
                if (edticket.getBymaketicketway().equals("00"))  {
                    isvalid = "1";
                    dayin = CommonUtil.getprintmessage(s, stsv, edticket,
                            esbticketstation,rePrint != null && rePrint.longValue() == 1L ? true : false);

                    fujian = CommonUtil.getfprintmessage(sprintlist, s, stsv,
                            edticket, esbticketstation);

                    rs.addRow(new String[] { itickettypeid, iserialnum, name1,
                            myzj, zjno1, manyouno, sztickettypename,
                            strmaketype, isvalid, bymediatype, bymaketicketway,
                            Yuanmenshuj, mactualsaleprice, dtstartdate,
                            dtenddate, szticketprintno, dayin, fujian,isalesvoucherid.toString(),isalesvoucherdetailsid,szsoldticketid,newticketprintno,isprint,iplayerperticket,inote1});
                }else {
                	//lizhaodong  2017-05-16 去掉了介质类型的检查,用于返回出票信息相关 开始
                    //if(edticket.getBymediatype().equals("02")){
                        isvalid = "1";
                        dayin = CommonUtil.getprintmessage(s, stsv, edticket,
                                esbticketstation,rePrint != null && rePrint.longValue() == 1L ? true : false);
                    //}
                    //lizhaodong  2017-05-16 去掉了介质类型的检查,用于返回出票信息相关 结束
                    rs.addRow(new String[] { itickettypeid, iserialnum, name1,
                            myzj, zjno1, manyouno, sztickettypename,
                            strmaketype, isvalid, bymediatype, bymaketicketway,
                            Yuanmenshuj, mactualsaleprice, dtstartdate,
                            dtenddate, szticketprintno, dayin, fujian,isalesvoucherid.toString(),isalesvoucherdetailsid,szsoldticketid,newticketprintno,isprint,iplayerperticket,inote1});
                }
            }
        }
        return rs;

    }

    public Sysparv5 getSysparv5(String pmky,String pmcd){
    	Sysparv5 sysparv5 = sysService.findOne(pmky, pmcd);
        /*List list = this.timeSharingDao.find("from Sysparv5 where id.pmky='"+pmky+"' and id.pmcd='"+pmcd+"' ");
        if(list!=null && !list.isEmpty()){
            return (Sysparv5) list.get(0);
        }*/
        return sysparv5;
    }

    public String changeSzprintNo(String szticketprintno,String orid,String usid,Edmtickettypetab ticket){
        try{
            Hotelprovider hp = (Hotelprovider) timeSharingDao.get(Hotelprovider.class,ticket.getIscenicid());
            if(hp != null && !StringUtils.isBlank(hp.getNoted9())){
                String website = hp.getNoted9().replace("{1}", szticketprintno).replace("{2}", orid).replace("{3}", URLEncoder.encode(ticket.getSztickettypename()))
                        .replace("{4}", ticket.getIscenicid().toString());
                if(website.contains("{99}")){
                    Custom custom = (Custom) this.timeSharingDao.get(Custom.class,usid);
                    if(custom != null && custom.getTtlb().equals("99")){
                        website = website.replace("{5}",usid);
                    }else{
                        usid = "offline";
                        website = website.replace("{5}",usid);
                    }
                    String signauture = EncryptUtil.MD5Hex(usid+orid+szticketprintno+"skyring999");
                    website = website.replace("{99}",signauture.substring(3,9));
                }else{
                    website = website.replace("{5}",usid);
                }
                szticketprintno = website+"#"+szticketprintno;
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        return szticketprintno;
    }

    public void saveSaleLog(String userid,String winid,String logType,String note){
        SaleLog saleLog = new SaleLog();
        Long logId = (timeSharingService.getMaxPk("logId", "SaleLog")+1);
        saleLog.setLogId(logId);
        saleLog.setWinId(Long.parseLong(winid));
        saleLog.setUserId(userid);
        saleLog.setLogType(logType);
        saleLog.setNote(note);
        saleLog.setDtmakedate(Tools.getDayTimes());
        this.timeSharingService.save(saleLog);
    }

    public String getPrintNo(String szstationcode,String szsceniccode,String sztickettypecode){
        List<Map> iserialnumlist = new ArrayList();
        try {
            iserialnumlist = timeSharingDao
                    .findBySqlToMapnocolsesession("select ticketid_sequence.nextval  from dual");
        } catch (Exception e1) {
            e1.printStackTrace();
        }
        Long iserialnum = new Long(
                (((Map) iserialnumlist.get(0)).get("NEXTVAL")).toString());
        String newmaxorno = Tools.ConvertTo36Text(iserialnum, 0);
        StringBuffer printno = new StringBuffer();
        printno.append(szstationcode);
        printno.append(szsceniccode);
        printno.append(sztickettypecode);
        if (newmaxorno.length() < 6) {
            for (int b = 0; b < 6 - newmaxorno.length(); b++) {
                printno.append("0");
            }
        }

        printno.append(newmaxorno);
        String szprintno = Tools.ticketMakeMd5(printno.toString());
        return szprintno;
    }

    public ResultBean findTicketPrinNo(String ticketPrintNo,Long tickettypeid,Long numb){
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[]{"returnstats", "message"});
        String sql = "from TicketPrintNo where ticketPrintno = '"+ticketPrintNo+"' and tickettypeid = "+tickettypeid;
        List list = this.timeSharingDao.find(sql);
        if(list != null && !list.isEmpty()){
            TicketPrintNo ticket = (TicketPrintNo) list.get(0);
            if(ticket.getStatus() != 1){
                rs.addRow(new String[] { "false", "票号无效或已售" });
            }else{
                sql = "select new map(ticketPrintno as returnstats) from TicketPrintNo where tickettypeid = "+tickettypeid+" and status = 1 " +
                        " and serialNumber >= "+ticket.getSerialNumber() +" order by serialNumber" ;
                list = this.timeSharingDao.findTopNumb(sql,numb.intValue());
                if(list != null && list.size() == numb.intValue()){
                    rs = MapToResultBean.toResultBean(list);
                }else{
                    rs.addRow(new String[] { "false", "数量不足" });
                }
            }
        }else{
            rs.addRow(new String[] { "false", "票号未导入" });
        }
        return rs;
    }
    /**
     *  前台售票当前最后一条售票数据
     */
	public String getLastSaleData(String iscenicid, String iticketwinid,String iemployeeid) {
	    String sql ="select s.szsalesvoucherno from Stssalesvouchertab s  where  s.iscenicid= "+iscenicid+
	    		" and iticketwinid="+iticketwinid+" and s.ipayeer=" +iemployeeid+
	    		" and s.bysalesvouchertype='01' "+
	    		" order by dtmakedate desc ";
	    List list = this.timeSharingDao.find(sql);
	    if(list==null || list.isEmpty())
	    {
	    	 return "";
	    }else
	    {
	    	 return (String) list.get(0);
	    }
    }
	
	/**
	 * 获取分时预约的票的对应的时段和库存
	 * @param productCode
	 * @return
	 */
	 public ResultBean getTicketTimeCount(String productCode,String choiceDate) {
        	//根据产品编码获取，分时时段列表
            //String timeHql = "select new map(time.id as id,time.startDate as startDate,time.endDate as endDate,time.tatalStock as tatalStock,"
            		//+ "time.currStock as currStock,time.saleStock as saleStock,time.productId as productId) "
            		//+ "from TimeSharingTicketTab time where time.productId = '"+productCode+"'";
           //List<Map> find = timeSharingDao.find(timeHql);
		  String timeHql = "select time.id,time.startDate,time.endDate,time.totalStock,"
         		+ "time.currStock,time.saleStock,time.productId "
         		+ "from TimeSharingTicketTab time where time.productId = '"+productCode+"' and time.dayTime='"+choiceDate+"'" ;
            List<Map> find = null;
			try {
				find = timeSharingDao.findBySqlToMapnocolsesession(timeHql);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
           if(find==null)
           {
        	   find=new ArrayList<Map>();
           }
	       return MapToResultBean.toResultBean(find);
     }



    /**
     * 查询身份证当天是否已经有订单或票信息
     * @param IDCard
     * @param choiceDate
     * @return
     */
    public ResultBean isExistIDcardToday(String iscenicID,String IDCard,String choiceDate,String url) {
    	if(url==null || url.length()<1){
    		url=WebContant.GetKeyValue("CenterUrl");
    	}
        ResultBean rs = new ResultBean();
        rs.setColumnCount(2);
        rs.setColumnNames(new String[] { "returnstats", "message" });
        try
        {
            String onlineHql;
            String underlineHql;
            if(StringUtils.isNotEmpty(iscenicID))
            {
                onlineHql= "select count(*) from TOrder t,MOrder m,TRealname r " +
                        "where t.id.orid =m.orid and m.orid=r.orid " +
                        "and (t.orhm='" + IDCard + "' or r.idcard='" + IDCard + "') and t.id.iscenicid="+ iscenicID+
                        " and m.stdt='" + choiceDate + "'";
            }else
            {
                onlineHql= "select count(*) from TOrder t,MOrder m,TRealname r " +
                    "where t.id.orid =m.orid and m.orid=r.orid " +
                    "and (t.orhm='" + IDCard + "' or r.idcard='" + IDCard + "') " +
                    " and m.stdt='" + choiceDate + "'";
            }

            List find = timeSharingDao.find(onlineHql);
            if(StringUtils.isNotEmpty(iscenicID))
            {
                underlineHql = "select count(*) from Stssoldtickettab s where s.myzj='" + IDCard
                        + "' and s.dtstartdate='" + choiceDate + "' and s.iscenicid="+iscenicID;
            }else
            {
                underlineHql = "select count(*) from Stssoldtickettab s where s.myzj='" + IDCard
                        + "' and s.dtstartdate='" + choiceDate + "'";
            }
            List find2 = timeSharingDao.find(underlineHql);
            if (
                    (find != null && !find.isEmpty() && (((Long)find.get(0))>0)) ||
                    (find2 != null && !find2.isEmpty() &&(((Long)find2.get(0))>0)))
            {
                rs.addRow(new String[] { "true", "该身份证当天已有票数据" });
                return rs;
            }else
            {
                if (WebContant.GetKeyValue("IsCenterUrl").equals("1"))
                {/*
                    javax.xml.rpc.Service service = null;
                    java.net.URL endpointURL = new java.net.URL("http://"
                            + url
                            + "/services/centersaleService?wsdl");
                    CentersaleServiceSoapBindingStub ssl = new CentersaleServiceSoapBindingStub(
                            endpointURL, service);
                    ssl.setMaintainSession(true);
                    com.ectrip.ticket.centersale.client.ResultBean cano = ssl
                            .isExistIDcardToday(iscenicID,IDCard, choiceDate);
                    if (cano.getResult(0, 0).equals("true"))
                    {
                        rs.addRow(new String[] { "true", "该身份证当天已有票数据" });
                    }else
                    {
                        rs.addRow(new String[] { "false", "该身份证当天不存在票数据" });
                    }
                */}else
                {
                    rs.addRow(new String[] { "false", "该身份证当天不存在票数据" });
                }
                return rs;
            }
        }catch(Exception e)
        {
            rs.addRow(new String[] { "error", "服务器出错了" });
            e.printStackTrace();
        }
        return rs;
    }

}